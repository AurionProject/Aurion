<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project name="ValidateServicesUDDI" resourceRoot="" soapui-version="4.0.0" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:interface xsi:type="con:WsdlInterface" wsaVersion="NONE" name="NhincComponentConnectionManagerBindingSoap" type="wsdl" bindingName="{urn:gov:hhs:fha:nhinc:nhinccomponentconnectionmanager}NhincComponentConnectionManagerBindingSoap" soapVersion="1_2" anonymous="optional" definition="C:/Projects/NHINC/Current/Product/Production/Common/Interfaces/src/wsdl/NhincComponentConnectionManager.wsdl" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:endpoints><con:endpoint>http://localhost:8080/NhinConnect/NhincComponentConnectionManager</con:endpoint><con:endpoint>http://172.16.50.82:8080/NhinConnect/NhincComponentConnectionManager</con:endpoint><con:endpoint>${#Project#ConnectionManagerEndpoint}</con:endpoint><con:endpoint>http://192.168.25.157:8080/NhinConnect/NhincComponentConnectionManager</con:endpoint><con:endpoint>http://localhost:8080/NhinConnect/NhincComponentConnectionManager</con:endpoint><con:endpoint>http://localhost:${NhincHttpPort}/NhinConnect/NhincComponentConnectionManager</con:endpoint></con:endpoints><con:operation isOneWay="false" action="urn:ForceRefreshInternalConnectCache" name="ForceRefreshInternalConnectCache" bindingOperationName="ForceRefreshInternalConnectCache" type="Request-Response" outputName="ForceRefreshInternalConnectCacheResponse" inputName="ForceRefreshInternalConnectCacheRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/></con:operation><con:operation isOneWay="false" action="urn:ForceRefreshUDDICache" name="ForceRefreshUDDICache" bindingOperationName="ForceRefreshUDDICache" type="Request-Response" outputName="ForceRefreshUDDICacheResponse" inputName="ForceRefreshUDDICacheRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/></con:operation><con:operation isOneWay="false" action="urn:GetAllBusinessEntities" name="GetAllBusinessEntities" bindingOperationName="GetAllBusinessEntities" type="Request-Response" outputName="GetAllBusinessEntitiesResponse" inputName="GetAllBusinessEntitiesRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/></con:operation><con:operation isOneWay="false" action="urn:GetAllBusinessEntitySetByServiceName" name="GetAllBusinessEntitySetByServiceName" bindingOperationName="GetAllBusinessEntitySetByServiceName" type="Request-Response" outputName="GetAllBusinessEntitySetByServiceNameResponse" inputName="GetAllBusinessEntitySetByServiceNameRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/></con:operation><con:operation isOneWay="false" action="urn:GetAllCommunities" name="GetAllCommunities" bindingOperationName="GetAllCommunities" type="Request-Response" outputName="GetAllCommunitiesResponse" inputName="GetAllCommunitiesRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/></con:operation><con:operation isOneWay="false" action="urn:GetAllConnectionInfoEndpointSetByServiceName" name="GetAllConnectionInfoEndpointSetByServiceName" bindingOperationName="GetAllConnectionInfoEndpointSetByServiceName" type="Request-Response" outputName="GetAllConnectionInfoEndpointSetByServiceNameResponse" inputName="GetAllConnectionInfoEndpointSetByServiceNameRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/></con:operation><con:operation isOneWay="false" action="urn:GetAllConnectionInfoSetByServiceName" name="GetAllConnectionInfoSetByServiceName" bindingOperationName="GetAllConnectionInfoSetByServiceName" type="Request-Response" outputName="GetAllConnectionInfoSetByServiceNameResponse" inputName="GetAllConnectionInfoSetByServiceNameRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/></con:operation><con:operation isOneWay="false" action="urn:GetBusinessEntity" name="GetBusinessEntity" bindingOperationName="GetBusinessEntity" type="Request-Response" outputName="GetBusinessEntityResponse" inputName="GetBusinessEntityRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/></con:operation><con:operation isOneWay="false" action="urn:GetBusinessEntityByServiceName" name="GetBusinessEntityByServiceName" bindingOperationName="GetBusinessEntityByServiceName" type="Request-Response" outputName="GetBusinessEntityByServiceNameResponse" inputName="GetBusinessEntityByServiceNameRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/></con:operation><con:operation isOneWay="false" action="urn:GetBusinessEntitySet" name="GetBusinessEntitySet" bindingOperationName="GetBusinessEntitySet" type="Request-Response" outputName="GetBusinessEntitySetResponse" inputName="GetBusinessEntitySetRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/></con:operation><con:operation isOneWay="false" action="urn:GetBusinessEntitySetByServiceName" name="GetBusinessEntitySetByServiceName" bindingOperationName="GetBusinessEntitySetByServiceName" type="Request-Response" outputName="GetBusinessEntitySetByServiceNameResponse" inputName="GetBusinessEntitySetByServiceNameRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/></con:operation><con:operation isOneWay="false" action="urn:GetConnectionInfoByServiceName" name="GetConnectionInfoByServiceName" bindingOperationName="GetConnectionInfoByServiceName" type="Request-Response" outputName="GetConnectionInfoByServiceNameResponse" inputName="GetConnectionInfoByServiceNameRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/></con:operation><con:operation isOneWay="false" action="urn:GetConnectionInfoEndpointByServiceName" name="GetConnectionInfoEndpointByServiceName" bindingOperationName="GetConnectionInfoEndpointByServiceName" type="Request-Response" outputName="GetConnectionInfoEndpointByServiceNameResponse" inputName="GetConnectionInfoEndpointByServiceNameRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/></con:operation><con:operation isOneWay="false" action="urn:GetConnectionInfoEndpointSet" name="GetConnectionInfoEndpointSet" bindingOperationName="GetConnectionInfoEndpointSet" type="Request-Response" outputName="GetConnectionInfoEndpointSetResponse" inputName="GetConnectionInfoEndpointSetRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/></con:operation><con:operation isOneWay="false" action="urn:GetConnectionInfoEndpointSetByServiceName" name="GetConnectionInfoEndpointSetByServiceName" bindingOperationName="GetConnectionInfoEndpointSetByServiceName" type="Request-Response" outputName="GetConnectionInfoEndpointSetByServiceNameResponse" inputName="GetConnectionInfoEndpointSetByServiceNameRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/></con:operation><con:operation isOneWay="false" action="urn:GetConnectionInfoSet" name="GetConnectionInfoSet" bindingOperationName="GetConnectionInfoSet" type="Request-Response" outputName="GetConnectionInfoSetResponse" inputName="GetConnectionInfoSetRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/></con:operation><con:operation isOneWay="false" action="urn:GetConnectionInfoSetByServiceName" name="GetConnectionInfoSetByServiceName" bindingOperationName="GetConnectionInfoSetByServiceName" type="Request-Response" outputName="GetConnectionInfoSetByServiceNameResponse" inputName="GetConnectionInfoSetByServiceNameRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/></con:operation><con:operation isOneWay="false" action="urn:StoreAssigningAuthorityToHomeCommunityMapping" name="StoreAssigningAuthorityToHomeCommunityMapping" bindingOperationName="StoreAssigningAuthorityToHomeCommunityMapping" type="Request-Response" outputName="StoreAssigningAuthorityToHomeCommunityMappingResponse" inputName="StoreAssigningAuthorityToHomeCommunityMappingRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/></con:operation><con:operation isOneWay="false" action="urn:GetAssigningAuthoritiesByHomeCommunity" name="GetAssigningAuthoritiesByHomeCommunity" bindingOperationName="GetAssigningAuthoritiesByHomeCommunity" type="Request-Response" outputName="GetAssigningAuthoritiesByHomeCommunityResponse" inputName="GetAssigningAuthoritiesByHomeCommunityRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/></con:operation><con:operation isOneWay="false" action="urn:GetHomeCommunityByAssigningAuthority" name="GetHomeCommunityByAssigningAuthority" bindingOperationName="GetHomeCommunityByAssigningAuthority" type="Request-Response" outputName="GetHomeCommunityByAssigningAuthorityResponse" inputName="GetHomeCommunityByAssigningAuthorityRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/></con:operation><con:operation isOneWay="false" action="GetConnectionInfoEndpontFromNhinTarget" name="GetConnectionInfoEndpontFromNhinTarget" bindingOperationName="GetConnectionInfoEndpontFromNhinTarget" type="Request-Response" outputName="GetConnectionInfoEndpontFromNhinTargetResponse" inputName="GetConnectionInfoEndpontFromNhinTargetRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/></con:operation><con:operation isOneWay="false" action="GetUrlSetFromNhinTargetCommunities" name="GetUrlSetFromNhinTargetCommunities" bindingOperationName="GetUrlSetFromNhinTargetCommunities" type="Request-Response" outputName="GetUrlSetFromNhinTargetCommunitiesResponse" inputName="GetUrlSetFromNhinTargetCommunitiesRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/></con:operation></con:interface><con:testSuite name="ValidateServices TestSuite"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="ValidateServicesfor4.4 TestCase" searchProperties="true" id="e9f67712-af44-4fc3-bc36-57a8332642ec" timeout="0"><con:settings/><con:testStep type="request" name="GetConnectionInfoByDocQueryService"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>NhincComponentConnectionManagerBindingSoap</con:interface><con:operation>GetConnectionInfoByServiceName</con:operation><con:request name="GetConnectionInfoByDocQueryService"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#ConnectionManagerEndpoint}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope" xmlns:urn="urn:gov:hhs:fha:nhinc:common:connectionmanagerinfo" xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
   <soapenv:Header/>
   <soapenv:Body>
      <urn:HomeCommunityWithServiceName>
         <urn:homeCommunity>
            <urn1:homeCommunityId>${#Project#HCID4}</urn1:homeCommunityId>
         </urn:homeCommunity>
         <urn:serviceName>QueryForDocuments</urn:serviceName>
      </urn:HomeCommunityWithServiceName>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="Schema Compliance"><con:configuration/></con:assertion><con:assertion type="SOAP Fault Assertion"/><con:assertion type="XPath Match" name="HCID Match"><con:configuration><path>declare namespace ns2='urn:gov:hhs:fha:nhinc:common:connectionmanagerinfo';
declare namespace ns3='urn:gov:hhs:fha:nhinc:common:nhinccommon';
//ns2:ConnectionInfo[1]/ns2:homeCommunity[1]/ns3:homeCommunityId[1]</path><content>${#Project#HCID4}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:assertion type="XPath Match" name="ServiceName Match"><con:configuration><path>declare namespace ns2='urn:gov:hhs:fha:nhinc:common:connectionmanagerinfo';
//ns2:ConnectionInfo[1]/ns2:serviceConnectionInfos[1]/ns2:serviceConnectionInfo[1]/ns2:serviceName[1]</path><content>QueryForDocuments</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion"><con:configuration><scriptText>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def holder = groovyUtils.getXmlHolder( messageExchange.responseContent )
holder.namespaces["ns1"] = "urn:gov:hhs:fha:nhinc:common:connectionmanagerinfo"
def location = context.findProperty('Location' );
def gatewayIP = context.findProperty( 'GatewayIP' );
def gatewayHostname = context.findProperty( 'GatewayHostName' );
def adapterIP = context.findProperty('AdapterIP' );
def adapterHostname = context.findProperty('AdapterHostName' );
if (location == "G") {
  IP = gatewayIP;
  hostname = gatewayHostname;
}
if (location == "A") {
  IP = adapterIP;
  hostname = adapterHostname;
} 

def url = holder["//ns1:ConnectionInfo[1]/ns1:serviceConnectionInfos[1]/ns1:serviceConnectionInfo[1]/ns1:url[1]"]
if (location != "O") assert (url =~ IP) || (url =~ hostname)</scriptText></con:configuration></con:assertion><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="GetConnectionInfoByPatientDiscoveryService"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>NhincComponentConnectionManagerBindingSoap</con:interface><con:operation>GetConnectionInfoByServiceName</con:operation><con:request name="GetConnectionInfoByPatientDiscoveryService"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#ConnectionManagerEndpoint}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope" xmlns:urn="urn:gov:hhs:fha:nhinc:common:connectionmanagerinfo" xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
   <soapenv:Header/>
   <soapenv:Body>
      <urn:HomeCommunityWithServiceName>
         <urn:homeCommunity>
            <urn1:homeCommunityId>${#Project#HCID4}</urn1:homeCommunityId>
         </urn:homeCommunity>
         <urn:serviceName>PatientDiscovery</urn:serviceName>
      </urn:HomeCommunityWithServiceName>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="Schema Compliance"><con:configuration/></con:assertion><con:assertion type="SOAP Fault Assertion"/><con:assertion type="XPath Match" name="HCID Match"><con:configuration><path>declare namespace ns2='urn:gov:hhs:fha:nhinc:common:connectionmanagerinfo';
declare namespace ns3='urn:gov:hhs:fha:nhinc:common:nhinccommon';
//ns2:ConnectionInfo[1]/ns2:homeCommunity[1]/ns3:homeCommunityId[1]</path><content>${#Project#HCID4}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:assertion type="XPath Match" name="ServiceName Match"><con:configuration><path>declare namespace ns2='urn:gov:hhs:fha:nhinc:common:connectionmanagerinfo';
//ns2:ConnectionInfo[1]/ns2:serviceConnectionInfos[1]/ns2:serviceConnectionInfo[1]/ns2:serviceName[1]</path><content>PatientDiscovery</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion"><con:configuration><scriptText>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def holder = groovyUtils.getXmlHolder( messageExchange.responseContent )
holder.namespaces["ns1"] = "urn:gov:hhs:fha:nhinc:common:connectionmanagerinfo"
def location = context.findProperty('Location' );
def gatewayIP = context.findProperty( 'GatewayIP' );
def gatewayHostname = context.findProperty( 'GatewayHostName' );
def adapterIP = context.findProperty('AdapterIP' );
def adapterHostname = context.findProperty('AdapterHostName' );
if (location == "G") {
  IP = gatewayIP;
  hostname = gatewayHostname;
}
if (location == "A") {
  IP = adapterIP;
  hostname = adapterHostname;
} 

def url = holder["//ns1:ConnectionInfo[1]/ns1:serviceConnectionInfos[1]/ns1:serviceConnectionInfo[1]/ns1:url[1]"]
if (location != "O") assert (url =~ IP) || (url =~ hostname)</scriptText></con:configuration></con:assertion><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="GetConnectionInfoByDocRetrieveService"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>NhincComponentConnectionManagerBindingSoap</con:interface><con:operation>GetConnectionInfoByServiceName</con:operation><con:request name="GetConnectionInfoByDocRetrieveService"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#ConnectionManagerEndpoint}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope" xmlns:urn="urn:gov:hhs:fha:nhinc:common:connectionmanagerinfo" xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
   <soapenv:Header/>
   <soapenv:Body>
      <urn:HomeCommunityWithServiceName>
         <urn:homeCommunity>
            <urn1:homeCommunityId>${#Project#HCID4}</urn1:homeCommunityId>
         </urn:homeCommunity>
         <urn:serviceName>RetrieveDocuments</urn:serviceName>
      </urn:HomeCommunityWithServiceName>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="Schema Compliance"><con:configuration/></con:assertion><con:assertion type="SOAP Fault Assertion"/><con:assertion type="XPath Match" name="HCID Match"><con:configuration><path>declare namespace ns2='urn:gov:hhs:fha:nhinc:common:connectionmanagerinfo';
declare namespace ns3='urn:gov:hhs:fha:nhinc:common:nhinccommon';
//ns2:ConnectionInfo[1]/ns2:homeCommunity[1]/ns3:homeCommunityId[1]</path><content>${#Project#HCID4}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:assertion type="XPath Match" name="ServiceName Match"><con:configuration><path>declare namespace ns2='urn:gov:hhs:fha:nhinc:common:connectionmanagerinfo';
//ns2:ConnectionInfo[1]/ns2:serviceConnectionInfos[1]/ns2:serviceConnectionInfo[1]/ns2:serviceName[1]</path><content>RetrieveDocuments</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion"><con:configuration><scriptText>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def holder = groovyUtils.getXmlHolder( messageExchange.responseContent )
holder.namespaces["ns1"] = "urn:gov:hhs:fha:nhinc:common:connectionmanagerinfo"
def location = context.findProperty('Location' );
def gatewayIP = context.findProperty( 'GatewayIP' );
def gatewayHostname = context.findProperty( 'GatewayHostName' );
def adapterIP = context.findProperty('AdapterIP' );
def adapterHostname = context.findProperty('AdapterHostName' );
if (location == "G") {
  IP = gatewayIP;
  hostname = gatewayHostname;
}
if (location == "A") {
  IP = adapterIP;
  hostname = adapterHostname;
} 

def url = holder["//ns1:ConnectionInfo[1]/ns1:serviceConnectionInfos[1]/ns1:serviceConnectionInfo[1]/ns1:url[1]"]
if (location != "O") assert (url =~ IP) || (url =~ hostname)</scriptText></con:configuration></con:assertion><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:properties><con:property><con:name>Current Service ID</con:name><con:value>68</con:value></con:property><con:property><con:name>Service</con:name><con:value>nhincproxyauditquerysecured</con:value></con:property><con:property><con:name>Location</con:name><con:value>G</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="ValidateServicesfor6.6 TestCase" searchProperties="true" timeout="0" id="9bc61880-c330-4f26-80ca-35380693c005"><con:settings/><con:testStep type="request" name="GetConnectionInfoByDocQueryService"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>NhincComponentConnectionManagerBindingSoap</con:interface><con:operation>GetConnectionInfoByServiceName</con:operation><con:request name="GetConnectionInfoByDocQueryService"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#ConnectionManagerEndpoint}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope" xmlns:urn="urn:gov:hhs:fha:nhinc:common:connectionmanagerinfo" xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
   <soapenv:Header/>
   <soapenv:Body>
      <urn:HomeCommunityWithServiceName>
         <urn:homeCommunity>
            <urn1:homeCommunityId>${#Project#HCID6}</urn1:homeCommunityId>
         </urn:homeCommunity>
         <urn:serviceName>QueryForDocuments</urn:serviceName>
      </urn:HomeCommunityWithServiceName>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="Schema Compliance"><con:configuration/></con:assertion><con:assertion type="SOAP Fault Assertion"/><con:assertion type="XPath Match" name="HCID Match"><con:configuration><path>declare namespace ns2='urn:gov:hhs:fha:nhinc:common:connectionmanagerinfo';
declare namespace ns3='urn:gov:hhs:fha:nhinc:common:nhinccommon';
//ns2:ConnectionInfo[1]/ns2:homeCommunity[1]/ns3:homeCommunityId[1]</path><content>${#Project#HCID6}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:assertion type="XPath Match" name="ServiceName Match"><con:configuration><path>declare namespace ns2='urn:gov:hhs:fha:nhinc:common:connectionmanagerinfo';
//ns2:ConnectionInfo[1]/ns2:serviceConnectionInfos[1]/ns2:serviceConnectionInfo[1]/ns2:serviceName[1]</path><content>QueryForDocuments</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion"><con:configuration><scriptText>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def holder = groovyUtils.getXmlHolder( messageExchange.responseContent )
holder.namespaces["ns1"] = "urn:gov:hhs:fha:nhinc:common:connectionmanagerinfo"
def location = context.findProperty('Location' );
def gatewayIP = context.findProperty( 'GatewayIP' );
def gatewayHostname = context.findProperty( 'GatewayHostName' );
def adapterIP = context.findProperty('AdapterIP' );
def adapterHostname = context.findProperty('AdapterHostName' );
if (location == "G") {
  IP = gatewayIP;
  hostname = gatewayHostname;
}
if (location == "A") {
  IP = adapterIP;
  hostname = adapterHostname;
} 

def url = holder["//ns1:ConnectionInfo[1]/ns1:serviceConnectionInfos[1]/ns1:serviceConnectionInfo[1]/ns1:url[1]"]
if (location != "O") assert (url =~ IP) || (url =~ hostname)</scriptText></con:configuration></con:assertion><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="GetConnectionInfoByPatientDiscoveryService"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>NhincComponentConnectionManagerBindingSoap</con:interface><con:operation>GetConnectionInfoByServiceName</con:operation><con:request name="GetConnectionInfoByPatientDiscoveryService"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#ConnectionManagerEndpoint}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope" xmlns:urn="urn:gov:hhs:fha:nhinc:common:connectionmanagerinfo" xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
   <soapenv:Header/>
   <soapenv:Body>
      <urn:HomeCommunityWithServiceName>
         <urn:homeCommunity>
            <urn1:homeCommunityId>${#Project#HCID6}</urn1:homeCommunityId>
         </urn:homeCommunity>
         <urn:serviceName>PatientDiscovery</urn:serviceName>
      </urn:HomeCommunityWithServiceName>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="Schema Compliance"><con:configuration/></con:assertion><con:assertion type="SOAP Fault Assertion"/><con:assertion type="XPath Match" name="HCID Match"><con:configuration><path>declare namespace ns2='urn:gov:hhs:fha:nhinc:common:connectionmanagerinfo';
declare namespace ns3='urn:gov:hhs:fha:nhinc:common:nhinccommon';
//ns2:ConnectionInfo[1]/ns2:homeCommunity[1]/ns3:homeCommunityId[1]</path><content>${#Project#HCID6}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:assertion type="XPath Match" name="ServiceName Match"><con:configuration><path>declare namespace ns2='urn:gov:hhs:fha:nhinc:common:connectionmanagerinfo';
//ns2:ConnectionInfo[1]/ns2:serviceConnectionInfos[1]/ns2:serviceConnectionInfo[1]/ns2:serviceName[1]</path><content>PatientDiscovery</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion"><con:configuration><scriptText>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def holder = groovyUtils.getXmlHolder( messageExchange.responseContent )
holder.namespaces["ns1"] = "urn:gov:hhs:fha:nhinc:common:connectionmanagerinfo"
def location = context.findProperty('Location' );
def gatewayIP = context.findProperty( 'GatewayIP' );
def gatewayHostname = context.findProperty( 'GatewayHostName' );
def adapterIP = context.findProperty('AdapterIP' );
def adapterHostname = context.findProperty('AdapterHostName' );
if (location == "G") {
  IP = gatewayIP;
  hostname = gatewayHostname;
}
if (location == "A") {
  IP = adapterIP;
  hostname = adapterHostname;
} 

def url = holder["//ns1:ConnectionInfo[1]/ns1:serviceConnectionInfos[1]/ns1:serviceConnectionInfo[1]/ns1:url[1]"]
if (location != "O") assert (url =~ IP) || (url =~ hostname)</scriptText></con:configuration></con:assertion><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="GetConnectionInfoByDocRetrieveService"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>NhincComponentConnectionManagerBindingSoap</con:interface><con:operation>GetConnectionInfoByServiceName</con:operation><con:request name="GetConnectionInfoByDocRetrieveService"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#ConnectionManagerEndpoint}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope" xmlns:urn="urn:gov:hhs:fha:nhinc:common:connectionmanagerinfo" xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
   <soapenv:Header/>
   <soapenv:Body>
      <urn:HomeCommunityWithServiceName>
         <urn:homeCommunity>
            <urn1:homeCommunityId>${#Project#HCID6}</urn1:homeCommunityId>
         </urn:homeCommunity>
         <urn:serviceName>RetrieveDocuments</urn:serviceName>
      </urn:HomeCommunityWithServiceName>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="Schema Compliance"><con:configuration/></con:assertion><con:assertion type="SOAP Fault Assertion"/><con:assertion type="XPath Match" name="HCID Match"><con:configuration><path>declare namespace ns2='urn:gov:hhs:fha:nhinc:common:connectionmanagerinfo';
declare namespace ns3='urn:gov:hhs:fha:nhinc:common:nhinccommon';
//ns2:ConnectionInfo[1]/ns2:homeCommunity[1]/ns3:homeCommunityId[1]</path><content>${#Project#HCID6}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:assertion type="XPath Match" name="ServiceName Match"><con:configuration><path>declare namespace ns2='urn:gov:hhs:fha:nhinc:common:connectionmanagerinfo';
//ns2:ConnectionInfo[1]/ns2:serviceConnectionInfos[1]/ns2:serviceConnectionInfo[1]/ns2:serviceName[1]</path><content>RetrieveDocuments</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion"><con:configuration><scriptText>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def holder = groovyUtils.getXmlHolder( messageExchange.responseContent )
holder.namespaces["ns1"] = "urn:gov:hhs:fha:nhinc:common:connectionmanagerinfo"
def location = context.findProperty('Location' );
def gatewayIP = context.findProperty( 'GatewayIP' );
def gatewayHostname = context.findProperty( 'GatewayHostName' );
def adapterIP = context.findProperty('AdapterIP' );
def adapterHostname = context.findProperty('AdapterHostName' );
if (location == "G") {
  IP = gatewayIP;
  hostname = gatewayHostname;
}
if (location == "A") {
  IP = adapterIP;
  hostname = adapterHostname;
} 

def url = holder["//ns1:ConnectionInfo[1]/ns1:serviceConnectionInfos[1]/ns1:serviceConnectionInfo[1]/ns1:url[1]"]
if (location != "O") assert (url =~ IP) || (url =~ hostname)</scriptText></con:configuration></con:assertion><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:properties><con:property><con:name>Current Service ID</con:name><con:value>68</con:value></con:property><con:property><con:name>Service</con:name><con:value>nhincproxyauditquerysecured</con:value></con:property><con:property><con:name>Location</con:name><con:value>G</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="ValidateServicesfor7.7 TestCase" searchProperties="true" timeout="0" id="cfa285b9-81b1-44d2-bc8a-bc3cf3c9a267"><con:settings/><con:testStep type="request" name="GetConnectionInfoByDocQueryService"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>NhincComponentConnectionManagerBindingSoap</con:interface><con:operation>GetConnectionInfoByServiceName</con:operation><con:request name="GetConnectionInfoByDocQueryService"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#ConnectionManagerEndpoint}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope" xmlns:urn="urn:gov:hhs:fha:nhinc:common:connectionmanagerinfo" xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
   <soapenv:Header/>
   <soapenv:Body>
      <urn:HomeCommunityWithServiceName>
         <urn:homeCommunity>
            <urn1:homeCommunityId>${#Project#HCID7}</urn1:homeCommunityId>
         </urn:homeCommunity>
         <urn:serviceName>QueryForDocuments</urn:serviceName>
      </urn:HomeCommunityWithServiceName>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="Schema Compliance"><con:configuration/></con:assertion><con:assertion type="SOAP Fault Assertion"/><con:assertion type="XPath Match" name="HCID Match"><con:configuration><path>declare namespace ns2='urn:gov:hhs:fha:nhinc:common:connectionmanagerinfo';
declare namespace ns3='urn:gov:hhs:fha:nhinc:common:nhinccommon';
//ns2:ConnectionInfo[1]/ns2:homeCommunity[1]/ns3:homeCommunityId[1]</path><content>${#Project#HCID7}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:assertion type="XPath Match" name="ServiceName Match"><con:configuration><path>declare namespace ns2='urn:gov:hhs:fha:nhinc:common:connectionmanagerinfo';
//ns2:ConnectionInfo[1]/ns2:serviceConnectionInfos[1]/ns2:serviceConnectionInfo[1]/ns2:serviceName[1]</path><content>QueryForDocuments</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion"><con:configuration><scriptText>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def holder = groovyUtils.getXmlHolder( messageExchange.responseContent )
holder.namespaces["ns1"] = "urn:gov:hhs:fha:nhinc:common:connectionmanagerinfo"
def location = context.findProperty('Location' );
def gatewayIP = context.findProperty( 'GatewayIP' );
def gatewayHostname = context.findProperty( 'GatewayHostName' );
def adapterIP = context.findProperty('AdapterIP' );
def adapterHostname = context.findProperty('AdapterHostName' );
if (location == "G") {
  IP = gatewayIP;
  hostname = gatewayHostname;
}
if (location == "A") {
  IP = adapterIP;
  hostname = adapterHostname;
} 

def url = holder["//ns1:ConnectionInfo[1]/ns1:serviceConnectionInfos[1]/ns1:serviceConnectionInfo[1]/ns1:url[1]"]
if (location != "O") assert (url =~ IP) || (url =~ hostname)</scriptText></con:configuration></con:assertion><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="GetConnectionInfoByPatientDiscoveryService"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>NhincComponentConnectionManagerBindingSoap</con:interface><con:operation>GetConnectionInfoByServiceName</con:operation><con:request name="GetConnectionInfoByPatientDiscoveryService"><con:settings><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#ConnectionManagerEndpoint}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope" xmlns:urn="urn:gov:hhs:fha:nhinc:common:connectionmanagerinfo" xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
   <soapenv:Header/>
   <soapenv:Body>
      <urn:HomeCommunityWithServiceName>
         <urn:homeCommunity>
            <urn1:homeCommunityId>${#Project#HCID7}</urn1:homeCommunityId>
         </urn:homeCommunity>
         <urn:serviceName>PatientDiscovery</urn:serviceName>
      </urn:HomeCommunityWithServiceName>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="Schema Compliance"><con:configuration/></con:assertion><con:assertion type="SOAP Fault Assertion"/><con:assertion type="XPath Match" name="HCID Match"><con:configuration><path>declare namespace ns2='urn:gov:hhs:fha:nhinc:common:connectionmanagerinfo';
declare namespace ns3='urn:gov:hhs:fha:nhinc:common:nhinccommon';
//ns2:ConnectionInfo[1]/ns2:homeCommunity[1]/ns3:homeCommunityId[1]</path><content>${#Project#HCID7}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:assertion type="XPath Match" name="ServiceName Match"><con:configuration><path>declare namespace ns2='urn:gov:hhs:fha:nhinc:common:connectionmanagerinfo';
//ns2:ConnectionInfo[1]/ns2:serviceConnectionInfos[1]/ns2:serviceConnectionInfo[1]/ns2:serviceName[1]</path><content>PatientDiscovery</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion"><con:configuration><scriptText>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def holder = groovyUtils.getXmlHolder( messageExchange.responseContent )
holder.namespaces["ns1"] = "urn:gov:hhs:fha:nhinc:common:connectionmanagerinfo"
def location = context.findProperty('Location' );
def gatewayIP = context.findProperty( 'GatewayIP' );
def gatewayHostname = context.findProperty( 'GatewayHostName' );
def adapterIP = context.findProperty('AdapterIP' );
def adapterHostname = context.findProperty('AdapterHostName' );
if (location == "G") {
  IP = gatewayIP;
  hostname = gatewayHostname;
}
if (location == "A") {
  IP = adapterIP;
  hostname = adapterHostname;
} 

def url = holder["//ns1:ConnectionInfo[1]/ns1:serviceConnectionInfos[1]/ns1:serviceConnectionInfo[1]/ns1:url[1]"]
if (location != "O") assert (url =~ IP) || (url =~ hostname)</scriptText></con:configuration></con:assertion><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="GetConnectionInfoByDocRetrieveService"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>NhincComponentConnectionManagerBindingSoap</con:interface><con:operation>GetConnectionInfoByServiceName</con:operation><con:request name="GetConnectionInfoByDocRetrieveService"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#ConnectionManagerEndpoint}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope" xmlns:urn="urn:gov:hhs:fha:nhinc:common:connectionmanagerinfo" xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
   <soapenv:Header/>
   <soapenv:Body>
      <urn:HomeCommunityWithServiceName>
         <urn:homeCommunity>
            <urn1:homeCommunityId>${#Project#HCID7}</urn1:homeCommunityId>
         </urn:homeCommunity>
         <urn:serviceName>RetrieveDocuments</urn:serviceName>
      </urn:HomeCommunityWithServiceName>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="Schema Compliance"><con:configuration/></con:assertion><con:assertion type="SOAP Fault Assertion"/><con:assertion type="XPath Match" name="HCID Match"><con:configuration><path>declare namespace ns2='urn:gov:hhs:fha:nhinc:common:connectionmanagerinfo';
declare namespace ns3='urn:gov:hhs:fha:nhinc:common:nhinccommon';
//ns2:ConnectionInfo[1]/ns2:homeCommunity[1]/ns3:homeCommunityId[1]</path><content>${#Project#HCID7}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:assertion type="XPath Match" name="ServiceName Match"><con:configuration><path>declare namespace ns2='urn:gov:hhs:fha:nhinc:common:connectionmanagerinfo';
//ns2:ConnectionInfo[1]/ns2:serviceConnectionInfos[1]/ns2:serviceConnectionInfo[1]/ns2:serviceName[1]</path><content>RetrieveDocuments</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion"><con:configuration><scriptText>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def holder = groovyUtils.getXmlHolder( messageExchange.responseContent )
holder.namespaces["ns1"] = "urn:gov:hhs:fha:nhinc:common:connectionmanagerinfo"
def location = context.findProperty('Location' );
def gatewayIP = context.findProperty( 'GatewayIP' );
def gatewayHostname = context.findProperty( 'GatewayHostName' );
def adapterIP = context.findProperty('AdapterIP' );
def adapterHostname = context.findProperty('AdapterHostName' );
if (location == "G") {
  IP = gatewayIP;
  hostname = gatewayHostname;
}
if (location == "A") {
  IP = adapterIP;
  hostname = adapterHostname;
} 

def url = holder["//ns1:ConnectionInfo[1]/ns1:serviceConnectionInfos[1]/ns1:serviceConnectionInfo[1]/ns1:url[1]"]
if (location != "O") assert (url =~ IP) || (url =~ hostname)</scriptText></con:configuration></con:assertion><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:properties><con:property><con:name>Current Service ID</con:name><con:value>68</con:value></con:property><con:property><con:name>Service</con:name><con:value>nhincproxyauditquerysecured</con:value></con:property><con:property><con:name>Location</con:name><con:value>G</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:requirements/><con:properties><con:property><con:name>Service46</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Service45</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Service44</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Service43</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Service42</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Service41</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Service40</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>ConnectionManagerEndpoint</con:name><con:value>http://localhost:8080/CONNECTCommon/NhincComponentConnectionManager</con:value></con:property><con:property><con:name>AdapterIP</con:name><con:value>localhost</con:value></con:property><con:property><con:name>Service39</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Service38</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Service37</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Service36</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Service35</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Service34</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Service33</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Service9</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Service32</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Service8</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Service31</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Service7</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Service30</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Service6</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Service5</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Service4</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Service3</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Service2</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">G|PatientDiscovery</con:value></con:property><con:property><con:name>Service1</con:name><con:value>G|PatientDiscovery</con:value></con:property><con:property><con:name>Service29</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Service28</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Service27</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Service26</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Service25</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Service24</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Service23</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Service22</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Service21</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Service20</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Service19</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Service18</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Service17</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>ServiceCount</con:name><con:value>2</con:value></con:property><con:property><con:name>Service16</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Service15</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Service14</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Service13</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Service12</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Service11</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Service10</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>LogResponseMessage</con:name><con:value>true</con:value></con:property><con:property><con:name>HCID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>GatewayIP</con:name><con:value>localhost</con:value></con:property><con:property><con:name>AdapterHostName</con:name><con:value>localhost</con:value></con:property><con:property><con:name>Service68</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Service67</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Service66</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Service65</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Service64</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Service63</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Service62</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Service61</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Service60</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Service59</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Service58</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Service57</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Service56</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Service55</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Service54</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Service53</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>GatewayHostName</con:name><con:value>localhost</con:value></con:property><con:property><con:name>Service52</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Service51</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Service50</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>HCID7</con:name><con:value>7.7</con:value></con:property><con:property><con:name>HCID6</con:name><con:value>6.6</con:value></con:property><con:property><con:name>HCID4</con:name><con:value>4.4</con:value></con:property></con:properties><con:afterLoadScript>def propertiesFile = new File(new File(project.path).parent, 'ValidateServicesUDDI-soapui-project.properties')
if (propertiesFile.exists()) {
	def props = new Properties()
	props.load(new FileReader(propertiesFile))
	props.each { key, value ->
	    project.setPropertyValue(key, value)
	}
}

com.eviware.soapui.impl.wsdl.testcase.WsdlTestRunContext.metaClass.findProperty = { propertyName ->
    return delegate.getProperty(propertyName) ?:
                delegate.testCase.getPropertyValue(propertyName) ?:
                delegate.testCase.testSuite.getPropertyValue(propertyName) ?:
                delegate.testCase.testSuite.project.getPropertyValue(propertyName)
}</con:afterLoadScript><con:wssContainer/><con:databaseConnectionContainer/><con:reporting><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:parameters/></con:reporting></con:soapui-project>
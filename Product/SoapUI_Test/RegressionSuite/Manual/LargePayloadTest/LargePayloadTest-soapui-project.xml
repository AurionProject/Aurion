<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project activeEnvironment="Default" name="LargePayloadTest" resourceRoot="${projectDir}" soapui-version="4.5.1" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:interface xsi:type="con:WsdlInterface" wsaVersion="NONE" name="EntityXDR_Binding" type="wsdl" bindingName="{urn:gov:hhs:fha:nhinc:nhincentityxdr}EntityXDR_Binding" soapVersion="1_2" anonymous="optional" definition="../../target/wsdl/EntityXDRRequest.wsdl" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
		<con:settings/>

		<con:definitionCache/><con:endpoints>
			<con:endpoint>http://localhost:${HttpDefaultPort}/EntityService/EntityXDRRequest</con:endpoint>
			<con:endpoint>http://localhost:8080/CONNECTAdapter/EntityProxyService/EntityXDRRequest</con:endpoint>
			<con:endpoint>${#TestSuite#Endpoint-EntityXDRRequest}</con:endpoint>
			<con:endpoint>http://localhost:${HttpDefaultPort}/EntityService/EntityXDRAsyncRequest</con:endpoint>
		</con:endpoints>
		<con:operation action="tns:ProvideAndRegisterDocumentSet-bAsyncRequest" anonymous="optional" bindingOperationName="ProvideAndRegisterDocumentSet-bAsyncRequest" inputName="" isOneWay="false" name="ProvideAndRegisterDocumentSet-bAsyncRequest" receivesAttachments="false" sendsAttachments="false" type="Request-Response">
			<con:settings/>

		</con:operation>
	</con:interface><con:interface anonymous="optional" bindingName="{urn:gov:hhs:fha:nhinc:entityadmindistribution}AdministrativeDistribution_Binding_Soap12" definition="../../target/wsdl/EntityAdminDist_g1.wsdl" name="AdministrativeDistribution_Binding_Soap12_g1" soapVersion="1_2" type="wsdl" wsaVersion="NONE" xsi:type="con:WsdlInterface" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
		<con:settings/>
		<con:definitionCache/><con:endpoints>
			<con:endpoint>http://localhost:${HttpDefaultPort}/Gateway/AdminDistribution/2_0/AdministrativeDistribution_Service</con:endpoint>
		</con:endpoints>
		<con:operation action="urn:oasis:names:tc:emergency:EDXL:DE:1.0:SendAlertMessage" bindingOperationName="SendAlertMessage" inputName="" isOneWay="false" name="SendAlertMessage" sendsAttachments="false" type="One-Way">
			<con:settings/>
		</con:operation>
	</con:interface><con:interface anonymous="optional" bindingName="{urn:gov:hhs:fha:nhinc:entitydocretrieve}EntityDocRetrieveBindingSoap" definition="../../target/wsdl/EntityDocRetrieve.wsdl" name="EntityDocRetrieveBindingSoap" soapVersion="1_2" type="wsdl" wsaVersion="NONE" xsi:type="con:WsdlInterface" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
		<con:settings/>

		<con:definitionCache/><con:endpoints>
			<con:endpoint>http://localhost:${HttpDefaultPort}/NhinConnect/EntityDocRetrieve</con:endpoint>
		</con:endpoints>
		<con:operation action="urn:RespondingGateway_CrossGatewayRetrieve" anonymous="optional" bindingOperationName="RespondingGateway_CrossGatewayRetrieve" inputName="RespondingGateway_CrossGatewayRetrieveRequest" isOneWay="false" name="RespondingGateway_CrossGatewayRetrieve" outputName="RespondingGateway_CrossGatewayRetrieveResponse" receivesAttachments="false" sendsAttachments="false" type="Request-Response">
			<con:settings/>
		</con:operation>
	</con:interface><con:testSuite name="LargePayload"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Create Large File" searchProperties="true" id="a200ff7f-048e-47c1-a785-9f9fa291851b"><con:settings/><con:testStep type="manualTestStep" name="Change domain.xml" disabled="true"><con:description>Make sure cxf setting in domain.xml is set for large payload</con:description><con:settings/><con:config xsi:type="con:ManualTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:expectedResult>On you domain.xml of your glassfish server, add the following java option
-Dorg.apache.cxf.io.CachedOutputStream.OutputDirectory=&lt;directory>.
This is the directory where CXF streams a file temporarily. 
It is recommended that this directory be different from PayloadSaveDirectory.
Restart the server. </con:expectedResult></con:config></con:testStep><con:testStep type="groovy" name="Create File"><con:settings/><con:config><script>def filePath = context.findProperty('SenderPath');
def fileName = context.findProperty('FileName');
def size = context.findProperty('PayloadSize');

new File("/" + filePath + File.separator + fileName).newOutputStream().withWriter("UTF-8") { writer ->
    size.toInteger().times { writer.write "Large payload tst data.\n" + it }
}</script></con:config></con:testStep><con:testStep type="groovy" name="Encode File Name"><con:settings/><con:config><script>def encodePath = "file:///" + context.findProperty('SenderPath') +
	"/" + context.findProperty('FileName');
	
def encoded = encodePath.bytes.encodeBase64().toString();

testRunner.testCase.testSuite.setPropertyValue('EncodedPath', encoded);</script></con:config></con:testStep><con:testStep type="groovy" name="Create MD5 Encoder"><con:settings/><con:config><script>import java.security.MessageDigest;

def fileName = "/" + context.findProperty('SenderPath') + File.separator +
	context.findProperty('FileName');

MessageDigest digest = MessageDigest.getInstance("MD5");

new File(fileName).withInputStream(){is->
	byte[] buffer = new byte[8192]
	int read = 0
		while( (read = is.read(buffer)) > 0) {
			digest.update(buffer, 0, read);
		}
}

byte[] md5sum = digest.digest()
BigInteger bigInt = new BigInteger(1, md5sum)

testRunner.testCase.testSuite.setPropertyValue('SendMD5', bigInt.toString(16));</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Create Multiple Large Files" searchProperties="true" id="8d488035-f2f2-4c6a-aab7-94bab82a9cd5"><con:settings/><con:testStep type="groovy" name="Create Files"><con:settings/><con:config><script>def filePath = context.findProperty('SenderPath');
def fileName1 = context.findProperty('FileNameMulti1');
def fileName2 = context.findProperty('FileNameMulti2');
def size = context.findProperty('MultiPayloadSize');

new File(filePath + File.separator + fileName1).newOutputStream().withWriter("UTF-8") { writer ->
    size.toInteger().times { writer.write "Large payload tst data.\n" + it }
}

new File(filePath + File.separator + fileName2).newOutputStream().withWriter("UTF-8") { writer ->
    size.toInteger().times { writer.write "Large payload tst data.\n" + it }
}</script></con:config></con:testStep><con:testStep type="groovy" name="Encode File Names"><con:settings/><con:config><script>def encodePath = "file:///" + context.findProperty('SenderPath') +
	"/" + context.findProperty('FileNameMulti1');


def encoded = encodePath.bytes.encodeBase64().toString();

testRunner.testCase.testSuite.setPropertyValue('EncodedPathM1', encoded);

def encodePath2 = "file:///"  + context.findProperty('SenderPath') + "/" +
	context.findProperty('FileNameMulti2');


def encoded2 = encodePath2.bytes.encodeBase64().toString();

testRunner.testCase.testSuite.setPropertyValue('EncodedPathM2', encoded2);</script></con:config></con:testStep><con:testStep type="groovy" name="Create MD5 Encoder File 1"><con:settings/><con:config><script>import java.security.MessageDigest;

def fileName = context.findProperty('SenderPath') + File.separator +
	context.findProperty('FileNameMulti1');

MessageDigest digest = MessageDigest.getInstance("MD5");

new File(fileName).withInputStream(){is->
	byte[] buffer = new byte[8192]
	int read = 0
		while( (read = is.read(buffer)) > 0) {
			digest.update(buffer, 0, read);
		}
}

byte[] md5sum = digest.digest()
BigInteger bigInt = new BigInteger(1, md5sum)

testRunner.testCase.testSuite.setPropertyValue('SendMD5_M1', bigInt.toString(16));</script></con:config></con:testStep><con:testStep type="groovy" name="Create MD5 Encoder File 2"><con:settings/><con:config><script>import java.security.MessageDigest;

def fileName = context.findProperty('SenderPath') + File.separator +
	context.findProperty('FileNameMulti2');

MessageDigest digest = MessageDigest.getInstance("MD5");

new File(fileName).withInputStream(){is->
	byte[] buffer = new byte[8192]
	int read = 0
		while( (read = is.read(buffer)) > 0) {
			digest.update(buffer, 0, read);
		}
}

byte[] md5sum = digest.digest()
BigInteger bigInt = new BigInteger(1, md5sum)

testRunner.testCase.testSuite.setPropertyValue('SendMD5_M2', bigInt.toString(16));</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Document Submission Message Proxy" searchProperties="true" id="124abbc3-ac39-445f-808a-7a312cc3d369">
	<con:settings/>
	<con:testStep type="groovy" name="Update gateway.properties"><con:settings/><con:config><script>def saveDir = context.findProperty('ReceiverPath');

nhinc.FileUtils.updateProperty(context.findProperty('GatewayPropDir'), "gateway.properties", "ParsePayloadAsFileURIOutbound", "true", log);
nhinc.FileUtils.updateProperty(context.findProperty('GatewayPropDir'), "gateway.properties", "PayloadSaveDirectory", "${saveDir}", log);
nhinc.FileUtils.updateProperty(context.findProperty('GatewayPropDir'), "gateway.properties", "SavePayloadToFileInbound", "true", log);
</script></con:config></con:testStep>
<con:testStep type="groovy" name="Check MD5 of Received Doc"><con:settings/><con:config><script>import java.security.MessageDigest;
import java.util.Vector;

def directoryName = context.findProperty('ReceiverPath');
def fileSubStr = "nhin";
def filePattern = ~/${fileSubStr}/
def directory = new File(directoryName)
def receivedFile = "";
Vector files = new Vector();

def findFilenameClosure =
{
	if (filePattern.matcher(it.name).find())
	{
		log.info "\t${it.name} (size ${it.size()})"
		files.add(it.name)
	}
}

directory.eachFile(findFilenameClosure)

if(files.size() > 0){
	receivedFile = files.get(0);
}else {
	log.error "No files found in: ${directoryName}"
	assert 1 == 2;
}


testRunner.testCase.testSuite.setPropertyValue('ReceivedFileName', receivedFile);
def fileName = directoryName + "/" + receivedFile;

MessageDigest digest = MessageDigest.getInstance("MD5");

new File(fileName).withInputStream(){is->
	byte[] buffer = new byte[8192]
	int read = 0
		while( (read = is.read(buffer)) > 0) {
			digest.update(buffer, 0, read);
		}
}

byte[] md5sum = digest.digest()
BigInteger bigInt = new BigInteger(1, md5sum)

def receiveMD5 = bigInt.toString(16)
def sentMD5 = context.findProperty('SendMD5')

log.info "SENT: ${sentMD5}, RECEIVED: ${receiveMD5}"

assert ( sentMD5 == receiveMD5 );</script></con:config></con:testStep><con:testStep type="groovy" name="Delete Received File"><con:settings/><con:config><script>def fileName = context.findProperty('ReceiverPath') + File.separator + context.findProperty('ReceivedFileName');
new File(fileName).delete();</script></con:config></con:testStep><con:setupScript>nhinc.FileUtils.backupConfiguration(context.findProperty('GatewayPropDir'), log);
nhinc.FileUtils.setG1ConnectionInfo(context.expand(context.testCase.testSuite.project.resourceRoot)+'/../', context.findProperty('GatewayPropDir'), log);</con:setupScript>
<con:tearDownScript>nhinc.FileUtils.restoreConfiguration(context.findProperty('GatewayPropDir'), log);
</con:tearDownScript>
<con:properties>
	<con:property>
		<con:name>startDate</con:name>
		<con:value>2012-10-15T18:43:58Z</con:value>
	</con:property>
	<con:property>
		<con:name>endDate</con:name>
		<con:value>2012-10-15T18:53:58Z</con:value>
	</con:property>
	<con:property>
		<con:name>sigDate</con:name>
		<con:value>10/15/2012 18:43:58</con:value>
	</con:property>
	<con:property>
		<con:name>expireDate</con:name>
		<con:value>2012-11-14T00:00:00Z</con:value>
	</con:property>
</con:properties>
</con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Document Submission Deferred Req Message Proxy" searchProperties="true" id="81f86c6f-3469-4187-80f5-50fca1d24525">
			<con:settings/>
			<con:testStep type="groovy" name="Update gateway.properties"><con:settings/><con:config><script>def saveDir = context.findProperty('ReceiverPath');

nhinc.FileUtils.updateProperty(context.findProperty('GatewayPropDir'), "gateway.properties", "ParsePayloadAsFileURIOutbound", "true", log);
nhinc.FileUtils.updateProperty(context.findProperty('GatewayPropDir'), "gateway.properties", "PayloadSaveDirectory", "${saveDir}", log);
nhinc.FileUtils.updateProperty(context.findProperty('GatewayPropDir'), "gateway.properties", "SavePayloadToFileInbound", "true", log);
</script></con:config></con:testStep>
	<con:testStep type="groovy" name="Check MD5 of Received Doc"><con:settings/><con:config><script>import java.security.MessageDigest;
import java.util.Vector;

def directoryName = context.findProperty('ReceiverPath');
def fileSubStr = "nhin";
def filePattern = ~/${fileSubStr}/
def directory = new File(directoryName)
def receivedFile = "";
Vector files = new Vector();

def findFilenameClosure =
{
	if (filePattern.matcher(it.name).find())
	{
		log.info "\t${it.name} (size ${it.size()})"
		files.add(it.name)
	}
}

directory.eachFile(findFilenameClosure)

if(files.size() > 0){
	receivedFile = files.get(0);
}else {
	log.error "No files found in: ${directoryName}"
	assert(1 == 2);
}


testRunner.testCase.testSuite.setPropertyValue('ReceivedFileName', receivedFile);
def fileName = directoryName + "/" + receivedFile;

MessageDigest digest = MessageDigest.getInstance("MD5");

new File(fileName).withInputStream(){is->
	byte[] buffer = new byte[8192]
	int read = 0
		while( (read = is.read(buffer)) > 0) {
			digest.update(buffer, 0, read);
		}
}

byte[] md5sum = digest.digest()
BigInteger bigInt = new BigInteger(1, md5sum)

def receiveMD5 = bigInt.toString(16)
def sentMD5 = context.findProperty('SendMD5')

log.info "SENT: ${sentMD5}, RECEIVED: ${receiveMD5}"

assert ( sentMD5 == receiveMD5 );</script></con:config></con:testStep><con:testStep type="groovy" name="Delete Received File"><con:settings/><con:config><script>def fileName = context.findProperty('ReceiverPath') + File.separator + context.findProperty('ReceivedFileName');
new File(fileName).delete();</script></con:config></con:testStep><con:setupScript>nhinc.FileUtils.backupConfiguration(context.findProperty('GatewayPropDir'), log);
nhinc.FileUtils.setG1ConnectionInfo(context.expand(context.testCase.testSuite.project.resourceRoot)+'/../', context.findProperty('GatewayPropDir'), log);
</con:setupScript>
<con:tearDownScript>nhinc.FileUtils.restoreConfiguration(context.findProperty('GatewayPropDir'), log);
</con:tearDownScript>
<con:properties>
	<con:property>
		<con:name>startDate</con:name>
		<con:value>2012-10-15T18:43:48Z</con:value>
	</con:property>
	<con:property>
		<con:name>endDate</con:name>
		<con:value>2012-10-15T18:53:48Z</con:value>
	</con:property>
	<con:property>
		<con:name>sigDate</con:name>
		<con:value>10/15/2012 18:43:48</con:value>
	</con:property>
	<con:property>
		<con:name>expireDate</con:name>
		<con:value>2012-11-14T00:00:00Z</con:value>
	</con:property>
</con:properties>
<con:reportParameters/>
</con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Admin Distribution" searchProperties="true" id="7dc4a684-1638-40db-b8e9-a1113ec93a7c">
	<con:settings/>
	<con:testStep type="groovy" name="Update gateway.properties"><con:settings/><con:config><script>def saveDir = context.findProperty('ReceiverPath');

nhinc.FileUtils.updateProperty(context.findProperty('GatewayPropDir'), "gateway.properties", "ParsePayloadAsFileURIOutbound", "true", log);
nhinc.FileUtils.updateProperty(context.findProperty('GatewayPropDir'), "gateway.properties", "PayloadSaveDirectory", "${saveDir}", log);
nhinc.FileUtils.updateProperty(context.findProperty('GatewayPropDir'), "gateway.properties", "SavePayloadToFileInbound", "true", log);
</script></con:config></con:testStep>

<con:testStep name="Admin Distribution" type="request">
		<con:settings/>
		<con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
			<con:interface>AdministrativeDistribution_Binding_Soap12_g1</con:interface>
			<con:operation>SendAlertMessage</con:operation>
			<con:request name="Admin Distribution">
				<con:settings>
					<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
		</con:settings>
		<con:encoding>UTF-8</con:encoding>
		<con:endpoint>${#Project#Endpoint-EntityAdminDist}</con:endpoint>
		<con:request><![CDATA[
			<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:urn="urn:gov:hhs:fha:nhinc:common:nhinccommonentity" xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon" xmlns:urn2="urn:oasis:names:tc:emergency:EDXL:DE:1.0">
   <soap:Header/>
   <soap:Body testSuite="Entity_g1" testCase="Admin Distribution">
      <urn:RespondingGateway_SendAlertMessage>
         <urn:assertion>
            <urn1:address>
               <urn1:addressType>
                  <urn1:code>AddrCode</urn1:code>
                  <urn1:codeSystem>AddrCodeSyst</urn1:codeSystem>
                  <urn1:codeSystemName>AddrCodeSystName</urn1:codeSystemName>
                  <urn1:codeSystemVersion>1.0</urn1:codeSystemVersion>
                  <urn1:displayName>AddrCode</urn1:displayName>
                  <urn1:originalText>AddrCode</urn1:originalText>
               </urn1:addressType>
               <urn1:city>AddrCity</urn1:city>
               <urn1:country>AddrCountry</urn1:country>
               <urn1:state>AddrState</urn1:state>
               <urn1:streetAddress>AddrStreet</urn1:streetAddress>
               <urn1:zipCode>AddrZip</urn1:zipCode>
            </urn1:address>
            <urn1:dateOfBirth>06/04/1959 05:21:00</urn1:dateOfBirth>
            <urn1:explanationNonClaimantSignature>Electronic</urn1:explanationNonClaimantSignature>
            <urn1:haveSecondWitnessSignature>false</urn1:haveSecondWitnessSignature>
            <urn1:haveSignature>false</urn1:haveSignature>
            <urn1:haveWitnessSignature>false</urn1:haveWitnessSignature>
            <urn1:homeCommunity>
               <urn1:description>${#Project#LocalHCDescription}</urn1:description>
               <urn1:homeCommunityId>${#Project#LocalHCID}</urn1:homeCommunityId>
               <urn1:name>${#Project#LocalHCDescription}</urn1:name>
            </urn1:homeCommunity>
            <urn1:personName>
               <urn1:familyName>Smith</urn1:familyName>
               <urn1:givenName>Sandy</urn1:givenName>
               <urn1:nameType>
                  <urn1:code>nameCode</urn1:code>
                  <urn1:codeSystem>nameCodeSyst</urn1:codeSystem>
                  <urn1:codeSystemName>nameCodeSystName</urn1:codeSystemName>
                  <urn1:codeSystemVersion>1.0</urn1:codeSystemVersion>
                  <urn1:displayName>nameCode</urn1:displayName>
                  <urn1:originalText>nameCode</urn1:originalText>
               </urn1:nameType>
               <urn1:secondNameOrInitials>S</urn1:secondNameOrInitials>
               <urn1:fullName>Sandy S. Smith</urn1:fullName>
            </urn1:personName>
            <urn1:phoneNumber>
               <urn1:areaCode>321</urn1:areaCode>
               <urn1:countryCode>1</urn1:countryCode>
               <urn1:extension>5436</urn1:extension>
               <urn1:localNumber>253-6849</urn1:localNumber>
               <urn1:phoneNumberType>
                  <urn1:code>phoneCode</urn1:code>
                  <urn1:codeSystem>phoneCodeSyst</urn1:codeSystem>
                  <urn1:codeSystemName>phoneCodeSystName</urn1:codeSystemName>
                  <urn1:codeSystemVersion>1.0</urn1:codeSystemVersion>
                  <urn1:displayName>phoneCode</urn1:displayName>
                  <urn1:originalText>phoneCode</urn1:originalText>
               </urn1:phoneNumberType>
            </urn1:phoneNumber>
            <urn1:secondWitnessAddress>
               <urn1:addressType>
                  <urn1:code>AddrCode</urn1:code>
                  <urn1:codeSystem>AddrCodeSyst</urn1:codeSystem>
                  <urn1:codeSystemName>AddrCodeSystName</urn1:codeSystemName>
                  <urn1:codeSystemVersion>1.0</urn1:codeSystemVersion>
                  <urn1:displayName>AddrCode</urn1:displayName>
                  <urn1:originalText>AddrCode</urn1:originalText>
               </urn1:addressType>
               <urn1:city>Addr2City</urn1:city>
               <urn1:country>Addr2Country</urn1:country>
               <urn1:state>Addr2State</urn1:state>
               <urn1:streetAddress>Addr2Street</urn1:streetAddress>
               <urn1:zipCode>Addr2Zip</urn1:zipCode>
            </urn1:secondWitnessAddress>
            <urn1:secondWitnessName>
               <urn1:familyName>Smith</urn1:familyName>
               <urn1:givenName>Sammy</urn1:givenName>
               <urn1:nameType>
                  <urn1:code>nameCode</urn1:code>
                  <urn1:codeSystem>nameCodeSyst</urn1:codeSystem>
                  <urn1:codeSystemName>nameCodeSystName</urn1:codeSystemName>
                  <urn1:codeSystemVersion>1.0</urn1:codeSystemVersion>
                  <urn1:displayName>nameCode</urn1:displayName>
                  <urn1:originalText>nameCode</urn1:originalText>
               </urn1:nameType>
               <urn1:secondNameOrInitials>s</urn1:secondNameOrInitials>
               <urn1:fullName>Sammy S. Smith</urn1:fullName>
            </urn1:secondWitnessName>
            <urn1:secondWitnessPhone>
               <urn1:areaCode>321</urn1:areaCode>
               <urn1:countryCode>1</urn1:countryCode>
               <urn1:extension>5424</urn1:extension>
               <urn1:localNumber>542-6823</urn1:localNumber>
               <urn1:phoneNumberType>
                  <urn1:code>phoneCode</urn1:code>
                  <urn1:codeSystem>phoneCodeSyst</urn1:codeSystem>
                  <urn1:codeSystemName>phoneCodeSystName</urn1:codeSystemName>
                  <urn1:codeSystemVersion>1.0</urn1:codeSystemVersion>
                  <urn1:displayName>phoneCode</urn1:displayName>
                  <urn1:originalText>phoneCode</urn1:originalText>
               </urn1:phoneNumberType>
            </urn1:secondWitnessPhone>
            <urn1:SSN>253987546</urn1:SSN>
            <!--1 or more repetitions:-->
            <urn1:uniquePatientId>500000000^^^&amp;1.1&amp;ISO</urn1:uniquePatientId>
            <urn1:witnessAddress>
               <urn1:addressType>
                  <urn1:code>addrCode</urn1:code>
                  <urn1:codeSystem>addrCodeSyst</urn1:codeSystem>
                  <urn1:codeSystemName>addrCodeSystName</urn1:codeSystemName>
                  <urn1:codeSystemVersion>1.0</urn1:codeSystemVersion>
                  <urn1:displayName>addrCode</urn1:displayName>
                  <urn1:originalText>addrCode</urn1:originalText>
               </urn1:addressType>
               <urn1:city>Burnell</urn1:city>
               <urn1:country>USA</urn1:country>
               <urn1:state>FL</urn1:state>
               <urn1:streetAddress>825 North</urn1:streetAddress>
               <urn1:zipCode>32184</urn1:zipCode>
            </urn1:witnessAddress>
            <urn1:witnessName>
               <urn1:familyName>Smith</urn1:familyName>
               <urn1:givenName>Scott</urn1:givenName>
               <urn1:nameType>
                  <urn1:code>nameCode</urn1:code>
                  <urn1:codeSystem>nameCodeSyst</urn1:codeSystem>
                  <urn1:codeSystemName>nameCodeSystName</urn1:codeSystemName>
                  <urn1:codeSystemVersion>1.0</urn1:codeSystemVersion>
                  <urn1:displayName>nameCode</urn1:displayName>
                  <urn1:originalText>nameCode</urn1:originalText>
               </urn1:nameType>
               <urn1:secondNameOrInitials>S.</urn1:secondNameOrInitials>
               <urn1:fullName>Scott S. Smith</urn1:fullName>
            </urn1:witnessName>
            <urn1:witnessPhone>
               <urn1:areaCode>321</urn1:areaCode>
               <urn1:countryCode>1</urn1:countryCode>
               <urn1:extension>8432</urn1:extension>
               <urn1:localNumber>985-2239</urn1:localNumber>
               <urn1:phoneNumberType>
                  <urn1:code>phoneCode</urn1:code>
                  <urn1:codeSystem>phoneCodeSyst</urn1:codeSystem>
                  <urn1:codeSystemName>phoneCodeSystName</urn1:codeSystemName>
                  <urn1:codeSystemVersion>1.0</urn1:codeSystemVersion>
                  <urn1:displayName>phoneCode</urn1:displayName>
                  <urn1:originalText>phoneCode</urn1:originalText>
               </urn1:phoneNumberType>
            </urn1:witnessPhone>
            <urn1:userInfo>
               <urn1:personName>
                  <urn1:familyName>Skagerberg</urn1:familyName>
                  <urn1:givenName>Karl</urn1:givenName>
                  <urn1:nameType>
                     <urn1:code>nameCode</urn1:code>
                     <urn1:codeSystem>nameCodeSyst</urn1:codeSystem>
                     <urn1:codeSystemName>nameCodeSystName</urn1:codeSystemName>
                     <urn1:codeSystemVersion>1.0</urn1:codeSystemVersion>
                     <urn1:displayName>nameCode</urn1:displayName>
                     <urn1:originalText>nameCode</urn1:originalText>
                  </urn1:nameType>
                  <urn1:secondNameOrInitials>S</urn1:secondNameOrInitials>
                  <urn1:fullName>Kasrl S. Skagerberg</urn1:fullName>
               </urn1:personName>
               <urn1:userName>${#TestCase#UserId}</urn1:userName>
               <urn1:org>
                  <urn1:description>${#Project#LocalHCDescription}</urn1:description>
                  <urn1:homeCommunityId>${#Project#LocalHCID}</urn1:homeCommunityId>
                  <urn1:name>${#Project#LocalHCDescription}</urn1:name>
               </urn1:org>
               <urn1:roleCoded>
                  <urn1:code>80584001</urn1:code>
                  <urn1:codeSystem>2.16.840.1.113883.6.96</urn1:codeSystem>
                  <urn1:codeSystemName>SNOMED_CT</urn1:codeSystemName>
                  <urn1:codeSystemVersion>1.0</urn1:codeSystemVersion>
                  <urn1:displayName>Psychiatrist</urn1:displayName>
                  <urn1:originalText>Psychiatrist</urn1:originalText>
               </urn1:roleCoded>
            </urn1:userInfo>
            <urn1:authorized>true</urn1:authorized>
            <urn1:purposeOfDisclosureCoded>
               <urn1:code>PSYCHOTHERAPY</urn1:code>
               <urn1:codeSystem>2.16.840.1.113883.3.18.7.1</urn1:codeSystem>
               <urn1:codeSystemName>nhin-purpose</urn1:codeSystemName>
               <urn1:codeSystemVersion>1.0</urn1:codeSystemVersion>
               <urn1:displayName>Use or disclosure of Psychotherapy Notes</urn1:displayName>
               <urn1:originalText>Psychotherapy Notes</urn1:originalText>
            </urn1:purposeOfDisclosureCoded>
            <urn1:samlAuthnStatement>
               <urn1:authInstant>2009-09-01T13:00:00.000Z</urn1:authInstant>
               <urn1:sessionIndex>mySessionIndex</urn1:sessionIndex>
               <urn1:authContextClassRef>myContextClassRef</urn1:authContextClassRef>
               <urn1:subjectLocalityAddress>mySubjectLocalityAddress</urn1:subjectLocalityAddress>
               <urn1:subjectLocalityDNSName>mySubjectLocalityDns</urn1:subjectLocalityDNSName>
            </urn1:samlAuthnStatement>
            <urn1:samlAuthzDecisionStatement>
               <urn1:decision>Permit</urn1:decision>
               <urn1:resource>myAuthzDecisionStatementResource</urn1:resource>
               <urn1:action>myAuthzDecisionStatementAction</urn1:action>
               <urn1:evidence>
                  <urn1:assertion>
                     <urn1:id>AuthzDecisionStatementEvidenceAssertionId</urn1:id>
                     <urn1:issueInstant>2009-09-02T14:00:00.000Z</urn1:issueInstant>
                     <urn1:version>2.0</urn1:version>
                     <urn1:issuer>CN=Mr Saml User,OU=SU,O=Mr SAML Org,L=Chantilly,ST=VA,C=US</urn1:issuer>
                     <urn1:issuerFormat>urn:oasis:names:tc:SAML:1.1:nameid-format:X509SubjectName</urn1:issuerFormat>
                     <urn1:conditions>
                        <urn1:notBefore>2009-04-16T13:10:39.093Z</urn1:notBefore>
                        <urn1:notOnOrAfter>2009-12-31T12:00:00.000Z</urn1:notOnOrAfter>
                     </urn1:conditions>
                     <urn1:accessConsentPolicy>urn:oid:1.2.3.4</urn1:accessConsentPolicy>
                     <urn1:instanceAccessConsentPolicy>urn:oid:1.2.3.4.123456789</urn1:instanceAccessConsentPolicy>
                  </urn1:assertion>
               </urn1:evidence>
            </urn1:samlAuthzDecisionStatement>
            <urn1:samlSignature>
               <!--Optional:-->
               <urn1:keyInfo>
                  <!--Optional:-->
                  <urn1:rsaKeyValueModulus>cid:243113487404</urn1:rsaKeyValueModulus>
                  <!--Optional:-->
                  <urn1:rsaKeyValueExponent>cid:159355901562</urn1:rsaKeyValueExponent>
               </urn1:keyInfo>
               <!--Optional:-->
               <urn1:signatureValue>cid:383675305350</urn1:signatureValue>
            </urn1:samlSignature>
            </urn:assertion>
         <!--Optional:-->
         <urn:nhinTargetCommunities>
            <!--1 or more repetitions:-->
            <urn1:nhinTargetCommunity>
               <urn1:homeCommunity>
                  <urn1:description>${#Project#RemoteHCDescription}</urn1:description>
                  <urn1:homeCommunityId>${#Project#RemoteHCID}</urn1:homeCommunityId>
                  <urn1:name>${#Project#RemoteHCDescription}</urn1:name>
               </urn1:homeCommunity>
               <urn1:list>?</urn1:list>
               <urn1:region>?</urn1:region>
            </urn1:nhinTargetCommunity>
         </urn:nhinTargetCommunities>
         <urn2:EDXLDistribution>
            <urn2:distributionID>633990682441061250</urn2:distributionID>
            <urn2:senderID>actor@2.16.840.1.113883.3.166</urn2:senderID>
            <urn2:dateTimeSent>2010-08-14T12:18:13.512375-08:00</urn2:dateTimeSent>
            <urn2:distributionStatus>Actual</urn2:distributionStatus>
            <urn2:distributionType>Update</urn2:distributionType>
            <urn2:combinedConfidentiality>Public</urn2:combinedConfidentiality>
            <!--Optional:-->
            <urn2:language>?</urn2:language>
            <!--Zero or more repetitions:-->
            <urn2:senderRole>
               <urn2:valueListUrn>?</urn2:valueListUrn>
               <!--1 or more repetitions:-->
               <urn2:value>?</urn2:value>
            </urn2:senderRole>
            <!--Zero or more repetitions:-->
            <urn2:recipientRole>
               <urn2:valueListUrn>?</urn2:valueListUrn>
               <!--1 or more repetitions:-->
               <urn2:value>?</urn2:value>
            </urn2:recipientRole>
            <!--Zero or more repetitions:-->
            <urn2:keyword>
               <urn2:valueListUrn>?</urn2:valueListUrn>
               <!--1 or more repetitions:-->
               <urn2:value>?</urn2:value>
            </urn2:keyword>
            <!--Zero or more repetitions:-->
            <urn2:distributionReference>?</urn2:distributionReference>
            <!--Zero or more repetitions:-->
            <urn2:explicitAddress>
               <urn2:explicitAddressScheme>modified_IHEIntendedRecipient</urn2:explicitAddressScheme>
               <!--1 or more repetitions:-->
               <urn2:explicitAddressValue>^^^^^^^^^2.16.840.1.113883.3.166|0000000001</urn2:explicitAddressValue>
            </urn2:explicitAddress>
            <!--Zero or more repetitions:-->
            <urn2:targetArea>
               <!--Zero or more repetitions:-->
               <urn2:circle>?</urn2:circle>
               <!--Zero or more repetitions:-->
               <urn2:polygon>?</urn2:polygon>
               <!--Zero or more repetitions:-->
               <urn2:country>?</urn2:country>
               <!--Zero or more repetitions:-->
               <urn2:subdivision>?</urn2:subdivision>
               <!--Zero or more repetitions:-->
               <urn2:locCodeUN>?</urn2:locCodeUN>
            </urn2:targetArea>
            <!--Zero or more repetitions:-->
            <urn2:contentObject>
               <!--Optional:-->
               <urn2:contentDescription>PH Alert Message</urn2:contentDescription>
               <!--Zero or more repetitions:-->
               <urn2:contentKeyword>
                  <urn2:valueListUrn>?</urn2:valueListUrn>
                  <!--1 or more repetitions:-->
                  <urn2:value>?</urn2:value>
               </urn2:contentKeyword>
               <!--Optional:-->
               <urn2:incidentID>TEST</urn2:incidentID>
               <!--Optional:-->
               <urn2:incidentDescription>This is a test message</urn2:incidentDescription>
               <!--Zero or more repetitions:-->
               <urn2:originatorRole>
                  <urn2:valueListUrn>?</urn2:valueListUrn>
                  <!--1 or more repetitions:-->
                  <urn2:value>?</urn2:value>
               </urn2:originatorRole>
               <!--Zero or more repetitions:-->
               <urn2:consumerRole>
                  <urn2:valueListUrn>?</urn2:valueListUrn>
                  <!--1 or more repetitions:-->
                  <urn2:value>?</urn2:value>
               </urn2:consumerRole>
               <!--Optional:-->
               <urn2:confidentiality>Public</urn2:confidentiality>
               <!--You have a CHOICE of the next 2 items at this level-->
		<urn2:nonXMLContent>
                  <urn2:mimeType>application/pdf</urn2:mimeType>
                  <!--Optional:-->
                  <urn2:size>19</urn2:size>
                  <!--Optional:-->
                  <urn2:digest>?</urn2:digest>
                  <!--Optional:-->
                  <urn2:uri>?</urn2:uri>
                  <!--Optional:-->
                  <urn2:contentData>${#TestSuite#EncodedPath}</urn2:contentData>
               </urn2:nonXMLContent>
               <!--You may enter ANY elements at this point-->
            </urn2:contentObject>
         </urn2:EDXLDistribution>
      </urn:RespondingGateway_SendAlertMessage>
   </soap:Body>
</soap:Envelope>]]></con:request>
		<con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
		<con:jmsPropertyConfig/>
		<con:wsaConfig mustUnderstand="NONE" version="200508"/>
		<con:wsrmConfig version="1.2"/>
	</con:request>
</con:config>
</con:testStep><con:testStep type="groovy" name="Check for Received File"><con:settings/><con:config><script>import java.util.Vector;

def directoryName = context.findProperty('ReceiverPath');
def fileSubStr = "nhin";
def filePattern = ~/${fileSubStr}/
def directory = new File(directoryName)
def receivedFileName = "";
Vector files = new Vector();

def timeToWait = context.findProperty('SecondsToWaitForAD').toInteger();
def i = 0;
def originalFile = new File(context.findProperty('SenderPath')
	+ "/" + context.findProperty('FileName'));
def originalSize = originalFile.size();
def flag = false;

def findFilenameClosure =
{
	if (filePattern.matcher(it.name).find())
	{
		log.info "\t${it.name} (size ${it.size()})"
		files.add(it.name)
	}
}

while(i &lt; timeToWait){
	directory.eachFile(findFilenameClosure)

	if(files.size() > 0){
		flag = true;
		break;
	}
	sleep(1000);
	i++;
}

if(flag == false){
	assert (1 == 2);
}else {
	flag = false;
	receivedFileName = files.get(0);
	def rFile = new File(directoryName + "/" + receivedFileName);
	while(i &lt; timeToWait){
		if(rFile.size() == originalSize){
			flag = true;
			break;
		}else if(rFile.size() > originalSize){
			assert(1 == 2);
		}else{
			sleep(1000);
			i++;
		}
	}
}

if(flag == false){
	assert(1 == 2);
}else{
	testRunner.testCase.testSuite.setPropertyValue('ReceivedFileName', receivedFileName)
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Check MD5"><con:settings/><con:config><script>import java.security.MessageDigest;

def fileName = context.findProperty('ReceiverPath') + "/" +
	context.findProperty('ReceivedFileName');

MessageDigest digest = MessageDigest.getInstance("MD5");

new File(fileName).withInputStream(){is->
	byte[] buffer = new byte[8192]
	int read = 0
		while( (read = is.read(buffer)) > 0) {
			digest.update(buffer, 0, read);
		}
}

byte[] md5sum = digest.digest()
BigInteger bigInt = new BigInteger(1, md5sum)

def receiveMD5 = bigInt.toString(16)
def sentMD5 = context.findProperty('SendMD5')

log.info "SENT: ${sentMD5}, RECEIVED: ${receiveMD5}"

assert ( sentMD5 == receiveMD5 );
</script></con:config></con:testStep><con:testStep type="groovy" name="Delete Received File"><con:settings/><con:config><script>def fileName = context.findProperty('ReceiverPath') + File.separator + context.findProperty('ReceivedFileName');
new File(fileName).delete();</script></con:config></con:testStep><con:setupScript>nhinc.FileUtils.backupConfiguration(context.findProperty('GatewayPropDir'), log);
nhinc.FileUtils.setG1ConnectionInfo(context.expand(context.testCase.testSuite.project.resourceRoot)+'/../', context.findProperty('GatewayPropDir'), log);</con:setupScript>
<con:tearDownScript>nhinc.FileUtils.restoreConfiguration(context.findProperty('GatewayPropDir'), log);</con:tearDownScript>
<con:properties>
	<con:property>
		<con:name>startDate</con:name>
		<con:value>2012-10-17T19:06:24Z</con:value>
	</con:property>
	<con:property>
		<con:name>endDate</con:name>
		<con:value>2012-10-17T19:16:24Z</con:value>
	</con:property>
	<con:property>
		<con:name>sigDate</con:name>
		<con:value>10/17/2012 19:06:24</con:value>
	</con:property>
	<con:property>
		<con:name>expireDate</con:name>
		<con:value>2012-11-16T00:00:00Z</con:value>
	</con:property>
</con:properties>
</con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Admin Distribution MessageProxy" searchProperties="true" id="6b1fc292-c841-4cce-ac42-4b1535aba84e">
	<con:settings/>
	<con:testStep type="groovy" name="Update gateway.properties"><con:settings/><con:config><script>def saveDir = context.findProperty('ReceiverPath');

nhinc.FileUtils.updateProperty(context.findProperty('GatewayPropDir'), "gateway.properties", "ParsePayloadAsFileURIOutbound", "true", log);
nhinc.FileUtils.updateProperty(context.findProperty('GatewayPropDir'), "gateway.properties", "PayloadSaveDirectory", "${saveDir}", log);
nhinc.FileUtils.updateProperty(context.findProperty('GatewayPropDir'), "gateway.properties", "SavePayloadToFileInbound", "true", log);
</script></con:config></con:testStep>
<con:testStep type="groovy" name="Check for Received File"><con:settings/><con:config><script>import java.util.Vector;

def directoryName = context.findProperty('ReceiverPath');
def fileSubStr = "nhin";
def filePattern = ~/${fileSubStr}/
def directory = new File(directoryName)
def receivedFileName = "";
Vector files = new Vector();

def timeToWait = context.findProperty('SecondsToWaitForAD').toInteger();
def i = 0;
def originalFile = new File(context.findProperty('SenderPath')
	+ "/" + context.findProperty('FileName'));
def originalSize = originalFile.size();
def flag = false;

def findFilenameClosure =
{
	if (filePattern.matcher(it.name).find())
	{
		log.info "\t${it.name} (size ${it.size()})"
		files.add(it.name)
	}
}

while(i &lt; timeToWait){
	directory.eachFile(findFilenameClosure)

	if(files.size() > 0){
		flag = true;
		break;
	}
	sleep(1000);
	i++;
}

if(flag == false){
	assert (1 == 2);
}else {
	flag = false;
	receivedFileName = files.get(0);
	def rFile = new File(directoryName + "/" + receivedFileName);
	while(i &lt; timeToWait){
		if(rFile.size() == originalSize){
			flag = true;
			break;
		}else if(rFile.size() > originalSize){
			assert(1 == 2);
		}else{
			sleep(1000);
			i++;
		}
	}
}

if(flag == false){
	assert(1 == 2);
}else{
	testRunner.testCase.testSuite.setPropertyValue('ReceivedFileName', receivedFileName)
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Check MD5"><con:settings/><con:config><script>import java.security.MessageDigest;

def fileName = context.findProperty('ReceiverPath') + "/" +
	context.findProperty('ReceivedFileName');

MessageDigest digest = MessageDigest.getInstance("MD5");

new File(fileName).withInputStream(){is->
	byte[] buffer = new byte[8192]
	int read = 0
		while( (read = is.read(buffer)) > 0) {
			digest.update(buffer, 0, read);
		}
}

byte[] md5sum = digest.digest()
BigInteger bigInt = new BigInteger(1, md5sum)

def receiveMD5 = bigInt.toString(16)
def sentMD5 = context.findProperty('SendMD5')

log.info "SENT: ${sentMD5}, RECEIVED: ${receiveMD5}"

assert ( sentMD5 == receiveMD5 );
</script></con:config></con:testStep><con:testStep type="groovy" name="Delete Received File"><con:settings/><con:config><script>def fileName = context.findProperty('ReceiverPath') + File.separator + context.findProperty('ReceivedFileName');
new File(fileName).delete();</script></con:config></con:testStep><con:setupScript>nhinc.FileUtils.backupConfiguration(context.findProperty('GatewayPropDir'), log);
nhinc.FileUtils.setG1ConnectionInfo(context.expand(context.testCase.testSuite.project.resourceRoot)+'/../', context.findProperty('GatewayPropDir'), log);</con:setupScript>
<con:tearDownScript>nhinc.FileUtils.restoreConfiguration(context.findProperty('GatewayPropDir'), log);
</con:tearDownScript>
<con:properties>
	<con:property>
		<con:name>startDate</con:name>
		<con:value>2012-10-15T18:44:25Z</con:value>
	</con:property>
	<con:property>
		<con:name>endDate</con:name>
		<con:value>2012-10-15T18:54:25Z</con:value>
	</con:property>
	<con:property>
		<con:name>sigDate</con:name>
		<con:value>10/15/2012 18:44:25</con:value>
	</con:property>
	<con:property>
		<con:name>expireDate</con:name>
		<con:value>2012-11-14T00:00:00Z</con:value>
	</con:property>
</con:properties>
<con:reportParameters/>
</con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Document Retrieve" searchProperties="true" id="caccc017-559c-49fc-81a9-4037cd11d550">
	<con:settings/>
	<con:testStep type="groovy" name="Backup DR Spring Proxy"><con:settings/><con:config><script>def SpringFile = new File(context.findProperty('GatewayPropDir') + "/" +
	"DocumentRetrieveProxyConfig.xml");

new File(context.findProperty('GatewayPropDir') + "/" +
	"DocumentRetrieveProxyConfig.xml.bak") &lt;&lt; SpringFile.asWritable();

SpringFile.delete();</script></con:config></con:testStep><con:testStep type="groovy" name="Update gateway.properties"><con:settings/><con:config><script>def saveDir = context.findProperty('ReceiverPath');

nhinc.FileUtils.updateProperty(context.findProperty('GatewayPropDir'), "gateway.properties", "ParsePayloadAsFileURIOutbound", "true", log);
nhinc.FileUtils.updateProperty(context.findProperty('GatewayPropDir'), "gateway.properties", "PayloadSaveDirectory", "${saveDir}", log);
nhinc.FileUtils.updateProperty(context.findProperty('GatewayPropDir'), "gateway.properties", "SavePayloadToFileInbound", "true", log);
</script></con:config></con:testStep><con:testStep type="groovy" name="Update DR Spring Proxy"><con:settings/><con:config><script><![CDATA[def springProxyFile = new File (context.findProperty('GatewayPropDir') +
	"/" + "DocumentRetrieveProxyConfig.xml");
def springProxyBak = context.findProperty('GatewayPropDir') +
	"/" + "DocumentRetrieveProxyConfig.xml.bak";

def aliasLine = '<alias alias="adapterdocumentrepository" name="adapterdocumentrepositorywsunsecured" />'
def propertyLine = '<property name="document" value="ZmlsZTovLy9Vc2Vycy9ha29uZy9wYXlsb2Fkcy8xRy56aXA=" />'
def aliasReplace = '<alias alias="adapterdocumentrepository" name="adapterdocumentrepositorybean" />'
def propertyReplace = '<property name="document" value="file:///' +
	context.findProperty('SenderPath') + "/" +
	context.findProperty('FileName') + '" />';
def ln = System.getProperty('line.separator')

def f = new File(springProxyBak)
f.eachLine() {
    line ->
    if(line.contains(aliasLine)){
    		springProxyFile << (aliasReplace + ln);
    }else if(line.contains(propertyLine)){
    		springProxyFile << (propertyReplace + ln);
    }else{
    		springProxyFile << (line + ln);
    }
}]]></script></con:config></con:testStep>
<con:testStep name="Document Retrieve" type="request">
		<con:settings/>
		<con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
			<con:interface>EntityDocRetrieveBindingSoap</con:interface>
			<con:operation>RespondingGateway_CrossGatewayRetrieve</con:operation>
			<con:request incomingWss="" name="Document Retrieve" outgoingWss="" wssPasswordType="">
				<con:settings>
					<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@expand-mtom-attachments">true</con:setting>
					<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
		</con:settings>
		<con:encoding>UTF-8</con:encoding>
		<con:endpoint>${#Project#Endpoint-DocRetrieve}</con:endpoint>
		<con:request><![CDATA[
			<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:urn="urn:gov:hhs:fha:nhinc:common:nhinccommonentity" xmlns:urn1="urn:ihe:iti:xds-b:2007" xmlns:urn2="urn:gov:hhs:fha:nhinc:common:nhinccommon">
   <soap:Header/>
   <soap:Body testSuite="Entity_g1" testCase="Document Retrieve">
      <urn:RespondingGateway_CrossGatewayRetrieveRequest>
         <urn1:RetrieveDocumentSetRequest>
            <urn1:DocumentRequest>
               <urn1:HomeCommunityId>urn:oid:${#Project#RemoteHCID}</urn1:HomeCommunityId>
               <urn1:RepositoryUniqueId>${#Project#DRRepoID}</urn1:RepositoryUniqueId>
               <urn1:DocumentUniqueId>${#Project#DRDocID}</urn1:DocumentUniqueId>
            </urn1:DocumentRequest>
         </urn1:RetrieveDocumentSetRequest>
         <urn:assertion>
            <urn2:address xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
               <urn2:addressType>
                  <urn2:code>AddrCode</urn2:code>
                  <urn2:codeSystem>AddrCodeSyst</urn2:codeSystem>
                  <urn2:codeSystemName>AddrCodeSystName</urn2:codeSystemName>
                  <urn2:codeSystemVersion>1.0</urn2:codeSystemVersion>
                  <urn2:displayName>AddrCode</urn2:displayName>
                  <urn2:originalText>AddrCode</urn2:originalText>
               </urn2:addressType>
               <urn2:city>AddrCity</urn2:city>
               <urn2:country>AddrCountry</urn2:country>
               <urn2:state>AddrState</urn2:state>
               <urn2:streetAddress>AddrStreet</urn2:streetAddress>
               <urn2:zipCode>AddrZip</urn2:zipCode>
            </urn2:address>
            <urn2:dateOfBirth xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">06/04/1959 05:21:00</urn2:dateOfBirth>
            <urn2:explanationNonClaimantSignature xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">Electronic</urn2:explanationNonClaimantSignature>
            <urn2:haveSecondWitnessSignature xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">false</urn2:haveSecondWitnessSignature>
            <urn2:haveSignature xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">false</urn2:haveSignature>
            <urn2:haveWitnessSignature xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">false</urn2:haveWitnessSignature>
            <urn2:homeCommunity xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
               <urn2:description>${#Project#LocalHCDescription}</urn2:description>
               <urn2:homeCommunityId>${#Project#LocalHCID}</urn2:homeCommunityId>
               <urn2:name>${#Project#LocalHCDescription}</urn2:name>
            </urn2:homeCommunity>
            <urn2:personName xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
               <urn2:familyName>Smith</urn2:familyName>
               <urn2:givenName>Sandy</urn2:givenName>
               <urn2:nameType>
                  <urn2:code>nameCode</urn2:code>
                  <urn2:codeSystem>nameCodeSyst</urn2:codeSystem>
                  <urn2:codeSystemName>nameCodeSystName</urn2:codeSystemName>
                  <urn2:codeSystemVersion>1.0</urn2:codeSystemVersion>
                  <urn2:displayName>nameCode</urn2:displayName>
                  <urn2:originalText>nameCode</urn2:originalText>
               </urn2:nameType>
               <urn2:secondNameOrInitials>S</urn2:secondNameOrInitials>
               <urn2:fullName>Sandy S. Smith</urn2:fullName>
            </urn2:personName>
            <urn2:phoneNumber xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
               <urn2:areaCode>321</urn2:areaCode>
               <urn2:countryCode>1</urn2:countryCode>
               <urn2:extension>5436</urn2:extension>
               <urn2:localNumber>253-6849</urn2:localNumber>
               <urn2:phoneNumberType>
                  <urn2:code>phoneCode</urn2:code>
                  <urn2:codeSystem>phoneCodeSyst</urn2:codeSystem>
                  <urn2:codeSystemName>phoneCodeSystName</urn2:codeSystemName>
                  <urn2:codeSystemVersion>1.0</urn2:codeSystemVersion>
                  <urn2:displayName>phoneCode</urn2:displayName>
                  <urn2:originalText>phoneCode</urn2:originalText>
               </urn2:phoneNumberType>
            </urn2:phoneNumber>
            <urn2:secondWitnessAddress xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
               <urn2:addressType>
                  <urn2:code>AddrCode</urn2:code>
                  <urn2:codeSystem>AddrCodeSyst</urn2:codeSystem>
                  <urn2:codeSystemName>AddrCodeSystName</urn2:codeSystemName>
                  <urn2:codeSystemVersion>1.0</urn2:codeSystemVersion>
                  <urn2:displayName>AddrCode</urn2:displayName>
                  <urn2:originalText>AddrCode</urn2:originalText>
               </urn2:addressType>
               <urn2:city>Addr2City</urn2:city>
               <urn2:country>Addr2Country</urn2:country>
               <urn2:state>Addr2State</urn2:state>
               <urn2:streetAddress>Addr2Street</urn2:streetAddress>
               <urn2:zipCode>Addr2Zip</urn2:zipCode>
            </urn2:secondWitnessAddress>
            <urn2:secondWitnessName xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
               <urn2:familyName>Smith</urn2:familyName>
               <urn2:givenName>Sammy</urn2:givenName>
               <urn2:nameType>
                  <urn2:code>nameCode</urn2:code>
                  <urn2:codeSystem>nameCodeSyst</urn2:codeSystem>
                  <urn2:codeSystemName>nameCodeSystName</urn2:codeSystemName>
                  <urn2:codeSystemVersion>1.0</urn2:codeSystemVersion>
                  <urn2:displayName>nameCode</urn2:displayName>
                  <urn2:originalText>nameCode</urn2:originalText>
               </urn2:nameType>
               <urn2:secondNameOrInitials>s</urn2:secondNameOrInitials>
               <urn2:fullName>Sammy S. Smith</urn2:fullName>
            </urn2:secondWitnessName>
            <urn2:secondWitnessPhone xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
               <urn2:areaCode>321</urn2:areaCode>
               <urn2:countryCode>1</urn2:countryCode>
               <urn2:extension>5424</urn2:extension>
               <urn2:localNumber>542-6823</urn2:localNumber>
               <urn2:phoneNumberType>
                  <urn2:code>phoneCode</urn2:code>
                  <urn2:codeSystem>phoneCodeSyst</urn2:codeSystem>
                  <urn2:codeSystemName>phoneCodeSystName</urn2:codeSystemName>
                  <urn2:codeSystemVersion>1.0</urn2:codeSystemVersion>
                  <urn2:displayName>phoneCode</urn2:displayName>
                  <urn2:originalText>phoneCode</urn2:originalText>
               </urn2:phoneNumberType>
            </urn2:secondWitnessPhone>
            <urn2:SSN xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">253-98-7546</urn2:SSN>
            <urn2:uniquePatientId xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">500000000^^^&amp;1.1&amp;ISO</urn2:uniquePatientId>
            <urn2:witnessAddress xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
               <urn2:addressType>
                  <urn2:code>addrCode</urn2:code>
                  <urn2:codeSystem>addrCodeSyst</urn2:codeSystem>
                  <urn2:codeSystemName>addrCodeSystName</urn2:codeSystemName>
                  <urn2:codeSystemVersion>1.0</urn2:codeSystemVersion>
                  <urn2:displayName>addrCode</urn2:displayName>
                  <urn2:originalText>addrCode</urn2:originalText>
               </urn2:addressType>
               <urn2:city>Burnell</urn2:city>
               <urn2:country>USA</urn2:country>
               <urn2:state>FL</urn2:state>
               <urn2:streetAddress>825 North</urn2:streetAddress>
               <urn2:zipCode>32184</urn2:zipCode>
            </urn2:witnessAddress>
            <urn2:witnessName xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
               <urn2:familyName>Smith</urn2:familyName>
               <urn2:givenName>Scott</urn2:givenName>
               <urn2:nameType>
                  <urn2:code>nameCode</urn2:code>
                  <urn2:codeSystem>nameCodeSyst</urn2:codeSystem>
                  <urn2:codeSystemName>nameCodeSystName</urn2:codeSystemName>
                  <urn2:codeSystemVersion>1.0</urn2:codeSystemVersion>
                  <urn2:displayName>nameCode</urn2:displayName>
                  <urn2:originalText>nameCode</urn2:originalText>
               </urn2:nameType>
               <urn2:secondNameOrInitials>S.</urn2:secondNameOrInitials>
               <urn2:fullName>Scott S. Smith</urn2:fullName>
            </urn2:witnessName>
            <urn2:witnessPhone xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
               <urn2:areaCode>321</urn2:areaCode>
               <urn2:countryCode>1</urn2:countryCode>
               <urn2:extension>8432</urn2:extension>
               <urn2:localNumber>985-2239</urn2:localNumber>
               <urn2:phoneNumberType>
                  <urn2:code>phoneCode</urn2:code>
                  <urn2:codeSystem>phoneCodeSyst</urn2:codeSystem>
                  <urn2:codeSystemName>phoneCodeSystName</urn2:codeSystemName>
                  <urn2:codeSystemVersion>1.0</urn2:codeSystemVersion>
                  <urn2:displayName>phoneCode</urn2:displayName>
                  <urn2:originalText>phoneCode</urn2:originalText>
               </urn2:phoneNumberType>
            </urn2:witnessPhone>
            <urn2:userInfo xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
               <urn2:personName>
                  <urn2:familyName>Skagerberg</urn2:familyName>
                  <urn2:givenName>Karl</urn2:givenName>
                  <urn2:nameType>
                     <urn2:code>nameCode</urn2:code>
                     <urn2:codeSystem>nameCodeSyst</urn2:codeSystem>
                     <urn2:codeSystemName>nameCodeSystName</urn2:codeSystemName>
                     <urn2:codeSystemVersion>1.0</urn2:codeSystemVersion>
                     <urn2:displayName>nameCode</urn2:displayName>
                     <urn2:originalText>nameCode</urn2:originalText>
                  </urn2:nameType>
                  <urn2:secondNameOrInitials>S</urn2:secondNameOrInitials>
                  <urn2:fullName>Kasrl S. Skagerberg</urn2:fullName>
               </urn2:personName>
               <urn2:userName>kskagerb</urn2:userName>
               <urn2:org>
                  <urn2:description>${#Project#LocalHCDescription}</urn2:description>
                  <urn2:homeCommunityId>${#Project#LocalHCID}</urn2:homeCommunityId>
                  <urn2:name>${#Project#LocalHCDescription}</urn2:name>
               </urn2:org>
               <urn2:roleCoded>
                  <urn2:code>307969004</urn2:code>
                  <urn2:codeSystem>2.16.840.1.113883.6.96</urn2:codeSystem>
                  <urn2:codeSystemName>SNOMED_CT</urn2:codeSystemName>
                  <urn2:codeSystemVersion>1.0</urn2:codeSystemVersion>
                  <urn2:displayName>Public Health</urn2:displayName>
                  <urn2:originalText>Public Health</urn2:originalText>
               </urn2:roleCoded>
            </urn2:userInfo>
            <urn2:authorized xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">true</urn2:authorized>
            <urn2:purposeOfDisclosureCoded xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
               <urn2:code>PUBLICHEALTH</urn2:code>
               <urn2:codeSystem>2.16.840.1.113883.3.18.7.1</urn2:codeSystem>
               <urn2:codeSystemName>nhin-purpose</urn2:codeSystemName>
               <urn2:codeSystemVersion>1.0</urn2:codeSystemVersion>
               <urn2:displayName>Use or disclosure of Psychotherapy Notes</urn2:displayName>
               <urn2:originalText>Use or disclosure of Psychotherapy Notes</urn2:originalText>
            </urn2:purposeOfDisclosureCoded>
            <urn2:samlAuthnStatement xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
               <urn2:authInstant>2009-04-16T13:15:39Z</urn2:authInstant>
               <urn2:sessionIndex>987</urn2:sessionIndex>
               <urn2:authContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:X509</urn2:authContextClassRef>
               <urn2:subjectLocalityAddress>158.147.185.168</urn2:subjectLocalityAddress>
               <urn2:subjectLocalityDNSName>cs.myharris.net</urn2:subjectLocalityDNSName>
            </urn2:samlAuthnStatement>
            <urn2:samlAuthzDecisionStatement xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
               <urn2:decision>Permit</urn2:decision>
               <urn2:resource>https://158.147.185.168:8181/SamlReceiveService/SamlProcessWS</urn2:resource>
               <urn2:action>TestSaml</urn2:action>
               <urn2:evidence>
                  <urn2:assertion>
                     <urn2:id>40df7c0a-ff3e-4b26-baeb-f2910f6d05a9</urn2:id>
                     <urn2:issueInstant>2009-04-16T13:10:39.093Z</urn2:issueInstant>
                     <urn2:version>2.0</urn2:version>
                     <urn2:issuerFormat>urn:oasis:names:tc:SAML:1.1:nameid-format:X509SubjectName</urn2:issuerFormat>
                     <urn2:issuer>CN=SAML User,OU=Harris,O=HITS,L=Melbourne,ST=FL,C=US</urn2:issuer>
                     <urn2:conditions>
                        <urn2:notBefore>2009-04-16T13:10:39.093Z</urn2:notBefore>
                        <urn2:notOnOrAfter>2009-12-31T12:00:00.000Z</urn2:notOnOrAfter>
                     </urn2:conditions>
                     <urn2:accessConsentPolicy>urn:oid:1.2.3.4</urn2:accessConsentPolicy>
                     <urn2:instanceAccessConsentPolicy>urn:oid:1.2.3.4.123456789</urn2:instanceAccessConsentPolicy>
                  </urn2:assertion>
               </urn2:evidence>
            </urn2:samlAuthzDecisionStatement>
         </urn:assertion>
         <urn:NhinTargetCommunities>
            <urn2:nhinTargetCommunity>
               <urn2:homeCommunity>
                  <urn2:description>${#Project#RemoteHCDescription}</urn2:description>
                  <urn2:homeCommunityId>${#Project#RemoteHCID}</urn2:homeCommunityId>
                  <urn2:name>${#Project#RemoteHCDescription}</urn2:name>
               </urn2:homeCommunity>
            </urn2:nhinTargetCommunity>
         </urn:NhinTargetCommunities>
      </urn:RespondingGateway_CrossGatewayRetrieveRequest>
   </soap:Body>
</soap:Envelope>]]></con:request>
		<con:assertion type="SOAP Response"/>
		<con:assertion type="SOAP Fault Assertion"/>
		<con:assertion type="Schema Compliance" disabled="true">
			<con:configuration>
				<definition/>
			</con:configuration>
		</con:assertion>
		<con:assertion name="Doc Repository ID" type="XPath Match">
			<con:configuration>
				<path>declare namespace ns5='urn:ihe:iti:xds-b:2007';
					//ns5:RetrieveDocumentSetResponse[1]/ns5:DocumentResponse[1]/ns5:RepositoryUniqueId[1]</path>
				<content>${#Project#DRRepoID}</content>
				<allowWildcards>false</allowWildcards>
				<ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
			</con:configuration>
		</con:assertion>
		<con:assertion name="Doc ID" type="XPath Match">
			<con:configuration>
				<path>declare namespace ns5='urn:ihe:iti:xds-b:2007';
					//ns5:RetrieveDocumentSetResponse[1]/ns5:DocumentResponse[1]/ns5:DocumentUniqueId[1]</path>
				<content>${#Project#DRDocID}</content>
				<allowWildcards>false</allowWildcards>
				<ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
			</con:configuration>
		</con:assertion>
		<con:assertion name="Document Data" type="GroovyScriptAssertion">
			<con:configuration>
				<scriptText>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
					def holder = groovyUtils.getXmlHolder( messageExchange.responseContent )
					holder.namespaces["ns"]="urn:ihe:iti:xds-b:2007"
					def docData = holder["//ns:RetrieveDocumentSetResponse[1]/ns:DocumentResponse[1]/ns:Document[1]"]
					log.info docData.toString()
					assert (docData.size() != 0)</scriptText>
			</con:configuration>
		</con:assertion>
		<con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
		<con:jmsPropertyConfig/>
		<con:wsaConfig action="urn:gov:hhs:fha:nhinc:entitydocretrieve/EntityDocRetrievePortType/RespondingGateway_CrossGatewayRetrieveRequest" mustUnderstand="NONE" version="200508"/>
		<con:wsrmConfig version="1.2"/>
	</con:request>
</con:config>
</con:testStep><con:testStep type="groovy" name="Check MD5 of Received Doc"><con:settings/><con:config><script>import java.security.MessageDigest;
import java.util.Vector;

def directoryName = context.findProperty('ReceiverPath');
def fileSubStr = "nhin";
def filePattern = ~/${fileSubStr}/
def directory = new File(directoryName)
def receivedFile = "";
Vector files = new Vector();

def findFilenameClosure =
{
	if (filePattern.matcher(it.name).find())
	{
		log.info "\t${it.name} (size ${it.size()})"
		files.add(it.name)
	}
}

directory.eachFile(findFilenameClosure)

if(files.size() > 0){
	receivedFile = files.get(0);
}else {
	log.error "No files found in: ${directoryName}"
	assert 1 == 2;
}


testRunner.testCase.testSuite.setPropertyValue('ReceivedFileName', receivedFile);
def fileName = directoryName + "/" + receivedFile;

MessageDigest digest = MessageDigest.getInstance("MD5");

new File(fileName).withInputStream(){is->
	byte[] buffer = new byte[8192]
	int read = 0
		while( (read = is.read(buffer)) > 0) {
			digest.update(buffer, 0, read);
		}
}

byte[] md5sum = digest.digest()
BigInteger bigInt = new BigInteger(1, md5sum)

def receiveMD5 = bigInt.toString(16)
def sentMD5 = context.findProperty('SendMD5')

log.info "SENT: ${sentMD5}, RECEIVED: ${receiveMD5}"

assert ( sentMD5 == receiveMD5 );</script></con:config></con:testStep><con:testStep type="groovy" name="Delete Received File"><con:settings/><con:config><script>def fileName = context.findProperty('ReceiverPath') + File.separator + context.findProperty('ReceivedFileName');
new File(fileName).delete();</script></con:config></con:testStep><con:setupScript>nhinc.FileUtils.backupConfiguration(context.findProperty('GatewayPropDir'), log);</con:setupScript>
<con:tearDownScript>nhinc.FileUtils.restoreConfiguration(context.findProperty('GatewayPropDir'), log);

def SpringFileBak = new File(context.findProperty('GatewayPropDir') + "/" +
	"DocumentRetrieveProxyConfig.xml.bak");
if(SpringFileBak.exists()){
	def SpringFile = new File(context.findProperty('GatewayPropDir') + "/" +
	"DocumentRetrieveProxyConfig.xml");

	SpringFile.delete();
	SpringFile &lt;&lt; SpringFileBak.asWritable();
	SpringFileBak.delete();
}</con:tearDownScript>
<con:properties>
	<con:property>
		<con:name>CorrectedRemoteHCID</con:name>
		<con:value>urn:oid:2.2</con:value>
	</con:property>
	<con:property>
		<con:name>startDate</con:name>
		<con:value>2012-10-17T19:05:07Z</con:value>
	</con:property>
	<con:property>
		<con:name>endDate</con:name>
		<con:value>2012-10-17T19:15:07Z</con:value>
	</con:property>
	<con:property>
		<con:name>sigDate</con:name>
		<con:value>10/17/2012 19:05:07</con:value>
	</con:property>
	<con:property>
		<con:name>expireDate</con:name>
		<con:value>2012-11-16T00:00:00Z</con:value>
	</con:property>
</con:properties>
<con:reportParameters/>
</con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Document Retrieve Message Proxy" searchProperties="true" id="24ac6adf-4ee3-4f0b-b344-755de0056d9c">
	<con:settings/>
	<con:testStep type="groovy" name="Backup DR Spring Proxy"><con:settings/><con:config><script>def SpringFile = new File(context.findProperty('GatewayPropDir') + "/" +
	"DocumentRetrieveProxyConfig.xml");

new File(context.findProperty('GatewayPropDir') + "/" +
	"DocumentRetrieveProxyConfig.xml.bak") &lt;&lt; SpringFile.asWritable();

SpringFile.delete();</script></con:config></con:testStep>
<con:testStep type="groovy" name="Update gateway.properties"><con:settings/><con:config><script>def saveDir = context.findProperty('ReceiverPath');

nhinc.FileUtils.updateProperty(context.findProperty('GatewayPropDir'), "gateway.properties", "ParsePayloadAsFileURIOutbound", "true", log);
nhinc.FileUtils.updateProperty(context.findProperty('GatewayPropDir'), "gateway.properties", "PayloadSaveDirectory", "${saveDir}", log);
nhinc.FileUtils.updateProperty(context.findProperty('GatewayPropDir'), "gateway.properties", "SavePayloadToFileInbound", "true", log);
</script></con:config></con:testStep><con:testStep type="groovy" name="Update DR Spring Proxy"><con:settings/><con:config><script><![CDATA[def springProxyFile = new File (context.findProperty('GatewayPropDir') +
	"/" + "DocumentRetrieveProxyConfig.xml");
def springProxyBak = context.findProperty('GatewayPropDir') +
	"/" + "DocumentRetrieveProxyConfig.xml.bak";

def aliasLine = '<alias alias="adapterdocumentrepository" name="adapterdocumentrepositorywsunsecured" />'
def propertyLine = '<property name="document" value="ZmlsZTovLy9Vc2Vycy9ha29uZy9wYXlsb2Fkcy8xRy56aXA=" />'
def aliasReplace = '<alias alias="adapterdocumentrepository" name="adapterdocumentrepositorybean" />'
def propertyReplace = '<property name="document" value="file:///' +
	context.findProperty('SenderPath') + "/" +
	context.findProperty('FileName') + '" />';
def ln = System.getProperty('line.separator')

def f = new File(springProxyBak)
f.eachLine() {
    line ->
    if(line.contains(aliasLine)){
    		springProxyFile << (aliasReplace + ln);
    }else if(line.contains(propertyLine)){
    		springProxyFile << (propertyReplace + ln);
    }else{
    		springProxyFile << (line + ln);
    }
}]]></script></con:config></con:testStep><con:testStep type="groovy" name="Check MD5 of Received Doc"><con:settings/><con:config><script>import java.security.MessageDigest;
import java.util.Vector;

def directoryName = context.findProperty('ReceiverPath');
def fileSubStr = "nhin";
def filePattern = ~/${fileSubStr}/
def directory = new File(directoryName)
def receivedFile = "";
Vector files = new Vector();

def findFilenameClosure =
{
	if (filePattern.matcher(it.name).find())
	{
		log.info "\t${it.name} (size ${it.size()})"
		files.add(it.name)
	}
}

directory.eachFile(findFilenameClosure)

if(files.size() > 0){
	receivedFile = files.get(0);
}else {
	log.error "No files found in: ${directoryName}"
	assert 1 == 2;
}


testRunner.testCase.testSuite.setPropertyValue('ReceivedFileName', receivedFile);
def fileName = directoryName + "/" + receivedFile;

MessageDigest digest = MessageDigest.getInstance("MD5");

new File(fileName).withInputStream(){is->
	byte[] buffer = new byte[8192]
	int read = 0
		while( (read = is.read(buffer)) > 0) {
			digest.update(buffer, 0, read);
		}
}

byte[] md5sum = digest.digest()
BigInteger bigInt = new BigInteger(1, md5sum)

def receiveMD5 = bigInt.toString(16)
def sentMD5 = context.findProperty('SendMD5')

log.info "SENT: ${sentMD5}, RECEIVED: ${receiveMD5}"

assert ( sentMD5 == receiveMD5 );</script></con:config></con:testStep><con:testStep type="groovy" name="Delete Received File"><con:settings/><con:config><script>def fileName = context.findProperty('ReceiverPath') + File.separator + context.findProperty('ReceivedFileName');
new File(fileName).delete();</script></con:config></con:testStep><con:setupScript>nhinc.FileUtils.backupConfiguration(context.findProperty('GatewayPropDir'), log);
</con:setupScript>
<con:tearDownScript>nhinc.FileUtils.restoreConfiguration(context.findProperty('GatewayPropDir'), log);

def SpringFileBak = new File(context.findProperty('GatewayPropDir') + "/" +
	"DocumentRetrieveProxyConfig.xml.bak");
if(SpringFileBak.exists()){
	def SpringFile = new File(context.findProperty('GatewayPropDir') + "/" +
	"DocumentRetrieveProxyConfig.xml");

	SpringFile.delete();
	SpringFile &lt;&lt; SpringFileBak.asWritable();
	SpringFileBak.delete();
}</con:tearDownScript>
<con:properties>
	<con:property>
		<con:name>DocumentUniqueId</con:name>
		<con:value>555555555</con:value>
	</con:property>
	<con:property>
		<con:name>startDate</con:name>
		<con:value>2012-10-15T18:43:18Z</con:value>
	</con:property>
	<con:property>
		<con:name>endDate</con:name>
		<con:value>2012-10-15T18:53:18Z</con:value>
	</con:property>
	<con:property>
		<con:name>sigDate</con:name>
		<con:value>10/15/2012 18:43:18</con:value>
	</con:property>
	<con:property>
		<con:name>expireDate</con:name>
		<con:value>2012-11-14T00:00:00Z</con:value>
	</con:property>
	<con:property>
		<con:name>CorrectedLocalHCID</con:name>
		<con:value>urn:oid:1.1</con:value>
	</con:property>
</con:properties>
<con:reportParameters/>
</con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Document Retrieve with Multiple Docs" searchProperties="true" id="d65a98ad-d467-433c-97a5-5c9169451f99">
	<con:settings/>
	<con:testStep type="groovy" name="Backup DR Spring Proxy"><con:settings/><con:config><script>def SpringFile = new File(context.findProperty('GatewayPropDir') + "/" +
	"DocumentRetrieveProxyConfig.xml");

new File(context.findProperty('GatewayPropDir') + "/" +
	"DocumentRetrieveProxyConfig.xml.bak") &lt;&lt; SpringFile.asWritable();

SpringFile.delete();</script></con:config></con:testStep><con:testStep type="groovy" name="Update gateway.properties"><con:settings/><con:config><script>def saveDir = context.findProperty('ReceiverPath');

nhinc.FileUtils.updateProperty(context.findProperty('GatewayPropDir'), "gateway.properties", "ParsePayloadAsFileURIOutbound", "true", log);
nhinc.FileUtils.updateProperty(context.findProperty('GatewayPropDir'), "gateway.properties", "PayloadSaveDirectory", "${saveDir}", log);
nhinc.FileUtils.updateProperty(context.findProperty('GatewayPropDir'), "gateway.properties", "SavePayloadToFileInbound", "true", log);
</script></con:config></con:testStep><con:testStep type="groovy" name="Update DR Spring Proxy"><con:settings/><con:config><script><![CDATA[def springProxyFile = new File (context.findProperty('GatewayPropDir') +
	"/" + "DocumentRetrieveProxyConfig.xml");
def springProxyBak = context.findProperty('GatewayPropDir') +
	"/" + "DocumentRetrieveProxyConfig.xml.bak";

def aliasLine = '<alias alias="adapterdocumentrepository" name="adapterdocumentrepositorywsunsecured" />'
def propertyLine = '<property name="document" value="ZmlsZTovLy9Vc2Vycy9ha29uZy9wYXlsb2Fkcy8xRy56aXA=" />'
def aliasReplace = '<alias alias="adapterdocumentrepository" name="adapterdocumentrepositorybean" />'
def propertyReplace = '<property name="document" value="file:///' +
	context.findProperty('SenderPath') + "/" +
	context.findProperty('FileNameMulti1') + '" />';
def ln = System.getProperty('line.separator')

def f = new File(springProxyBak)
f.eachLine() {
    line ->
    if(line.contains(aliasLine)){
    		springProxyFile << (aliasReplace + ln);
    }else if(line.contains(propertyLine)){
    		springProxyFile << (propertyReplace + ln);
    }else{
    		springProxyFile << (line + ln);
    }
}]]></script></con:config></con:testStep>
<con:testStep name="Document Retrieve" type="request">
		<con:settings/>
		<con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
			<con:interface>EntityDocRetrieveBindingSoap</con:interface>
			<con:operation>RespondingGateway_CrossGatewayRetrieve</con:operation>
			<con:request incomingWss="" name="Document Retrieve" outgoingWss="" wssPasswordType="">
				<con:settings>
					<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@expand-mtom-attachments">true</con:setting>
					<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
		</con:settings>
		<con:encoding>UTF-8</con:encoding>
		<con:endpoint>${#Project#Endpoint-DocRetrieve}</con:endpoint>
		<con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:urn="urn:gov:hhs:fha:nhinc:common:nhinccommonentity" xmlns:urn1="urn:ihe:iti:xds-b:2007" xmlns:urn2="urn:gov:hhs:fha:nhinc:common:nhinccommon">
   <soap:Header/>
   <soap:Body testSuite="Entity_g1" testCase="Document Retrieve">
      <urn:RespondingGateway_CrossGatewayRetrieveRequest>
         <urn1:RetrieveDocumentSetRequest>
            <urn1:DocumentRequest>
               <urn1:HomeCommunityId>urn:oid:${#Project#RemoteHCID}</urn1:HomeCommunityId>
               <urn1:RepositoryUniqueId>${#Project#DRRepoID}</urn1:RepositoryUniqueId>
               <urn1:DocumentUniqueId>${#Project#DRDocID}</urn1:DocumentUniqueId>
            </urn1:DocumentRequest>
            <urn1:DocumentRequest>
               <urn1:HomeCommunityId>urn:oid:${#Project#RemoteHCID}</urn1:HomeCommunityId>
               <urn1:RepositoryUniqueId>${#Project#DRRepoID}</urn1:RepositoryUniqueId>
               <urn1:DocumentUniqueId>${#Project#DRDocID}</urn1:DocumentUniqueId>
            </urn1:DocumentRequest>
         </urn1:RetrieveDocumentSetRequest>
         <urn:assertion>
            <urn2:address xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
               <urn2:addressType>
                  <urn2:code>AddrCode</urn2:code>
                  <urn2:codeSystem>AddrCodeSyst</urn2:codeSystem>
                  <urn2:codeSystemName>AddrCodeSystName</urn2:codeSystemName>
                  <urn2:codeSystemVersion>1.0</urn2:codeSystemVersion>
                  <urn2:displayName>AddrCode</urn2:displayName>
                  <urn2:originalText>AddrCode</urn2:originalText>
               </urn2:addressType>
               <urn2:city>AddrCity</urn2:city>
               <urn2:country>AddrCountry</urn2:country>
               <urn2:state>AddrState</urn2:state>
               <urn2:streetAddress>AddrStreet</urn2:streetAddress>
               <urn2:zipCode>AddrZip</urn2:zipCode>
            </urn2:address>
            <urn2:dateOfBirth xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">06/04/1959 05:21:00</urn2:dateOfBirth>
            <urn2:explanationNonClaimantSignature xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">Electronic</urn2:explanationNonClaimantSignature>
            <urn2:haveSecondWitnessSignature xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">false</urn2:haveSecondWitnessSignature>
            <urn2:haveSignature xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">false</urn2:haveSignature>
            <urn2:haveWitnessSignature xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">false</urn2:haveWitnessSignature>
            <urn2:homeCommunity xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
               <urn2:description>${#Project#LocalHCDescription}</urn2:description>
               <urn2:homeCommunityId>${#Project#LocalHCID}</urn2:homeCommunityId>
               <urn2:name>${#Project#LocalHCDescription}</urn2:name>
            </urn2:homeCommunity>
            <urn2:personName xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
               <urn2:familyName>Smith</urn2:familyName>
               <urn2:givenName>Sandy</urn2:givenName>
               <urn2:nameType>
                  <urn2:code>nameCode</urn2:code>
                  <urn2:codeSystem>nameCodeSyst</urn2:codeSystem>
                  <urn2:codeSystemName>nameCodeSystName</urn2:codeSystemName>
                  <urn2:codeSystemVersion>1.0</urn2:codeSystemVersion>
                  <urn2:displayName>nameCode</urn2:displayName>
                  <urn2:originalText>nameCode</urn2:originalText>
               </urn2:nameType>
               <urn2:secondNameOrInitials>S</urn2:secondNameOrInitials>
               <urn2:fullName>Sandy S. Smith</urn2:fullName>
            </urn2:personName>
            <urn2:phoneNumber xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
               <urn2:areaCode>321</urn2:areaCode>
               <urn2:countryCode>1</urn2:countryCode>
               <urn2:extension>5436</urn2:extension>
               <urn2:localNumber>253-6849</urn2:localNumber>
               <urn2:phoneNumberType>
                  <urn2:code>phoneCode</urn2:code>
                  <urn2:codeSystem>phoneCodeSyst</urn2:codeSystem>
                  <urn2:codeSystemName>phoneCodeSystName</urn2:codeSystemName>
                  <urn2:codeSystemVersion>1.0</urn2:codeSystemVersion>
                  <urn2:displayName>phoneCode</urn2:displayName>
                  <urn2:originalText>phoneCode</urn2:originalText>
               </urn2:phoneNumberType>
            </urn2:phoneNumber>
            <urn2:secondWitnessAddress xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
               <urn2:addressType>
                  <urn2:code>AddrCode</urn2:code>
                  <urn2:codeSystem>AddrCodeSyst</urn2:codeSystem>
                  <urn2:codeSystemName>AddrCodeSystName</urn2:codeSystemName>
                  <urn2:codeSystemVersion>1.0</urn2:codeSystemVersion>
                  <urn2:displayName>AddrCode</urn2:displayName>
                  <urn2:originalText>AddrCode</urn2:originalText>
               </urn2:addressType>
               <urn2:city>Addr2City</urn2:city>
               <urn2:country>Addr2Country</urn2:country>
               <urn2:state>Addr2State</urn2:state>
               <urn2:streetAddress>Addr2Street</urn2:streetAddress>
               <urn2:zipCode>Addr2Zip</urn2:zipCode>
            </urn2:secondWitnessAddress>
            <urn2:secondWitnessName xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
               <urn2:familyName>Smith</urn2:familyName>
               <urn2:givenName>Sammy</urn2:givenName>
               <urn2:nameType>
                  <urn2:code>nameCode</urn2:code>
                  <urn2:codeSystem>nameCodeSyst</urn2:codeSystem>
                  <urn2:codeSystemName>nameCodeSystName</urn2:codeSystemName>
                  <urn2:codeSystemVersion>1.0</urn2:codeSystemVersion>
                  <urn2:displayName>nameCode</urn2:displayName>
                  <urn2:originalText>nameCode</urn2:originalText>
               </urn2:nameType>
               <urn2:secondNameOrInitials>s</urn2:secondNameOrInitials>
               <urn2:fullName>Sammy S. Smith</urn2:fullName>
            </urn2:secondWitnessName>
            <urn2:secondWitnessPhone xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
               <urn2:areaCode>321</urn2:areaCode>
               <urn2:countryCode>1</urn2:countryCode>
               <urn2:extension>5424</urn2:extension>
               <urn2:localNumber>542-6823</urn2:localNumber>
               <urn2:phoneNumberType>
                  <urn2:code>phoneCode</urn2:code>
                  <urn2:codeSystem>phoneCodeSyst</urn2:codeSystem>
                  <urn2:codeSystemName>phoneCodeSystName</urn2:codeSystemName>
                  <urn2:codeSystemVersion>1.0</urn2:codeSystemVersion>
                  <urn2:displayName>phoneCode</urn2:displayName>
                  <urn2:originalText>phoneCode</urn2:originalText>
               </urn2:phoneNumberType>
            </urn2:secondWitnessPhone>
            <urn2:SSN xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">253-98-7546</urn2:SSN>
            <urn2:uniquePatientId xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">500000000^^^&amp;1.1&amp;ISO</urn2:uniquePatientId>
            <urn2:witnessAddress xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
               <urn2:addressType>
                  <urn2:code>addrCode</urn2:code>
                  <urn2:codeSystem>addrCodeSyst</urn2:codeSystem>
                  <urn2:codeSystemName>addrCodeSystName</urn2:codeSystemName>
                  <urn2:codeSystemVersion>1.0</urn2:codeSystemVersion>
                  <urn2:displayName>addrCode</urn2:displayName>
                  <urn2:originalText>addrCode</urn2:originalText>
               </urn2:addressType>
               <urn2:city>Burnell</urn2:city>
               <urn2:country>USA</urn2:country>
               <urn2:state>FL</urn2:state>
               <urn2:streetAddress>825 North</urn2:streetAddress>
               <urn2:zipCode>32184</urn2:zipCode>
            </urn2:witnessAddress>
            <urn2:witnessName xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
               <urn2:familyName>Smith</urn2:familyName>
               <urn2:givenName>Scott</urn2:givenName>
               <urn2:nameType>
                  <urn2:code>nameCode</urn2:code>
                  <urn2:codeSystem>nameCodeSyst</urn2:codeSystem>
                  <urn2:codeSystemName>nameCodeSystName</urn2:codeSystemName>
                  <urn2:codeSystemVersion>1.0</urn2:codeSystemVersion>
                  <urn2:displayName>nameCode</urn2:displayName>
                  <urn2:originalText>nameCode</urn2:originalText>
               </urn2:nameType>
               <urn2:secondNameOrInitials>S.</urn2:secondNameOrInitials>
               <urn2:fullName>Scott S. Smith</urn2:fullName>
            </urn2:witnessName>
            <urn2:witnessPhone xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
               <urn2:areaCode>321</urn2:areaCode>
               <urn2:countryCode>1</urn2:countryCode>
               <urn2:extension>8432</urn2:extension>
               <urn2:localNumber>985-2239</urn2:localNumber>
               <urn2:phoneNumberType>
                  <urn2:code>phoneCode</urn2:code>
                  <urn2:codeSystem>phoneCodeSyst</urn2:codeSystem>
                  <urn2:codeSystemName>phoneCodeSystName</urn2:codeSystemName>
                  <urn2:codeSystemVersion>1.0</urn2:codeSystemVersion>
                  <urn2:displayName>phoneCode</urn2:displayName>
                  <urn2:originalText>phoneCode</urn2:originalText>
               </urn2:phoneNumberType>
            </urn2:witnessPhone>
            <urn2:userInfo xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
               <urn2:personName>
                  <urn2:familyName>Skagerberg</urn2:familyName>
                  <urn2:givenName>Karl</urn2:givenName>
                  <urn2:nameType>
                     <urn2:code>nameCode</urn2:code>
                     <urn2:codeSystem>nameCodeSyst</urn2:codeSystem>
                     <urn2:codeSystemName>nameCodeSystName</urn2:codeSystemName>
                     <urn2:codeSystemVersion>1.0</urn2:codeSystemVersion>
                     <urn2:displayName>nameCode</urn2:displayName>
                     <urn2:originalText>nameCode</urn2:originalText>
                  </urn2:nameType>
                  <urn2:secondNameOrInitials>S</urn2:secondNameOrInitials>
                  <urn2:fullName>Kasrl S. Skagerberg</urn2:fullName>
               </urn2:personName>
               <urn2:userName>kskagerb</urn2:userName>
               <urn2:org>
                  <urn2:description>${#Project#LocalHCDescription}</urn2:description>
                  <urn2:homeCommunityId>${#Project#LocalHCID}</urn2:homeCommunityId>
                  <urn2:name>${#Project#LocalHCDescription}</urn2:name>
               </urn2:org>
               <urn2:roleCoded>
                  <urn2:code>307969004</urn2:code>
                  <urn2:codeSystem>2.16.840.1.113883.6.96</urn2:codeSystem>
                  <urn2:codeSystemName>SNOMED_CT</urn2:codeSystemName>
                  <urn2:codeSystemVersion>1.0</urn2:codeSystemVersion>
                  <urn2:displayName>Public Health</urn2:displayName>
                  <urn2:originalText>Public Health</urn2:originalText>
               </urn2:roleCoded>
            </urn2:userInfo>
            <urn2:authorized xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">true</urn2:authorized>
            <urn2:purposeOfDisclosureCoded xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
               <urn2:code>PUBLICHEALTH</urn2:code>
               <urn2:codeSystem>2.16.840.1.113883.3.18.7.1</urn2:codeSystem>
               <urn2:codeSystemName>nhin-purpose</urn2:codeSystemName>
               <urn2:codeSystemVersion>1.0</urn2:codeSystemVersion>
               <urn2:displayName>Use or disclosure of Psychotherapy Notes</urn2:displayName>
               <urn2:originalText>Use or disclosure of Psychotherapy Notes</urn2:originalText>
            </urn2:purposeOfDisclosureCoded>
            <urn2:samlAuthnStatement xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
               <urn2:authInstant>2009-04-16T13:15:39Z</urn2:authInstant>
               <urn2:sessionIndex>987</urn2:sessionIndex>
               <urn2:authContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:X509</urn2:authContextClassRef>
               <urn2:subjectLocalityAddress>158.147.185.168</urn2:subjectLocalityAddress>
               <urn2:subjectLocalityDNSName>cs.myharris.net</urn2:subjectLocalityDNSName>
            </urn2:samlAuthnStatement>
            <urn2:samlAuthzDecisionStatement xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
               <urn2:decision>Permit</urn2:decision>
               <urn2:resource>https://158.147.185.168:8181/SamlReceiveService/SamlProcessWS</urn2:resource>
               <urn2:action>TestSaml</urn2:action>
               <urn2:evidence>
                  <urn2:assertion>
                     <urn2:id>40df7c0a-ff3e-4b26-baeb-f2910f6d05a9</urn2:id>
                     <urn2:issueInstant>2009-04-16T13:10:39.093Z</urn2:issueInstant>
                     <urn2:version>2.0</urn2:version>
                     <urn2:issuerFormat>urn:oasis:names:tc:SAML:1.1:nameid-format:X509SubjectName</urn2:issuerFormat>
                     <urn2:issuer>CN=SAML User,OU=Harris,O=HITS,L=Melbourne,ST=FL,C=US</urn2:issuer>
                     <urn2:conditions>
                        <urn2:notBefore>2009-04-16T13:10:39.093Z</urn2:notBefore>
                        <urn2:notOnOrAfter>2009-12-31T12:00:00.000Z</urn2:notOnOrAfter>
                     </urn2:conditions>
                     <urn2:accessConsentPolicy>urn:oid:1.2.3.4</urn2:accessConsentPolicy>
                     <urn2:instanceAccessConsentPolicy>urn:oid:1.2.3.4.123456789</urn2:instanceAccessConsentPolicy>
                  </urn2:assertion>
               </urn2:evidence>
            </urn2:samlAuthzDecisionStatement>
         </urn:assertion>
         <urn:NhinTargetCommunities>
            <urn2:nhinTargetCommunity>
               <urn2:homeCommunity>
                  <urn2:description>${#Project#RemoteHCDescription}</urn2:description>
                  <urn2:homeCommunityId>${#Project#RemoteHCID}</urn2:homeCommunityId>
                  <urn2:name>${#Project#RemoteHCDescription}</urn2:name>
               </urn2:homeCommunity>
            </urn2:nhinTargetCommunity>
         </urn:NhinTargetCommunities>
      </urn:RespondingGateway_CrossGatewayRetrieveRequest>
   </soap:Body>
</soap:Envelope>]]></con:request>
		<con:assertion type="SOAP Response"/>
		<con:assertion type="SOAP Fault Assertion"/>
		<con:assertion type="Schema Compliance" disabled="true">
			<con:configuration>
				<definition/>
			</con:configuration>
		</con:assertion>
		<con:assertion name="Doc Repository ID" type="XPath Match">
			<con:configuration>
				<path>declare namespace ns5='urn:ihe:iti:xds-b:2007';
					//ns5:RetrieveDocumentSetResponse[1]/ns5:DocumentResponse[1]/ns5:RepositoryUniqueId[1]</path>
				<content>${#Project#DRRepoID}</content>
				<allowWildcards>false</allowWildcards>
				<ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
			</con:configuration>
		</con:assertion>
		<con:assertion name="Doc ID" type="XPath Match">
			<con:configuration>
				<path>declare namespace ns5='urn:ihe:iti:xds-b:2007';
					//ns5:RetrieveDocumentSetResponse[1]/ns5:DocumentResponse[1]/ns5:DocumentUniqueId[1]</path>
				<content>${#Project#DRDocID}</content>
				<allowWildcards>false</allowWildcards>
				<ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
			</con:configuration>
		</con:assertion>
		<con:assertion name="Document Data" type="GroovyScriptAssertion">
			<con:configuration>
				<scriptText>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
					def holder = groovyUtils.getXmlHolder( messageExchange.responseContent )
					holder.namespaces["ns"]="urn:ihe:iti:xds-b:2007"
					def docData = holder["//ns:RetrieveDocumentSetResponse[1]/ns:DocumentResponse[1]/ns:Document[1]"]
					log.info docData.toString()
					assert (docData.size() != 0)</scriptText>
			</con:configuration>
		</con:assertion>
		<con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
		<con:jmsPropertyConfig/>
		<con:wsaConfig action="urn:gov:hhs:fha:nhinc:entitydocretrieve/EntityDocRetrievePortType/RespondingGateway_CrossGatewayRetrieveRequest" mustUnderstand="NONE" version="200508"/>
		<con:wsrmConfig version="1.2"/>
	</con:request>
</con:config>
</con:testStep><con:testStep type="groovy" name="Check MD5 of Received Docs"><con:settings/><con:config><script>import java.security.MessageDigest;
import java.util.Vector;

def directoryName = context.findProperty('ReceiverPath');
def fileSubStr = "nhin";
def filePattern = ~/${fileSubStr}/
def directory = new File(directoryName)
def receivedFile = "";
Vector files = new Vector();

def findFilenameClosure =
{
	if (filePattern.matcher(it.name).find())
	{
		log.info "\t${it.name} (size ${it.size()})"
		files.add(it.name)
	}
}

directory.eachFile(findFilenameClosure)

if(files.size() == 2){
	receivedFile1 = files.get(0);
	receivedFile2 = files.get(1);
}else {
	log.error "No files found in: ${directoryName}"
	assert 1 == 2;
}


testRunner.testCase.testSuite.setPropertyValue('ReceivedFileNameM1', receivedFile1);
def fileName1 = directoryName + "/" + receivedFile1;

testRunner.testCase.testSuite.setPropertyValue('ReceivedFileNameM2', receivedFile2);
def fileName2 = directoryName + "/" + receivedFile2;

MessageDigest digest1 = MessageDigest.getInstance("MD5");

new File(fileName1).withInputStream(){is->
	byte[] buffer = new byte[8192]
	int read = 0
		while( (read = is.read(buffer)) > 0) {
			digest1.update(buffer, 0, read);
		}
}

byte[] md5sum = digest1.digest()
BigInteger bigInt1 = new BigInteger(1, md5sum)

def receiveMD5_1 = bigInt1.toString(16)

MessageDigest digest2 = MessageDigest.getInstance("MD5");

new File(fileName2).withInputStream(){is->
	byte[] buffer = new byte[8192]
	int read = 0
		while( (read = is.read(buffer)) > 0) {
			digest2.update(buffer, 0, read);
		}
}

byte[] md5sum2 = digest2.digest()
BigInteger bigInt2 = new BigInteger(1, md5sum2)

def receiveMD5_2 = bigInt2.toString(16)

def sentMD5 = context.findProperty('SendMD5_M1')

log.info "SENT: ${sentMD5}, RECEIVED: ${receiveMD5_1}"
log.info "SENT: ${sentMD5}  RECEIVED: ${receiveMD5_2}"

assert ( sentMD5 == receiveMD5_1 );
assert ( sentMD5 == receiveMD5_1 );</script></con:config></con:testStep><con:testStep type="groovy" name="Delete Received Files"><con:settings/><con:config><script>def fileName1 = context.findProperty('ReceiverPath') + File.separator + context.findProperty('ReceivedFileNameM1');
new File(fileName1).delete();

def fileName2 = context.findProperty('ReceiverPath') + File.separator + context.findProperty('ReceivedFileNameM2');
new File(fileName2).delete();</script></con:config></con:testStep><con:setupScript>nhinc.FileUtils.backupConfiguration(context.findProperty('GatewayPropDir'), log);</con:setupScript>
<con:tearDownScript>nhinc.FileUtils.restoreConfiguration(context.findProperty('GatewayPropDir'), log);
def SpringFileBak = new File(context.findProperty('GatewayPropDir') + "/" +
	"DocumentRetrieveProxyConfig.xml.bak");
if(SpringFileBak.exists()){
	def SpringFile = new File(context.findProperty('GatewayPropDir') + "/" +
	"DocumentRetrieveProxyConfig.xml");

	SpringFile.delete();
	SpringFile &lt;&lt; SpringFileBak.asWritable();
	SpringFileBak.delete();
}</con:tearDownScript>
<con:properties>
	<con:property>
		<con:name>CorrectedRemoteHCID</con:name>
		<con:value>urn:oid:2.2</con:value>
	</con:property>
	<con:property>
		<con:name>startDate</con:name>
		<con:value>2012-10-17T19:05:07Z</con:value>
	</con:property>
	<con:property>
		<con:name>endDate</con:name>
		<con:value>2012-10-17T19:15:07Z</con:value>
	</con:property>
	<con:property>
		<con:name>sigDate</con:name>
		<con:value>10/17/2012 19:05:07</con:value>
	</con:property>
	<con:property>
		<con:name>expireDate</con:name>
		<con:value>2012-11-16T00:00:00Z</con:value>
	</con:property>
</con:properties>
<con:reportParameters/>
</con:testCase><con:properties><con:property><con:name>PayloadSize</con:name><con:value>34000000</con:value></con:property><con:property><con:name>FileName</con:name><con:value>payload_test.txt</con:value></con:property><con:property><con:name>SenderPath</con:name><con:value>D:/sender</con:value></con:property><con:property><con:name>ReceiverPath</con:name><con:value>D:/receiver</con:value></con:property><con:property><con:name>EncodedPath</con:name><con:value>ZmlsZTovLy9EOi9zZW5kZXIvcGF5bG9hZF90ZXN0LnR4dA==</con:value></con:property><con:property><con:name>SendMD5</con:name><con:value>3a1f82193eb583bd90fc8ae2a1eb3e62</con:value></con:property><con:property><con:name>ReceivedFileName</con:name><con:value>nhin3765598217389177469.clf</con:value></con:property><con:property><con:name>SecondsToWaitForAD</con:name><con:value>360</con:value></con:property><con:property><con:name>MultiPayloadSize</con:name><con:value>17000000</con:value></con:property><con:property><con:name>FileNameMulti1</con:name><con:value>payload_testM1.txt</con:value></con:property><con:property><con:name>FileNameMulti2</con:name><con:value>payload_testM2.txt</con:value></con:property><con:property><con:name>EncodedPathM1</con:name><con:value/></con:property><con:property><con:name>EncodedPathM2</con:name><con:value/></con:property><con:property><con:name>SendMD5_M1</con:name><con:value/></con:property><con:property><con:name>SendMD5_M2</con:name><con:value/></con:property><con:property><con:name>ReceivedFileNameM1</con:name><con:value/></con:property><con:property><con:name>ReceivedFileNameM2</con:name><con:value/></con:property></con:properties></con:testSuite><con:testSuite name="Large Payload Concurrent"><con:settings/><con:runType>PARALLELL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Create Multiple Large Files" searchProperties="true" id="480afdea-3332-4b24-aa21-573740fe3b34" disabled="true"><con:settings/><con:testStep type="groovy" name="Create Files"><con:settings/><con:config><script>def filePath = context.findProperty('SenderPath');
def fileName1 = context.findProperty('FileNameMulti1');
def fileName2 = context.findProperty('FileNameMulti2');
def size = context.findProperty('MultiPayloadSize');

new File(filePath + File.separator + fileName1).newOutputStream().withWriter("UTF-8") { writer ->
    size.toInteger().times { writer.write "Large payload tst data.\n" + it }
}

new File(filePath + File.separator + fileName2).newOutputStream().withWriter("UTF-8") { writer ->
    size.toInteger().times { writer.write "Large payload tst data.\n" + it }
}</script></con:config></con:testStep><con:testStep type="groovy" name="Encode File Names"><con:settings/><con:config><script>def encodePath = "file:" + File.separator + File.separator + 
	context.findProperty('SenderPath') + File.separator + context.findProperty('FileNameMulti1');


def encoded = encodePath.bytes.encodeBase64().toString();

testRunner.testCase.testSuite.setPropertyValue('EncodedPathM1', encoded);

def encodePath2 = "file:" + File.separator + File.separator + 
	context.findProperty('SenderPath') + File.separator + context.findProperty('FileNameMulti2');


def encoded2 = encodePath2.bytes.encodeBase64().toString();

testRunner.testCase.testSuite.setPropertyValue('EncodedPathM2', encoded2);</script></con:config></con:testStep><con:testStep type="groovy" name="Create MD5 Encoder File 1"><con:settings/><con:config><script>import java.security.MessageDigest;

def fileName = context.findProperty('SenderPath') + File.separator +
	context.findProperty('FileNameMulti1');

MessageDigest digest = MessageDigest.getInstance("MD5");

new File(fileName).withInputStream(){is->
	byte[] buffer = new byte[8192]
	int read = 0
		while( (read = is.read(buffer)) > 0) {
			digest.update(buffer, 0, read);
		}
}

byte[] md5sum = digest.digest()
BigInteger bigInt = new BigInteger(1, md5sum)

testRunner.testCase.testSuite.setPropertyValue('SendMD5_M1', bigInt.toString(16));</script></con:config></con:testStep><con:testStep type="groovy" name="Create MD5 Encoder File 2"><con:settings/><con:config><script>import java.security.MessageDigest;

def fileName = context.findProperty('SenderPath') + File.separator +
	context.findProperty('FileNameMulti2');

MessageDigest digest = MessageDigest.getInstance("MD5");

new File(fileName).withInputStream(){is->
	byte[] buffer = new byte[8192]
	int read = 0
		while( (read = is.read(buffer)) > 0) {
			digest.update(buffer, 0, read);
		}
}

byte[] md5sum = digest.digest()
BigInteger bigInt = new BigInteger(1, md5sum)

testRunner.testCase.testSuite.setPropertyValue('SendMD5_M2', bigInt.toString(16));</script></con:config></con:testStep><con:testStep type="groovy" name="Update gateway.properties"><con:settings/><con:config><script>def saveDir = context.findProperty('ReceiverPath');

nhinc.FileUtils.updateProperty(context.findProperty('GatewayPropDir'), "gateway.properties", "ParsePayloadAsFileURIOutbound", "true", log);
nhinc.FileUtils.updateProperty(context.findProperty('GatewayPropDir'), "gateway.properties", "PayloadSaveDirectory", "${saveDir}", log);
nhinc.FileUtils.updateProperty(context.findProperty('GatewayPropDir'), "gateway.properties", "SavePayloadToFileInbound", "true", log);
</script></con:config></con:testStep><con:properties/></con:testCase><con:properties><con:property><con:name>SenderPath</con:name><con:value/></con:property><con:property><con:name>FileName</con:name><con:value>payload_test.txt</con:value></con:property><con:property><con:name>ReceiverPath</con:name><con:value/></con:property><con:property><con:name>MultiPayloadSize</con:name><con:value>1000000</con:value></con:property><con:property><con:name>FileNameMulti1</con:name><con:value>payload_testM1.txt</con:value></con:property><con:property><con:name>FileNameMulti2</con:name><con:value>payload_testM2.txt</con:value></con:property><con:property><con:name>EncodedPathM1</con:name><con:value/></con:property><con:property><con:name>EncodedPathM2</con:name><con:value/></con:property></con:properties></con:testSuite><con:testSuite name="Remote Setup"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Setup" searchProperties="true" id="89d6c074-3675-4412-923f-223600664a75"><con:settings/><con:testStep type="groovy" name="Backup gateway.properties"><con:settings/><con:config><script>nhinc.FileUtils.backupConfiguration(context.findProperty('GatewayPropDir'), log);</script></con:config></con:testStep><con:testStep type="groovy" name="Backup DR Spring Proxy"><con:settings/><con:config><script>def SpringFile = new File(context.findProperty('GatewayPropDir') + "/" +
	"DocumentRetrieveProxyConfig.xml");

new File(context.findProperty('GatewayPropDir') + "/" +
	"DocumentRetrieveProxyConfig.xml.bak") &lt;&lt; SpringFile.asWritable();

SpringFile.delete();</script></con:config></con:testStep><con:testStep type="groovy" name="Update gateway.properties"><con:settings/><con:config><script>def saveDir = context.findProperty('ReceiverPath');

nhinc.FileUtils.updateProperty(context.findProperty('GatewayPropDir'), "gateway.properties", "ParsePayloadAsFileURIOutbound", "true", log);
nhinc.FileUtils.updateProperty(context.findProperty('GatewayPropDir'), "gateway.properties", "PayloadSaveDirectory", "${saveDir}", log);
nhinc.FileUtils.updateProperty(context.findProperty('GatewayPropDir'), "gateway.properties", "SavePayloadToFileInbound", "true", log);
</script></con:config></con:testStep><con:testStep type="groovy" name="Update DR Spring Proxy"><con:settings/><con:config><script><![CDATA[def springProxyFile = new File (context.findProperty('GatewayPropDir') +
	"/" + "DocumentRetrieveProxyConfig.xml");
def springProxyBak = context.findProperty('GatewayPropDir') +
	"/" + "DocumentRetrieveProxyConfig.xml.bak";

def aliasLine = '<alias alias="adapterdocumentrepository" name="adapterdocumentrepositorywsunsecured" />'
def propertyLine = '<property name="document" value="ZmlsZTovLy9Vc2Vycy9ha29uZy9wYXlsb2Fkcy8xRy56aXA=" />'
def aliasReplace = '<alias alias="adapterdocumentrepository" name="adapterdocumentrepositorybean" />'
def propertyReplace = '<property name="document" value="file:///' +
	context.findProperty('SenderPath') + "/" +
	context.findProperty('FileName') + '" />';
def ln = System.getProperty('line.separator')

def f = new File(springProxyBak)
f.eachLine() {
    line ->
    if(line.contains(aliasLine)){
    		springProxyFile << (aliasReplace + ln);
    }else if(line.contains(propertyLine)){
    		springProxyFile << (propertyReplace + ln);
    }else{
    		springProxyFile << (line + ln);
    }
}]]></script></con:config></con:testStep><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Restore" searchProperties="true" id="f55e142b-f203-4967-9cff-ce1b537a5058"><con:settings/><con:testStep type="groovy" name="Restore gateway.properties"><con:settings/><con:config><script>nhinc.FileUtils.restoreConfiguration(context.findProperty('GatewayPropDir'), log);
</script></con:config></con:testStep><con:testStep type="groovy" name="Restore DRProxyConfig"><con:settings/><con:config><script>def SpringFileBak = new File(context.findProperty('GatewayPropDir') + "/" +
	"DocumentRetrieveProxyConfig.xml.bak");
if(SpringFileBak.exists()){
	def SpringFile = new File(context.findProperty('GatewayPropDir') + "/" +
	"DocumentRetrieveProxyConfig.xml");

	SpringFile.delete();
	SpringFile &lt;&lt; SpringFileBak.asWritable();
	SpringFileBak.delete();
}</script></con:config></con:testStep><con:properties/></con:testCase><con:properties><con:property><con:name>FileName</con:name><con:value>payload_test.txt</con:value></con:property><con:property><con:name>SenderPath</con:name><con:value/></con:property><con:property><con:name>ReceiverPath</con:name><con:value/></con:property></con:properties></con:testSuite><con:properties><con:property><con:name>GatewayPropDir</con:name><con:value>D:/glassfish3/glassfish/domains/domain1/config/nhin</con:value></con:property><con:property><con:name>AAMappingDB</con:name><con:value>assigningauthoritydb</con:value></con:property><con:property><con:name>AAMappingTable</con:name><con:value>aa_to_home_community_mapping</con:value></con:property><con:property><con:name>AsyncMsgDB</con:name><con:value>asyncmsgs</con:value></con:property><con:property><con:name>AsyncMsgTable</con:name><con:value>asyncmsgrepo</con:value></con:property><con:property><con:name>AuditRepoDB</con:name><con:value>auditrepo</con:value></con:property><con:property><con:name>AuditRepoTable</con:name><con:value>auditrepository</con:value></con:property><con:property><con:name>BirthTime</con:name><con:value>19630804</con:value></con:property><con:property><con:name>City</con:name><con:value>Melbourne</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DBHost</con:name><con:value>localhost</con:value></con:property><con:property><con:name>DBPass</con:name><con:value>nhincpass</con:value></con:property><con:property><con:name>DBPort</con:name><con:value>3306</con:value></con:property><con:property><con:name>DBUser</con:name><con:value>nhincuser</con:value></con:property><con:property><con:name>DeferredPatientDiscoveryReqMessageID</con:name><con:value>uuid:6666666666.66666.666.66</con:value></con:property><con:property><con:name>DOB</con:name><con:value>19800516</con:value></con:property><con:property><con:name>DQDocID</con:name><con:value>1.123401.55555</con:value></con:property><con:property><con:name>DQPatientID</con:name><con:value>D123401</con:value></con:property><con:property><con:name>DRDocID</con:name><con:value>1.123407.777777</con:value></con:property><con:property><con:name>DRRepoID</con:name><con:value>1</con:value></con:property><con:property><con:name>DynamicDQDocID</con:name><con:value>103.8.9284320.020.3590.75^1266324032288</con:value></con:property><con:property><con:name>Endpoint-DocQuery</con:name><con:value>http://localhost:8080/Gateway/DocumentQuery/2_0/EntityService/EntityDocQueryUnsecured</con:value></con:property><con:property><con:name>Endpoint-DocRetrieve</con:name><con:value>http://localhost:8080/Gateway/DocumentRetrieve/2_0/EntityService/EntityDocRetrieve</con:value></con:property><con:property><con:name>Endpoint-DSDeferredResp</con:name><con:value>http://localhost:8080/Gateway/DocumentSubmission/1_1/EntityService/EntityDocSubmissionDeferredResponseUnsecured</con:value></con:property><con:property><con:name>Endpoint-EntityAdminDist</con:name><con:value>http://localhost:8080/Gateway/AdminDistribution/1_0/AdministrativeDistribution_Service</con:value></con:property><con:property><con:name>Endpoint-EntityXDRRequest</con:name><con:value>http://localhost:8080/Gateway/DocumentSubmission/1_1/EntityService/EntityDocSubmissionDeferredRequestUnsecured</con:value></con:property><con:property><con:name>Endpoint-Notify</con:name><con:value>http://localhost:8080/Gateway/HIEM/2_0/EntityNotificationConsumer</con:value></con:property><con:property><con:name>Endpoint-PatientDiscovery</con:name><con:value>http://localhost:8080/Gateway/PatientDiscovery/1_0/EntityPatientDiscovery</con:value></con:property><con:property><con:name>Endpoint-PatientDiscoveryAsyncReq</con:name><con:value>http://localhost:8080/Gateway/PatientDiscovery/1_0/EntityService/EntityPatientDiscoveryDeferredRequestUnsecured</con:value></con:property><con:property><con:name>Endpoint-PatientDiscoveryAsyncResp</con:name><con:value>http://localhost:8080/Gateway/PatientDiscovery/1_0/EntityService/EntityPatientDiscoveryDeferredResponseUnsecured</con:value></con:property><con:property><con:name>Endpoint-Subscribe</con:name><con:value>http://localhost:8080/Gateway/HIEM/2_0/EntityNotificationProducer</con:value></con:property><con:property><con:name>Endpoint-Unsubscribe</con:name><con:value>http://localhost:8080/Gateway/HIEM/2_0/EntitySubscriptionManager</con:value></con:property><con:property><con:name>Endpoint-XDREntity</con:name><con:value>http://localhost:8080/Gateway/DocumentSubmission/1_1/EntityService/EntityDocSubmissionUnsecured</con:value></con:property><con:property><con:name>ExpirationDate</con:name><con:value>20100520</con:value></con:property><con:property><con:name>FamilyName</con:name><con:value>Younger</con:value></con:property><con:property><con:name>Gender</con:name><con:value>M</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>Gallow</con:value></con:property><con:property><con:name>LocalAA</con:name><con:value>1.1</con:value></con:property><con:property><con:name>LocalHCDescription</con:name><con:value>InternalTest1</con:value></con:property><con:property><con:name>LocalHCID</con:name><con:value>1.1</con:value></con:property><con:property><con:name>LocalPatientID</con:name><con:value>D123401</con:value></con:property><con:property><con:name>NotificationEndpoint</con:name><con:value>https://localhost:8181/Gateway/HIEM/2_0/NhinService/NotificationConsumerService/HiemNotify</con:value></con:property><con:property><con:name>NotifySubscriptionID</con:name><con:value>086d5d5d-2260-4fed-afcf-4287d1472593</con:value></con:property><con:property><con:name>NotifySubscriptionManagerEndpointAddress</con:name><con:value>https://localhost:8181/Gateway/HIEM/2_0/NhinService/SubscriptionManagerService/HiemUnsubscribe</con:value></con:property><con:property><con:name>PatientCorrelationDB</con:name><con:value>patientcorrelationdb</con:value></con:property><con:property><con:name>PatientCorrelationTable</con:name><con:value>correlatedidentifiers</con:value></con:property><con:property><con:name>project.name</con:name><con:value>EntityValidation</con:value></con:property><con:property><con:name>PurposeOfDisclosure</con:name><con:value>Mental</con:value></con:property><con:property><con:name>RemoteAA</con:name><con:value>2.2</con:value></con:property><con:property><con:name>RemoteHCDescription</con:name><con:value>InternalTest1</con:value></con:property><con:property><con:name>RemoteHCID</con:name><con:value>2.2</con:value></con:property><con:property><con:name>RemotePatientID</con:name><con:value>D123401</con:value></con:property><con:property><con:name>SSN</con:name><con:value>123456789</con:value></con:property><con:property><con:name>State</con:name><con:value>FL</con:value></con:property><con:property><con:name>StreetAddress</con:name><con:value>123 Johnson Rd</con:value></con:property><con:property><con:name>SubjectID</con:name><con:value>1111</con:value></con:property><con:property><con:name>SubscribePatientID</con:name><con:value>D123401</con:value></con:property><con:property><con:name>SubscriptionDB</con:name><con:value>subscriptionrepository</con:value></con:property><con:property><con:name>SubscriptionEndpoint</con:name><con:value>https://localhost:8181/Gateway/HIEM/2_0/NhinService/NotificationProducerService/HiemSubscription</con:value></con:property><con:property><con:name>SubscriptionManagerEndpointAddress</con:name><con:value>https://localhost:8181/Gateway/HIEM/2_0/NhinService/SubscriptionManagerService/HiemUnsubscribe</con:value></con:property><con:property><con:name>SubscriptionTable</con:name><con:value>subscription</con:value></con:property><con:property><con:name>UniquePatientId</con:name><con:value>1111^^^&amp;amp;1.1&amp;amp;ISO</con:value></con:property><con:property><con:name>UnSubscriptionID</con:name><con:value>f5829de5-611a-4d0c-a845-de0df3f17044</con:value></con:property><con:property><con:name>ZipCode</con:name><con:value>12345</con:value></con:property><con:property><con:name>Endpoint-DocumentSubmission</con:name><con:value>http://localhost:8080/Gateway/DocumentSubmission/2_0/EntityService/PassthruDocSubmissionUnsecured</con:value></con:property><con:property><con:name>Endpoint-MsgProxyDocSubmissionDefReq</con:name><con:value>http://localhost:8080/Gateway/DocumentSubmission/2_0/EntityService/PassthruDocSubmissionDeferredRequestUnsecured</con:value></con:property><con:property><con:name>Endpoint-MsgProxyAdminDist</con:name><con:value>http://localhost:8080/Gateway/AdminDistribution/2_0/MsgProxy/NhincProxyAdminDist</con:value></con:property><con:property><con:name>Endpoint-DRMessageProxy</con:name><con:value>http://localhost:8080/Gateway/DocumentRetrieve/3_0/NhincProxyDocRetrieveUnsecured</con:value></con:property></con:properties><con:afterLoadScript>com.eviware.soapui.impl.wsdl.testcase.WsdlTestRunContext.metaClass.findProperty = { propertyName ->
return delegate.getProperty(propertyName) ?:
delegate.testCase.getPropertyValue(propertyName) ?:
delegate.testCase.testSuite.getPropertyValue(propertyName) ?:
delegate.testCase.testSuite.project.getPropertyValue(propertyName)
}</con:afterLoadScript><con:wssContainer/><con:sensitiveInformation/></con:soapui-project>
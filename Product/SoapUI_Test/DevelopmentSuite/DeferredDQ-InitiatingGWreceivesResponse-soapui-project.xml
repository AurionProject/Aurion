<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project name="DeferredDQ-InitiatingGWreceivesResponse" resourceRoot="" soapui-version="4.0.0" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config">
  <con:settings/>
  <con:interface xsi:type="con:WsdlInterface" wsaVersion="NONE" name="NhincProxyDocQueryDeferredResponseBindingSoap" type="wsdl" bindingName="{urn:gov:hhs:fha:nhinc:nhincproxydocquerydeferredresponse}NhincProxyDocQueryDeferredResponseBindingSoap" soapVersion="1_2" anonymous="optional" definition="file:/C:/Projects/NHINC/Current/Product/Production/Common/Interfaces/src/wsdl/NhincProxyDocQueryDeferredResponse.wsdl" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <con:settings/>
    
    <con:endpoints>
      <con:endpoint>${#Project#Endpoint-DeferredDocQuery}</con:endpoint>
      <con:endpoint>http://localhost:${HttpDefaultPort}/NhinConnect/NhincProxyDocQueryDeferredResponse</con:endpoint>
    </con:endpoints>
    <con:operation isOneWay="false" action="urn:RespondingGateway_CrossGatewayQuery" name="RespondingGateway_CrossGatewayQuery" bindingOperationName="RespondingGateway_CrossGatewayQuery" type="Request-Response" outputName="RespondingGateway_CrossGatewayQueryResponse" inputName="RespondingGateway_CrossGatewayQueryRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional">
      <con:settings/>
      
    </con:operation>
  </con:interface>
  <con:interface xsi:type="con:WsdlInterface" wsaVersion="NONE" name="AdapterPolicyEngineBindingSoap" type="wsdl" bindingName="{urn:gov:hhs:fha:nhinc:adapterpolicyengine}AdapterPolicyEngineBindingSoap" soapVersion="1_2" anonymous="optional" definition="file:/C:/Projects/nhinc/Current/Product/Production/Common/Interfaces/src/wsdl/AdapterPolicyEngine.wsdl" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <con:settings/>
    
    <con:endpoints>
      <con:endpoint>http://localhost:${HttpDefaultPort}/NhinConnect/AdapterPolicyEngine</con:endpoint>
    </con:endpoints>
    <con:operation isOneWay="false" action="urn:CheckPolicy" name="CheckPolicy" bindingOperationName="CheckPolicy" type="Request-Response" outputName="CheckPolicyResponse" inputName="CheckPolicyRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional">
      <con:settings/>
      
    </con:operation>
  </con:interface>
  <con:interface xsi:type="con:WsdlInterface" wsaVersion="NONE" name="NhincProxyAuditLogQueryBindingSoap" type="wsdl" bindingName="{urn:gov:hhs:fha:nhinc:nhincproxyauditlogquery}NhincProxyAuditLogQueryBindingSoap" soapVersion="1_2" anonymous="optional" definition="file:/C:/Projects/NHINC/Current/Product/Production/Common/Interfaces/src/wsdl/NhincProxyAuditLogQuery.wsdl" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <con:settings/>
    
    <con:endpoints>
      <con:endpoint>http://172.16.50.47/NhinConnect/NhincProxyAuditQuery</con:endpoint>
      <con:endpoint>http://localhost:${NhincHttpPort}/NhinConnect/NhincProxyAuditLogQuery</con:endpoint>
    </con:endpoints>
    <con:operation isOneWay="false" action="urn:findAuditEvents" name="findAuditEvents" bindingOperationName="findAuditEvents" type="Request-Response" outputName="findAuditEventsResponse" inputName="findAuditEventsRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional">
      <con:settings/>
    </con:operation>
  </con:interface>
  <con:testSuite name="DeferredDQ-InitiatingGWreceivesResponse">
    <con:settings/>
    <con:runType>SEQUENTIAL</con:runType>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Response passes Policy Check" searchProperties="true" id="dca9bd7e-a654-4cb1-a3cc-c6d50dd8f349">
      <con:settings/>
      <con:testStep type="groovy" name="Set PolicyEngine Mock">
        <con:settings/>
        <con:config>
          <script>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

//def destConfigFileLocation = context.findProperty("NHINGatewayConfigDir");
def destConfigFileLocation = System.env['NHINC_PROPERTIES_DIR'];
def NHINGatewayHost = context.findProperty("NHINGatewayHost");
def mockHost = context.findProperty("mockHost");
def mockPEURL = "http://" + mockHost + ":18089/mockPE";
def LocalHCID = context.findProperty( "LocalHCID" );

FileUtils.CreateOrUpdateConnection(destConfigFileLocation, LocalHCID, "policyengineservice", mockPEURL, context, log)</script>
        </con:config>
      </con:testStep>
      <con:testStep type="request" name="send request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>NhincProxyDocQueryDeferredResponseBindingSoap</con:interface>
          <con:operation>RespondingGateway_CrossGatewayQuery</con:operation>
          <con:request name="send request">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${#Project#Endpoint-DeferredDocQuery}</con:endpoint>
            <con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:urn="urn:gov:hhs:fha:nhinc:common:nhinccommonproxy" xmlns:urn1="urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0" xmlns:urn2="urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0" xmlns:urn3="urn:gov:hhs:fha:nhinc:common:nhinccommon">
   <soap:Header xmlns:add="http://www.w3.org/2005/08/addressing">
      <add:Action>urn:gov:hhs:fha:nhinc:nhincproxyxdr:async:response:ProvideAndRegisterDocumentSet-bAsyncResponse_Request</add:Action>
      <add:MessageID>uuid:12bcfc1e-f422-4d1d-af99-ff83d050313e</add:MessageID>
      <add:RelatesTo>uuid:6666666666.66666.666.66</add:RelatesTo>
      <add:To>http://localhost:8080/CONNECTAdapter/EntityProxyService/NhincProxyXDRResponse</add:To>
   </soap:Header>
   <soap:Body>
      <urn:RespondingGateway_CrossGatewayQueryResponse>
         <urn1:AdhocQueryResponse status="urn:oasis:names:tc:ebxml-regrep:ResponseStatusType:Success" xmlns:ns2="urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0" xmlns:ns3="urn:oasis:names:tc:ebxml-regrep:xsd:rs:3.0" xmlns:ns4="urn:oasis:names:tc:ebxml-regrep:xsd:lcm:3.0" xmlns:ns5="urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0" xmlns:ns6="http://www.w3.org/2005/08/addressing" xmlns:ns7="http://docs.oasis-open.org/wsn/b-2" xmlns:ns8="urn:ihe:iti:xds-b:2007" xmlns:ns9="urn:gov:hhs:fha:nhinc:common:subscriptionb2overridefordocuments" xmlns:ns10="http://docs.oasis-open.org/wsrf/bf-2" xmlns:ns11="http://docs.oasis-open.org/wsn/t-1" xmlns:ns12="http://schemas.xmlsoap.org/ws/2004/08/addressing" xmlns:ns13="urn:gov:hhs:fha:nhinc:common:nhinccommon" xmlns:ns14="urn:gov:hhs:fha:nhinc:common:nhinccommonproxy" xmlns:ns15="http://nhinc.services.com/schema/auditmessage" xmlns:ns16="urn:oasis:names:tc:emergency:EDXL:DE:1.0" xmlns:ns17="http://www.hhs.gov/healthit/nhin/cdc" xmlns:ns18="urn:gov:hhs:fha:nhinc:common:subscriptionb2overrideforcdc" xmlns:ns19="urn:gov:hhs:fha:nhinc:common:subscription">
            <urn2:RegistryObjectList>
               <urn2:ExtrinsicObject isOpaque="false" mimeType="text/xml" status="Active" objectType="urn:uuid:7edca82f-054d-47f2-a032-9b2a5b5186c1" home="urn:oid:1.1" id="urn:uuid:49a680fd-5bdc-48f3-add2-1bceae9c7516">
                  <urn2:Slot name="creationTime">
                     <urn2:ValueList>
                        <urn2:Value>20080617124906</urn2:Value>
                     </urn2:ValueList>
                  </urn2:Slot>
                  <urn2:Slot name="hash">
                     <urn2:ValueList>
                        <urn2:Value>be56ce49a2a021c5c88bd4a3eef617ce5b94e002</urn2:Value>
                     </urn2:ValueList>
                  </urn2:Slot>
                  <urn2:Slot name="intendedRecipient">
                     <urn2:ValueList>
                        <urn2:Value>Scott Borst</urn2:Value>
                     </urn2:ValueList>
                  </urn2:Slot>
                  <urn2:Slot name="languageCode">
                     <urn2:ValueList>
                        <urn2:Value>en-US</urn2:Value>
                     </urn2:ValueList>
                  </urn2:Slot>
                  <urn2:Slot name="legalAuthenticator">
                     <urn2:ValueList>
                        <urn2:Value>legal</urn2:Value>
                     </urn2:ValueList>
                  </urn2:Slot>
                  <urn2:Slot name="serviceStartTime">
                     <urn2:ValueList>
                        <urn2:Value>19990320050000</urn2:Value>
                     </urn2:ValueList>
                  </urn2:Slot>
                  <urn2:Slot name="serviceStopTime">
                     <urn2:ValueList>
                        <urn2:Value>20080101050000</urn2:Value>
                     </urn2:ValueList>
                  </urn2:Slot>
                  <urn2:Slot name="size">
                     <urn2:ValueList>
                        <urn2:Value>30845</urn2:Value>
                     </urn2:ValueList>
                  </urn2:Slot>
                  <urn2:Slot name="sourcePatientId">
                     <urn2:ValueList>
                        <urn2:Value>D123401</urn2:Value>
                     </urn2:ValueList>
                  </urn2:Slot>
                  <urn2:Slot name="sourcePatientInfo">
                     <urn2:ValueList>
                        <urn2:Value>PID-3|pid1^^^domain</urn2:Value>
                        <urn2:Value>PID-5|Younger^Gallow^^^</urn2:Value>
                        <urn2:Value>PID-7|19990627</urn2:Value>
                        <urn2:Value>PID-8|M</urn2:Value>
                        <urn2:Value>PID-11|1111 Main Street^^Kingsport^TN^37662^US</urn2:Value>
                     </urn2:ValueList>
                  </urn2:Slot>
                  <urn2:Slot name="URI">
                     <urn2:ValueList>
                        <urn2:Value>1.123401.11111</urn2:Value>
                     </urn2:ValueList>
                  </urn2:Slot>
                  <urn2:Slot name="repositoryUniqueId">
                     <urn2:ValueList>
                        <urn2:Value>1</urn2:Value>
                     </urn2:ValueList>
                  </urn2:Slot>
                  <urn2:Name>
                     <urn2:LocalizedString value="Younger CONNECT TESTGATEWAY Document 1"/>
                  </urn2:Name>
                  <urn2:Description>
                     <urn2:LocalizedString value="Document 1 Younder CONNECT TESTGATEWAY comments"/>
                  </urn2:Description>
                  <urn2:Classification nodeRepresentation="" classifiedObject="urn:uuid:49a680fd-5bdc-48f3-add2-1bceae9c7516" classificationScheme="urn:uuid:93606bcf-9494-43ec-9b4e-a7748d1a838d" id="">
                     <urn2:Slot name="authorPerson">
                        <urn2:ValueList>
                           <urn2:Value>Dr. Joseph Hoodwink</urn2:Value>
                        </urn2:ValueList>
                     </urn2:Slot>
                     <urn2:Slot name="authorInstitution">
                        <urn2:ValueList>
                           <urn2:Value>Main Children's Hospital</urn2:Value>
                        </urn2:ValueList>
                     </urn2:Slot>
                     <urn2:Slot name="authorRole">
                        <urn2:ValueList>
                           <urn2:Value>Primary Care Provider</urn2:Value>
                        </urn2:ValueList>
                     </urn2:Slot>
                     <urn2:Slot name="authorSpecialty">
                        <urn2:ValueList>
                           <urn2:Value>Pediatrician</urn2:Value>
                        </urn2:ValueList>
                     </urn2:Slot>
                  </urn2:Classification>
                  <urn2:Classification nodeRepresentation="34133-9" classifiedObject="urn:uuid:49a680fd-5bdc-48f3-add2-1bceae9c7516" classificationScheme="urn:uuid:41a5887f-8865-4c09-adf7-e362475b143a" id="">
                     <urn2:Slot name="codingScheme">
                        <urn2:ValueList>
                           <urn2:Value>2.16.840.1.113883.6.1</urn2:Value>
                        </urn2:ValueList>
                     </urn2:Slot>
                     <urn2:Name>
                        <urn2:LocalizedString value="Summarization of Episode Note"/>
                     </urn2:Name>
                  </urn2:Classification>
                  <urn2:Classification nodeRepresentation="Confidential" classifiedObject="urn:uuid:49a680fd-5bdc-48f3-add2-1bceae9c7516" classificationScheme="urn:uuid:f4f85eac-e6cb-4883-b524-f2705394840f" id="">
                     <urn2:Slot name="codingScheme">
                        <urn2:ValueList>
                           <urn2:Value>Confidential</urn2:Value>
                        </urn2:ValueList>
                     </urn2:Slot>
                     <urn2:Name>
                        <urn2:LocalizedString value="Confidential"/>
                     </urn2:Name>
                  </urn2:Classification>
                  <urn2:Classification nodeRepresentation="CDAR2/IHE 1.0" classifiedObject="urn:uuid:49a680fd-5bdc-48f3-add2-1bceae9c7516" classificationScheme="urn:uuid:a09d5840-386c-46f2-b5ad-9c3699a4309d" id="">
                     <urn2:Slot name="codingScheme">
                        <urn2:ValueList>
                           <urn2:Value>formatCodeScheme_value</urn2:Value>
                        </urn2:ValueList>
                     </urn2:Slot>
                     <urn2:Name>
                        <urn2:LocalizedString value="formatCodeDisplayName_value"/>
                     </urn2:Name>
                  </urn2:Classification>
                  <urn2:Classification nodeRepresentation="UTF-8" classifiedObject="urn:uuid:49a680fd-5bdc-48f3-add2-1bceae9c7516" classificationScheme="urn:uuid:f33fb8ac-18af-42cc-ae0e-ed0b0bdb91e1" id="">
                     <urn2:Slot name="codingScheme">
                        <urn2:ValueList>
                           <urn2:Value>UTF-8</urn2:Value>
                        </urn2:ValueList>
                     </urn2:Slot>
                     <urn2:Name>
                        <urn2:LocalizedString value="UTF-8"/>
                     </urn2:Name>
                  </urn2:Classification>
                  <urn2:Classification nodeRepresentation="test" classifiedObject="urn:uuid:49a680fd-5bdc-48f3-add2-1bceae9c7516" classificationScheme="urn:uuid:cccf5598-8b07-4b77-a05e-ae952c785ead" id="">
                     <urn2:Slot name="codingScheme">
                        <urn2:ValueList>
                           <urn2:Value>test</urn2:Value>
                        </urn2:ValueList>
                     </urn2:Slot>
                     <urn2:Name>
                        <urn2:LocalizedString value="test"/>
                     </urn2:Name>
                  </urn2:Classification>
                  <urn2:Classification nodeRepresentation="test" classifiedObject="urn:uuid:49a680fd-5bdc-48f3-add2-1bceae9c7516" classificationScheme="urn:uuid:f0306f51-975f-434e-a61c-c59651d33983" id="">
                     <urn2:Slot name="codingScheme">
                        <urn2:ValueList>
                           <urn2:Value>test</urn2:Value>
                        </urn2:ValueList>
                     </urn2:Slot>
                     <urn2:Name>
                        <urn2:LocalizedString value="test"/>
                     </urn2:Name>
                  </urn2:Classification>
                  <urn2:ExternalIdentifier value="1.123401.11111" identificationScheme="urn:uuid:2e82c1f6-a085-4c72-9da3-8640a32e42ab" registryObject="urn:uuid:49a680fd-5bdc-48f3-add2-1bceae9c7516" id="">
                     <urn2:Name>
                        <urn2:LocalizedString value="XDSDocumentEntry.uniqueId"/>
                     </urn2:Name>
                  </urn2:ExternalIdentifier>
                  <urn2:ExternalIdentifier value="'D123401^^^&amp;1.1&amp;ISO'" identificationScheme="urn:uuid:58a6f841-87b3-4a3e-92fd-a8ffeff98427" registryObject="urn:uuid:49a680fd-5bdc-48f3-add2-1bceae9c7516" id="">
                     <urn2:Name>
                        <urn2:LocalizedString value="XDSDocumentEntry.patientId"/>
                     </urn2:Name>
                  </urn2:ExternalIdentifier>
               </urn2:ExtrinsicObject>
            </urn2:RegistryObjectList>
         </urn1:AdhocQueryResponse>
         <urn:assertion>
            <urn3:address xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
               <urn3:addressType>
                  <urn3:code>AddrCode</urn3:code>
                  <urn3:codeSystem>AddrCodeSyst</urn3:codeSystem>
                  <urn3:codeSystemName>AddrCodeSystName</urn3:codeSystemName>
                  <urn3:codeSystemVersion>1.0</urn3:codeSystemVersion>
                  <urn3:displayName>AddrCode</urn3:displayName>
                  <urn3:originalText>AddrCode</urn3:originalText>
               </urn3:addressType>
               <urn3:city>AddrCity</urn3:city>
               <urn3:country>AddrCountry</urn3:country>
               <urn3:state>AddrState</urn3:state>
               <urn3:streetAddress>AddrStreet</urn3:streetAddress>
               <urn3:zipCode>AddrZip</urn3:zipCode>
            </urn3:address>
            <urn3:dateOfBirth xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">06/04/1959 05:21:00</urn3:dateOfBirth>
            <urn3:explanationNonClaimantSignature xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">Electronic</urn3:explanationNonClaimantSignature>
            <urn3:haveSecondWitnessSignature xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">false</urn3:haveSecondWitnessSignature>
            <urn3:haveSignature xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">false</urn3:haveSignature>
            <urn3:haveWitnessSignature xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">false</urn3:haveWitnessSignature>
            <urn3:homeCommunity xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
               <urn3:description>${#Project#RemoteHCDescription}</urn3:description>
               <urn3:homeCommunityId>${#Project#RemoteHCID}</urn3:homeCommunityId>
               <urn3:name>${#Project#RemoteHCDescription}</urn3:name>
            </urn3:homeCommunity>
            <urn3:personName xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
               <urn3:familyName>Smith</urn3:familyName>
               <urn3:givenName>Sandy</urn3:givenName>
               <urn3:nameType>
                  <urn3:code>nameCode</urn3:code>
                  <urn3:codeSystem>nameCodeSyst</urn3:codeSystem>
                  <urn3:codeSystemName>nameCodeSystName</urn3:codeSystemName>
                  <urn3:codeSystemVersion>1.0</urn3:codeSystemVersion>
                  <urn3:displayName>nameCode</urn3:displayName>
                  <urn3:originalText>nameCode</urn3:originalText>
               </urn3:nameType>
               <urn3:secondNameOrInitials>S</urn3:secondNameOrInitials>
               <urn3:fullName>Sandy S. Smith</urn3:fullName>
            </urn3:personName>
            <urn3:phoneNumber xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
               <urn3:areaCode>321</urn3:areaCode>
               <urn3:countryCode>1</urn3:countryCode>
               <urn3:extension>5436</urn3:extension>
               <urn3:localNumber>253-6849</urn3:localNumber>
               <urn3:phoneNumberType>
                  <urn3:code>phoneCode</urn3:code>
                  <urn3:codeSystem>phoneCodeSyst</urn3:codeSystem>
                  <urn3:codeSystemName>phoneCodeSystName</urn3:codeSystemName>
                  <urn3:codeSystemVersion>1.0</urn3:codeSystemVersion>
                  <urn3:displayName>phoneCode</urn3:displayName>
                  <urn3:originalText>phoneCode</urn3:originalText>
               </urn3:phoneNumberType>
            </urn3:phoneNumber>
            <urn3:secondWitnessAddress xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
               <urn3:addressType>
                  <urn3:code>AddrCode</urn3:code>
                  <urn3:codeSystem>AddrCodeSyst</urn3:codeSystem>
                  <urn3:codeSystemName>AddrCodeSystName</urn3:codeSystemName>
                  <urn3:codeSystemVersion>1.0</urn3:codeSystemVersion>
                  <urn3:displayName>AddrCode</urn3:displayName>
                  <urn3:originalText>AddrCode</urn3:originalText>
               </urn3:addressType>
               <urn3:city>Addr2City</urn3:city>
               <urn3:country>Addr2Country</urn3:country>
               <urn3:state>Addr2State</urn3:state>
               <urn3:streetAddress>Addr2Street</urn3:streetAddress>
               <urn3:zipCode>Addr2Zip</urn3:zipCode>
            </urn3:secondWitnessAddress>
            <urn3:secondWitnessName xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
               <urn3:familyName>Smith</urn3:familyName>
               <urn3:givenName>Sammy</urn3:givenName>
               <urn3:nameType>
                  <urn3:code>nameCode</urn3:code>
                  <urn3:codeSystem>nameCodeSyst</urn3:codeSystem>
                  <urn3:codeSystemName>nameCodeSystName</urn3:codeSystemName>
                  <urn3:codeSystemVersion>1.0</urn3:codeSystemVersion>
                  <urn3:displayName>nameCode</urn3:displayName>
                  <urn3:originalText>nameCode</urn3:originalText>
               </urn3:nameType>
               <urn3:secondNameOrInitials>s</urn3:secondNameOrInitials>
               <urn3:fullName>Sammy S. Smith</urn3:fullName>
            </urn3:secondWitnessName>
            <urn3:secondWitnessPhone xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
               <urn3:areaCode>321</urn3:areaCode>
               <urn3:countryCode>1</urn3:countryCode>
               <urn3:extension>5424</urn3:extension>
               <urn3:localNumber>542-6823</urn3:localNumber>
               <urn3:phoneNumberType>
                  <urn3:code>phoneCode</urn3:code>
                  <urn3:codeSystem>phoneCodeSyst</urn3:codeSystem>
                  <urn3:codeSystemName>phoneCodeSystName</urn3:codeSystemName>
                  <urn3:codeSystemVersion>1.0</urn3:codeSystemVersion>
                  <urn3:displayName>phoneCode</urn3:displayName>
                  <urn3:originalText>phoneCode</urn3:originalText>
               </urn3:phoneNumberType>
            </urn3:secondWitnessPhone>
            <urn3:SSN xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">253-98-7546</urn3:SSN>
            <urn3:uniquePatientId xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">500000000^^^&amp;1.1&amp;ISO</urn3:uniquePatientId>
            <urn3:witnessAddress xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
               <urn3:addressType>
                  <urn3:code>addrCode</urn3:code>
                  <urn3:codeSystem>addrCodeSyst</urn3:codeSystem>
                  <urn3:codeSystemName>addrCodeSystName</urn3:codeSystemName>
                  <urn3:codeSystemVersion>1.0</urn3:codeSystemVersion>
                  <urn3:displayName>addrCode</urn3:displayName>
                  <urn3:originalText>addrCode</urn3:originalText>
               </urn3:addressType>
               <urn3:city>Burnell</urn3:city>
               <urn3:country>USA</urn3:country>
               <urn3:state>FL</urn3:state>
               <urn3:streetAddress>825 North</urn3:streetAddress>
               <urn3:zipCode>32184</urn3:zipCode>
            </urn3:witnessAddress>
            <urn3:witnessName xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
               <urn3:familyName>Smith</urn3:familyName>
               <urn3:givenName>Scott</urn3:givenName>
               <urn3:nameType>
                  <urn3:code>nameCode</urn3:code>
                  <urn3:codeSystem>nameCodeSyst</urn3:codeSystem>
                  <urn3:codeSystemName>nameCodeSystName</urn3:codeSystemName>
                  <urn3:codeSystemVersion>1.0</urn3:codeSystemVersion>
                  <urn3:displayName>nameCode</urn3:displayName>
                  <urn3:originalText>nameCode</urn3:originalText>
               </urn3:nameType>
               <urn3:secondNameOrInitials>S.</urn3:secondNameOrInitials>
               <urn3:fullName>Scott S. Smith</urn3:fullName>
            </urn3:witnessName>
            <urn3:witnessPhone xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
               <urn3:areaCode>321</urn3:areaCode>
               <urn3:countryCode>1</urn3:countryCode>
               <urn3:extension>8432</urn3:extension>
               <urn3:localNumber>985-2239</urn3:localNumber>
               <urn3:phoneNumberType>
                  <urn3:code>phoneCode</urn3:code>
                  <urn3:codeSystem>phoneCodeSyst</urn3:codeSystem>
                  <urn3:codeSystemName>phoneCodeSystName</urn3:codeSystemName>
                  <urn3:codeSystemVersion>1.0</urn3:codeSystemVersion>
                  <urn3:displayName>phoneCode</urn3:displayName>
                  <urn3:originalText>phoneCode</urn3:originalText>
               </urn3:phoneNumberType>
            </urn3:witnessPhone>
            <urn3:userInfo xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
               <urn3:personName>
                  <urn3:familyName>Skagerberg</urn3:familyName>
                  <urn3:givenName>Karl</urn3:givenName>
                  <urn3:nameType>
                     <urn3:code>nameCode</urn3:code>
                     <urn3:codeSystem>nameCodeSyst</urn3:codeSystem>
                     <urn3:codeSystemName>nameCodeSystName</urn3:codeSystemName>
                     <urn3:codeSystemVersion>1.0</urn3:codeSystemVersion>
                     <urn3:displayName>nameCode</urn3:displayName>
                     <urn3:originalText>nameCode</urn3:originalText>
                  </urn3:nameType>
                  <urn3:secondNameOrInitials>S</urn3:secondNameOrInitials>
                  <urn3:fullName>Kasrl S. Skagerberg</urn3:fullName>
               </urn3:personName>
               <urn3:userName>kskagerb</urn3:userName>
               <urn3:org>
                  <urn3:description>${#Project#RemoteHCDescription}</urn3:description>
                  <urn3:homeCommunityId>${#Project#RemoteHCID}</urn3:homeCommunityId>
                  <urn3:name>${#Project#RemoteHCDescription}</urn3:name>
               </urn3:org>
               <urn3:roleCoded>
                  <urn3:code>307969004</urn3:code>
                  <urn3:codeSystem>2.16.840.1.113883.6.96</urn3:codeSystem>
                  <urn3:codeSystemName>SNOMED_CT</urn3:codeSystemName>
                  <urn3:codeSystemVersion>1.0</urn3:codeSystemVersion>
                  <urn3:displayName>Public Health</urn3:displayName>
                  <urn3:originalText>Public Health</urn3:originalText>
               </urn3:roleCoded>
            </urn3:userInfo>
            <urn3:authorized xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">true</urn3:authorized>
            <urn3:purposeOfDisclosureCoded xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
               <urn3:code>PUBLICHEALTH</urn3:code>
               <urn3:codeSystem>2.16.840.1.113883.3.18.7.1</urn3:codeSystem>
               <urn3:codeSystemName>nhin-purpose</urn3:codeSystemName>
               <urn3:codeSystemVersion>1.0</urn3:codeSystemVersion>
               <urn3:displayName>Use or disclosure of Psychotherapy Notes</urn3:displayName>
               <urn3:originalText>Use or disclosure of Psychotherapy Notes</urn3:originalText>
            </urn3:purposeOfDisclosureCoded>
            <urn3:samlAuthnStatement xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
               <urn3:authInstant>2009-04-16T13:15:39Z</urn3:authInstant>
               <urn3:sessionIndex>987</urn3:sessionIndex>
               <urn3:authContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:X509</urn3:authContextClassRef>
               <urn3:subjectLocalityAddress>158.147.185.168</urn3:subjectLocalityAddress>
               <urn3:subjectLocalityDNSName>cs.myharris.net</urn3:subjectLocalityDNSName>
            </urn3:samlAuthnStatement>
            <urn3:samlAuthzDecisionStatement xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
               <urn3:decision>Permit</urn3:decision>
               <urn3:resource>https://158.147.185.168:8181/SamlReceiveService/SamlProcessWS</urn3:resource>
               <urn3:action>TestSaml</urn3:action>
               <urn3:evidence>
                  <urn3:assertion>
                     <urn3:id>40df7c0a-ff3e-4b26-baeb-f2910f6d05a9</urn3:id>
                     <urn3:issueInstant>2009-04-16T13:10:39.093Z</urn3:issueInstant>
                     <urn3:version>2.0</urn3:version>
                     <urn3:issuerFormat>urn:oasis:names:tc:SAML:1.1:nameid-format:X509SubjectName</urn3:issuerFormat>
                     <urn3:issuer>CN=SAML User,OU=Harris,O=HITS,L=Melbourne,ST=FL,C=US</urn3:issuer>
                     <urn3:conditions>
                        <urn3:notBefore>2009-04-16T13:10:39.093Z</urn3:notBefore>
                        <urn3:notOnOrAfter>2009-12-31T12:00:00.000Z</urn3:notOnOrAfter>
                     </urn3:conditions>
                     <urn3:accessConsentPolicy>Claim-Ref-1234</urn3:accessConsentPolicy>
                     <urn3:instanceAccessConsentPolicy>Claim-Instance-1</urn3:instanceAccessConsentPolicy>
                  </urn3:assertion>
               </urn3:evidence>
            </urn3:samlAuthzDecisionStatement>
         </urn:assertion>
         <urn:nhinTargetSystem>
            <urn3:homeCommunity>
               <urn3:description>${#Project#LocalHCDescription}</urn3:description>
               <urn3:homeCommunityId>${#Project#LocalHCID}</urn3:homeCommunityId>
               <urn3:name>${#Project#LocalHCDescription}</urn3:name>
            </urn3:homeCommunity>
         </urn:nhinTargetSystem>
      </urn:RespondingGateway_CrossGatewayQueryResponse>
   </soap:Body>
</soap:Envelope>]]></con:request>
            <con:assertion type="SOAP Response"/>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:testStep type="mockresponse" name="Mock Policy Engine">
        <con:settings/>
        <con:config xsi:type="con:MockResponseStep" startStep="send request" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>AdapterPolicyEngineBindingSoap</con:interface>
          <con:operation>CheckPolicy</con:operation>
          <con:path>/mockPE</con:path>
          <con:port>18082</con:port>
          <con:timeout>30000</con:timeout>
          <con:response>
            <con:settings/>
            <con:responseContent><![CDATA[<soapenv:Envelope xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope" xmlns:urn="urn:gov:hhs:fha:nhinc:common:nhinccommonadapter" xmlns:urn1="urn:oasis:names:tc:xacml:2.0:context:schema:os">
   <soapenv:Header/>
   <soapenv:Body>
      <urn:CheckPolicyResponse>
         <urn:response>
            <urn1:Result>
               <urn1:Decision>permit</urn1:Decision>
            </urn1:Result>
         </urn:response>
      </urn:CheckPolicyResponse>
   </soapenv:Body>
</soapenv:Envelope>]]></con:responseContent>
            <con:wsaConfig mustUnderstand="NONE" version="200508"/>
          </con:response>
          <con:assertion type="GroovyScriptAssertion" name="AuthnStatementAuthnInstant " disabled="true">
            <con:configuration>
              <scriptText>def FieldName='authInstant';
def AssertionXpath='//ec:assertion/nc:samlAuthnStatement/nc:authInstant'
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authn-statement:auth-instant';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("send request");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("Request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="AuthnStatementSessionIndex">
            <con:configuration>
              <scriptText>def FieldName='sessionIndex';
def AssertionXpath='//ec:assertion/nc:samlAuthnStatement/nc:sessionIndex';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authn-statement:session-index';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("send request");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("Request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="AuthnStatementAthnContextClassRef " disabled="true">
            <con:configuration>
              <scriptText>def FieldName='authContextClassRef';
def AssertionXpath='//ec:assertion/nc:samlAuthnStatement/nc:authContextClassRef';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authn-statement:auth-context-class-ref';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("send request");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("Request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="AuthnStatementSubjectLocalityAddress ">
            <con:configuration>
              <scriptText>def FieldName='subjectLocalityAddress';
def AssertionXpath='//ec:assertion/nc:samlAuthnStatement/nc:subjectLocalityAddress';
def XacmlAttributeId='urn:oasis:names:tc:xacml:1.0:subject:authn-locality:ip-address';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("send request");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("Request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="AuthnStatementDNSName ">
            <con:configuration>
              <scriptText>def FieldName='subjectLocalityDNSName';
def AssertionXpath='//ec:assertion/nc:samlAuthnStatement/nc:subjectLocalityDNSName';
def XacmlAttributeId='urn:oasis:names:tc:xacml:1.0:subject:authn-locality:dns-name';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("send request");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("Request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="UserPersonName">
            <con:configuration>
              <scriptText>def FieldName='personname';
def AssertionXpath='//ec:assertion/nc:userInfo/nc:userName';
def XacmlAttributeId='urn:oasis:names:tc:xacml:1.0:subject:subject-id';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("send request");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("Request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="UserOrganizationName">
            <con:configuration>
              <scriptText>def FieldName='user organization';
def AssertionXpath='//ec:assertion/nc:userInfo/nc:org/nc:name';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:user-organization-name';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("send request");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("Request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="UserRoleCode">
            <con:configuration>
              <scriptText>def FieldName='user role coded';
def AssertionXpath='//ec:assertion/nc:userInfo/nc:roleCoded/nc:code';
//def XacmlAttributeId='urn:gov:hhs:fha:nhinc:user-role-code';
def XacmlAttributeId='urn:oasis:names:tc:xacml:2.0:subject:role';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("send request");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("Request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="UserRoleCodeSystem ">
            <con:configuration>
              <scriptText>def FieldName='user role system';
def AssertionXpath='//ec:assertion/nc:userInfo/nc:roleCoded/nc:codeSystem';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:user-role-code-system';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("send request");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("Request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="UserRoleCodeSystemName ">
            <con:configuration>
              <scriptText>def FieldName='user role system name';
def AssertionXpath='//ec:assertion/nc:userInfo/nc:roleCoded/nc:codeSystemName';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:user-role-code-system-name';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("send request");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("Request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="UserRoleCodeDiplayName ">
            <con:configuration>
              <scriptText>def FieldName='user role display name';
def AssertionXpath='//ec:assertion/nc:userInfo/nc:roleCoded/nc:displayName';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:user-role-description';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("send request");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("Request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="PurposeForUseCode">
            <con:configuration>
              <scriptText>def FieldName='PurposeForUseCode';
def AssertionXpath='//ec:assertion/nc:purposeOfDisclosureCoded/nc:code';
//def XacmlAttributeId='urn:gov:hhs:fha:nhinc:purpose-of-use-code';
def XacmlAttributeId='urn:oasis:names:tc:xspa:1.0:subject:purposeofuse';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("send request");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("Request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="PurposeForUseCodeSystem">
            <con:configuration>
              <scriptText>def FieldName='PurposeForUseCodeSystem';
def AssertionXpath='//ec:assertion/nc:purposeOfDisclosureCoded/nc:codeSystem';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:purpose-of-use-code-system';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("send request");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("Request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="PurposeForUseCodeSystemName">
            <con:configuration>
              <scriptText>def FieldName='PurposeForUseCodeSystemName';
def AssertionXpath='//ec:assertion/nc:purposeOfDisclosureCoded/nc:codeSystemName';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:purpose-of-use-code-system-name';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("send request");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("Request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="PurposeForUseCodeDisplayName">
            <con:configuration>
              <scriptText>def FieldName='PurposeForUseCodeDisplayName';
def AssertionXpath='//ec:assertion/nc:purposeOfDisclosureCoded/nc:displayName';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:purpose-of-use-display-name';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("send request");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("Request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="AuthzDecisionStatementDecision">
            <con:configuration>
              <scriptText>def FieldName='AuthzDecisionStatementDecision';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:decision';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-decision';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("send request");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("Request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="AuthzDecisionStatementResource">
            <con:configuration>
              <scriptText>def FieldName='AuthzDecisionStatementResource';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:resource';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-resource';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("send request");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("Request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

//def AssertionValue = sourceRequestHolder[AssertionXpath];
//log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

def AssertionValue='https://localhost:8181/CONNECTNhinServicesWeb/DocumentRepositoryXDR_Service';
log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="AuthzDecisionStatementAction">
            <con:configuration>
              <scriptText>def FieldName='AuthzDecisionStatementAction';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:action';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-action';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("send request");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("Request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
//log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);
def ExpectedValue='Execute';
//log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (ExpectedValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="AuthzDecisionStatementEvidenceAssertionID ">
            <con:configuration>
              <scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionID';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:id';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-id';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("send request");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("Request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="AuthzDecisionStatementEvidenceAssertionIssueInstant">
            <con:configuration>
              <scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionIssueInstant';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:issueInstant';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-issue-instant';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("send request");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("Request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="AuthzDecisionStatementEvidenceAssertionVersion">
            <con:configuration>
              <scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionVersion';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:version';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-version';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("send request");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("Request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="AuthzDecisionStatementEvidenceAssertionIssuer">
            <con:configuration>
              <scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionIssuer';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:issuer';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-issuer';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("send request");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("Request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="AuthzDecisionStatementEvidenceAssertionConditionsNotBefore" disabled="true">
            <con:configuration>
              <scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionConditionsNotBefore';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:conditions/nc:notBefore';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-not-before';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("send request");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("Request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
//assert (AssertionValue==XacmlValue);
assert (XacmlValue == '2010-02-25T17:12:31.790Z')

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#date';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="AuthzDecisionStatementEvidenceAssertionConditionsNotOnOrAfter " disabled="true">
            <con:configuration>
              <scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionConditionsNotOnOrAfter';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:conditions/nc:notOnOrAfter';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-not-on-or-after';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("send request");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("Request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
//assert (AssertionValue==XacmlValue);
assert (XacmlValue == '2010-02-25T17:12:31.790Z')

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#date';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="AuthzDecisionStatementEvidenceAssertionContentReference " disabled="true">
            <con:configuration>
              <scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionContentReference';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:contentReference';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-content-reference';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("send request");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("Request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="AuthzDecisionStatementEvidenceAssertionContentType " disabled="true">
            <con:configuration>
              <scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionContentType';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:contentType';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-content-type';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("send request");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("Request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="AuthzDecisionStatementEvidenceAssertionContent " disabled="true">
            <con:configuration>
              <scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionContent';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:content';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-content';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("send request");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("Request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="HomeCommunityId">
            <con:configuration>
              <scriptText>def FieldName='home-community-id';
def AssertionXpath='//ec:assertion/nc:homeCommunity/nc:homeCommunityId';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:home-community-id';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("send request");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("Request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="OrganizationId">
            <con:configuration>
              <scriptText>def FieldName='organizationid';
def AssertionXpath='//ec:assertion/nc:userInfo/nc:org/nc:homeCommunityId';
def XacmlAttributeId='urn:oasis:names:tc:xspa:1.0:subject:organization-id';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("send request");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("Request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#anyURI';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="PatientId">
            <con:configuration>
              <scriptText>def FieldName='PatientId';
def AssertionXpath='//ec:assertion/nc:uniquePatientId';
def XacmlAttributeId='http://www.hhs.gov/healthit/nhin#subject-id';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("send request");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("Request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';
mockRequestHolder.namespaces['hl7'] = 'urn:hl7-org:v3';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Resource/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValueExtension = mockRequestHolder["//xacml:Resource/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue/hl7:PatientId/@extension"]
def ExpectedExtension='1234';
log.info('XacmlAttributeValue(' + FieldName + '@extension)=' + XacmlValueExtension);
//log.info('XacmlAttributeValue(' + FieldName + '@extension) == ' + 'AssertionValue(' + FieldName + '@extension) => ' + (AssertionValue==XacmlValueExtension));
assert (ExpectedExtension==XacmlValueExtension);

def XacmlValueRoot = mockRequestHolder["//xacml:Resource/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue/hl7:PatientId/@root"]
def ExpectedRoot='amp;1.1';
log.info('XacmlAttributeValue(' + FieldName + '@root)=' + XacmlValueRoot);
//log.info('XacmlAttributeValue(' + FieldName + '@extension) == ' + 'AssertionValue(' + FieldName + '@extension) => ' + (AssertionValue==XacmlValueExtension));
assert (ExpectedRoot==XacmlValueRoot);

def ActualDataType = mockRequestHolder["//xacml:Resource/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'urn:hl7-org:v3#II';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="AuthzDecisionStatementEvidenceAssertionAccessConsent">
            <con:configuration>
              <scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionAccessConsent';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:accessConsentPolicy';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-access-consent';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("send request");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("Request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#anyURI';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="AuthzDecisionStatementEvidenceAssertionInstanceAccessConsent">
            <con:configuration>
              <scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionInstanceAccessConsent';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:instanceAccessConsentPolicy';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-instance-access-consent';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("send request");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("Request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#anyURI';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Namespace for Action" disabled="true">
            <con:configuration>
              <path>declare namespace ns6='urn:oasis:names:tc:xacml:2.0:context:schema:os';
declare namespace ns19='urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
//ns19:CheckPolicyRequest[1]/ns19:request[1]/ns6:Resource[1]/ns6:Attribute[7]/@AttributeId</path>
              <content>urn:oasis:names:tc:SAML:1.0:action:rwedc:saml-authz-decision-statement-action</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" disabled="true">
            <con:configuration>
              <path>declare namespace ns6='urn:oasis:names:tc:xacml:2.0:context:schema:os';
declare namespace ns19='urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
//ns19:CheckPolicyRequest[1]/ns19:request[1]/ns6:Resource[1]/ns6:Attribute[7]/ns6:AttributeValue[1]</path>
              <content>Execute</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match">
            <con:configuration>
              <path>declare namespace ns18='urn:gov:hhs:fha:nhinc:common:nhinccommon';
declare namespace ns19='urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
//ns19:CheckPolicyRequest[1]/ns19:assertion[1]/ns18:samlAuthzDecisionStatement[1]/ns18:action[1]</path>
              <content>Execute</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            </con:configuration>
          </con:assertion>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="reset URL">
        <con:settings/>
        <con:config>
          <script>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

//def destConfigFileLocation = context.findProperty("NHINGatewayConfigDir");
def destConfigFileLocation = System.env['NHINC_PROPERTIES_DIR'];
def NHINGatewayHost = context.findProperty("NHINGatewayHost");
def mockHost = context.findProperty("mockHost");
def mockPEURL = "http://" + mockHost + ":8080/CONNECTAdapter/AdapterProxyService/AdapterPolicyEngine";
def LocalHCID = context.findProperty( "LocalHCID" );

FileUtils.CreateOrUpdateConnection(destConfigFileLocation, LocalHCID, "policyengineservice", mockPEURL, context, log)</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>startDate</con:name>
          <con:value>2010-08-11T19:20:30Z</con:value>
        </con:property>
        <con:property>
          <con:name>endDate</con:name>
          <con:value>2010-08-11T19:30:30Z</con:value>
        </con:property>
        <con:property>
          <con:name>sigDate</con:name>
          <con:value>08/11/2010 19:20:30</con:value>
        </con:property>
        <con:property>
          <con:name>expireDate</con:name>
          <con:value>2010-09-10T00:00:00Z</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Response fails Policy Check" searchProperties="true">
      <con:settings/>
      <con:testStep type="groovy" name="Set PolicyEngine Mock">
        <con:settings/>
        <con:config>
          <script>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

//def destConfigFileLocation = context.findProperty("NHINGatewayConfigDir");
def destConfigFileLocation = System.env['NHINC_PROPERTIES_DIR'];
def NHINGatewayHost = context.findProperty("NHINGatewayHost");
def mockHost = context.findProperty("mockHost");
def mockPEURL = "http://" + mockHost + ":18089/mockPE";
def LocalHCID = context.findProperty( "LocalHCID" );

FileUtils.CreateOrUpdateConnection(destConfigFileLocation, LocalHCID, "policyengineservice", mockPEURL, context, log)</script>
        </con:config>
      </con:testStep>
      <con:testStep type="request" name="send request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>NhincProxyDocQueryDeferredResponseBindingSoap</con:interface>
          <con:operation>RespondingGateway_CrossGatewayQuery</con:operation>
          <con:request name="send request">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${#Project#Endpoint-DeferredDocQuery}</con:endpoint>
            <con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:urn="urn:gov:hhs:fha:nhinc:common:nhinccommonproxy" xmlns:urn1="urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0" xmlns:urn2="urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0" xmlns:urn3="urn:gov:hhs:fha:nhinc:common:nhinccommon">
   <soap:Header/>
   <soap:Body>
      <urn:RespondingGateway_CrossGatewayQueryResponse>
         <urn1:AdhocQueryResponse status="?">
            <urn2:RegistryObjectList/>
         </urn1:AdhocQueryResponse>
          <urn:assertion>
            <urn3:address xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
               <urn3:addressType>
                  <urn3:code>AddrCode</urn3:code>
                  <urn3:codeSystem>AddrCodeSyst</urn3:codeSystem>
                  <urn3:codeSystemName>AddrCodeSystName</urn3:codeSystemName>
                  <urn3:codeSystemVersion>1.0</urn3:codeSystemVersion>
                  <urn3:displayName>AddrCode</urn3:displayName>
                  <urn3:originalText>AddrCode</urn3:originalText>
               </urn3:addressType>
               <urn3:city>AddrCity</urn3:city>
               <urn3:country>AddrCountry</urn3:country>
               <urn3:state>AddrState</urn3:state>
               <urn3:streetAddress>AddrStreet</urn3:streetAddress>
               <urn3:zipCode>AddrZip</urn3:zipCode>
            </urn3:address>
            <urn3:dateOfBirth xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">06/04/1959 05:21:00</urn3:dateOfBirth>
            <urn3:explanationNonClaimantSignature xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">Electronic</urn3:explanationNonClaimantSignature>
            <urn3:haveSecondWitnessSignature xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">false</urn3:haveSecondWitnessSignature>
            <urn3:haveSignature xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">false</urn3:haveSignature>
            <urn3:haveWitnessSignature xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">false</urn3:haveWitnessSignature>
            <urn3:homeCommunity xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
               <urn3:description>${#Project#RemoteHCDescription}</urn3:description>
               <urn3:homeCommunityId>${#Project#RemoteHCID}</urn3:homeCommunityId>
               <urn3:name>${#Project#RemoteHCDescription}</urn3:name>
            </urn3:homeCommunity>
            <urn3:personName xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
               <urn3:familyName>Smith</urn3:familyName>
               <urn3:givenName>Sandy</urn3:givenName>
               <urn3:nameType>
                  <urn3:code>nameCode</urn3:code>
                  <urn3:codeSystem>nameCodeSyst</urn3:codeSystem>
                  <urn3:codeSystemName>nameCodeSystName</urn3:codeSystemName>
                  <urn3:codeSystemVersion>1.0</urn3:codeSystemVersion>
                  <urn3:displayName>nameCode</urn3:displayName>
                  <urn3:originalText>nameCode</urn3:originalText>
               </urn3:nameType>
               <urn3:secondNameOrInitials>S</urn3:secondNameOrInitials>
               <urn3:fullName>Sandy S. Smith</urn3:fullName>
            </urn3:personName>
            <urn3:phoneNumber xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
               <urn3:areaCode>321</urn3:areaCode>
               <urn3:countryCode>1</urn3:countryCode>
               <urn3:extension>5436</urn3:extension>
               <urn3:localNumber>253-6849</urn3:localNumber>
               <urn3:phoneNumberType>
                  <urn3:code>phoneCode</urn3:code>
                  <urn3:codeSystem>phoneCodeSyst</urn3:codeSystem>
                  <urn3:codeSystemName>phoneCodeSystName</urn3:codeSystemName>
                  <urn3:codeSystemVersion>1.0</urn3:codeSystemVersion>
                  <urn3:displayName>phoneCode</urn3:displayName>
                  <urn3:originalText>phoneCode</urn3:originalText>
               </urn3:phoneNumberType>
            </urn3:phoneNumber>
            <urn3:secondWitnessAddress xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
               <urn3:addressType>
                  <urn3:code>AddrCode</urn3:code>
                  <urn3:codeSystem>AddrCodeSyst</urn3:codeSystem>
                  <urn3:codeSystemName>AddrCodeSystName</urn3:codeSystemName>
                  <urn3:codeSystemVersion>1.0</urn3:codeSystemVersion>
                  <urn3:displayName>AddrCode</urn3:displayName>
                  <urn3:originalText>AddrCode</urn3:originalText>
               </urn3:addressType>
               <urn3:city>Addr2City</urn3:city>
               <urn3:country>Addr2Country</urn3:country>
               <urn3:state>Addr2State</urn3:state>
               <urn3:streetAddress>Addr2Street</urn3:streetAddress>
               <urn3:zipCode>Addr2Zip</urn3:zipCode>
            </urn3:secondWitnessAddress>
            <urn3:secondWitnessName xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
               <urn3:familyName>Smith</urn3:familyName>
               <urn3:givenName>Sammy</urn3:givenName>
               <urn3:nameType>
                  <urn3:code>nameCode</urn3:code>
                  <urn3:codeSystem>nameCodeSyst</urn3:codeSystem>
                  <urn3:codeSystemName>nameCodeSystName</urn3:codeSystemName>
                  <urn3:codeSystemVersion>1.0</urn3:codeSystemVersion>
                  <urn3:displayName>nameCode</urn3:displayName>
                  <urn3:originalText>nameCode</urn3:originalText>
               </urn3:nameType>
               <urn3:secondNameOrInitials>s</urn3:secondNameOrInitials>
               <urn3:fullName>Sammy S. Smith</urn3:fullName>
            </urn3:secondWitnessName>
            <urn3:secondWitnessPhone xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
               <urn3:areaCode>321</urn3:areaCode>
               <urn3:countryCode>1</urn3:countryCode>
               <urn3:extension>5424</urn3:extension>
               <urn3:localNumber>542-6823</urn3:localNumber>
               <urn3:phoneNumberType>
                  <urn3:code>phoneCode</urn3:code>
                  <urn3:codeSystem>phoneCodeSyst</urn3:codeSystem>
                  <urn3:codeSystemName>phoneCodeSystName</urn3:codeSystemName>
                  <urn3:codeSystemVersion>1.0</urn3:codeSystemVersion>
                  <urn3:displayName>phoneCode</urn3:displayName>
                  <urn3:originalText>phoneCode</urn3:originalText>
               </urn3:phoneNumberType>
            </urn3:secondWitnessPhone>
            <urn3:SSN xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">253-98-7546</urn3:SSN>
            <urn3:uniquePatientId xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">500000000^^^&amp;1.1&amp;ISO</urn3:uniquePatientId>
            <urn3:witnessAddress xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
               <urn3:addressType>
                  <urn3:code>addrCode</urn3:code>
                  <urn3:codeSystem>addrCodeSyst</urn3:codeSystem>
                  <urn3:codeSystemName>addrCodeSystName</urn3:codeSystemName>
                  <urn3:codeSystemVersion>1.0</urn3:codeSystemVersion>
                  <urn3:displayName>addrCode</urn3:displayName>
                  <urn3:originalText>addrCode</urn3:originalText>
               </urn3:addressType>
               <urn3:city>Burnell</urn3:city>
               <urn3:country>USA</urn3:country>
               <urn3:state>FL</urn3:state>
               <urn3:streetAddress>825 North</urn3:streetAddress>
               <urn3:zipCode>32184</urn3:zipCode>
            </urn3:witnessAddress>
            <urn3:witnessName xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
               <urn3:familyName>Smith</urn3:familyName>
               <urn3:givenName>Scott</urn3:givenName>
               <urn3:nameType>
                  <urn3:code>nameCode</urn3:code>
                  <urn3:codeSystem>nameCodeSyst</urn3:codeSystem>
                  <urn3:codeSystemName>nameCodeSystName</urn3:codeSystemName>
                  <urn3:codeSystemVersion>1.0</urn3:codeSystemVersion>
                  <urn3:displayName>nameCode</urn3:displayName>
                  <urn3:originalText>nameCode</urn3:originalText>
               </urn3:nameType>
               <urn3:secondNameOrInitials>S.</urn3:secondNameOrInitials>
               <urn3:fullName>Scott S. Smith</urn3:fullName>
            </urn3:witnessName>
            <urn3:witnessPhone xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
               <urn3:areaCode>321</urn3:areaCode>
               <urn3:countryCode>1</urn3:countryCode>
               <urn3:extension>8432</urn3:extension>
               <urn3:localNumber>985-2239</urn3:localNumber>
               <urn3:phoneNumberType>
                  <urn3:code>phoneCode</urn3:code>
                  <urn3:codeSystem>phoneCodeSyst</urn3:codeSystem>
                  <urn3:codeSystemName>phoneCodeSystName</urn3:codeSystemName>
                  <urn3:codeSystemVersion>1.0</urn3:codeSystemVersion>
                  <urn3:displayName>phoneCode</urn3:displayName>
                  <urn3:originalText>phoneCode</urn3:originalText>
               </urn3:phoneNumberType>
            </urn3:witnessPhone>
            <urn3:userInfo xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
               <urn3:personName>
                  <urn3:familyName>Skagerberg</urn3:familyName>
                  <urn3:givenName>Karl</urn3:givenName>
                  <urn3:nameType>
                     <urn3:code>nameCode</urn3:code>
                     <urn3:codeSystem>nameCodeSyst</urn3:codeSystem>
                     <urn3:codeSystemName>nameCodeSystName</urn3:codeSystemName>
                     <urn3:codeSystemVersion>1.0</urn3:codeSystemVersion>
                     <urn3:displayName>nameCode</urn3:displayName>
                     <urn3:originalText>nameCode</urn3:originalText>
                  </urn3:nameType>
                  <urn3:secondNameOrInitials>S</urn3:secondNameOrInitials>
                  <urn3:fullName>Kasrl S. Skagerberg</urn3:fullName>
               </urn3:personName>
               <urn3:userName>kskagerb</urn3:userName>
               <urn3:org>
                  <urn3:description>${#Project#RemoteHCDescription}</urn3:description>
                  <urn3:homeCommunityId>${#Project#RemoteHCID}</urn3:homeCommunityId>
                  <urn3:name>${#Project#RemoteHCDescription}</urn3:name>
               </urn3:org>
               <urn3:roleCoded>
                  <urn3:code>307969004</urn3:code>
                  <urn3:codeSystem>2.16.840.1.113883.6.96</urn3:codeSystem>
                  <urn3:codeSystemName>SNOMED_CT</urn3:codeSystemName>
                  <urn3:codeSystemVersion>1.0</urn3:codeSystemVersion>
                  <urn3:displayName>Public Health</urn3:displayName>
                  <urn3:originalText>Public Health</urn3:originalText>
               </urn3:roleCoded>
            </urn3:userInfo>
            <urn3:authorized xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">true</urn3:authorized>
            <urn3:purposeOfDisclosureCoded xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
               <urn3:code>PUBLICHEALTH</urn3:code>
               <urn3:codeSystem>2.16.840.1.113883.3.18.7.1</urn3:codeSystem>
               <urn3:codeSystemName>nhin-purpose</urn3:codeSystemName>
               <urn3:codeSystemVersion>1.0</urn3:codeSystemVersion>
               <urn3:displayName>Use or disclosure of Psychotherapy Notes</urn3:displayName>
               <urn3:originalText>Use or disclosure of Psychotherapy Notes</urn3:originalText>
            </urn3:purposeOfDisclosureCoded>
            <urn3:samlAuthnStatement xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
               <urn3:authInstant>2009-04-16T13:15:39Z</urn3:authInstant>
               <urn3:sessionIndex>987</urn3:sessionIndex>
               <urn3:authContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:X509</urn3:authContextClassRef>
               <urn3:subjectLocalityAddress>158.147.185.168</urn3:subjectLocalityAddress>
               <urn3:subjectLocalityDNSName>cs.myharris.net</urn3:subjectLocalityDNSName>
            </urn3:samlAuthnStatement>
            <urn3:samlAuthzDecisionStatement xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
               <urn3:decision>Permit</urn3:decision>
               <urn3:resource>https://158.147.185.168:8181/SamlReceiveService/SamlProcessWS</urn3:resource>
               <urn3:action>TestSaml</urn3:action>
               <urn3:evidence>
                  <urn3:assertion>
                     <urn3:id>40df7c0a-ff3e-4b26-baeb-f2910f6d05a9</urn3:id>
                     <urn3:issueInstant>2009-04-16T13:10:39.093Z</urn3:issueInstant>
                     <urn3:version>2.0</urn3:version>
                     <urn3:issuerFormat>urn:oasis:names:tc:SAML:1.1:nameid-format:X509SubjectName</urn3:issuerFormat>
                     <urn3:issuer>CN=SAML User,OU=Harris,O=HITS,L=Melbourne,ST=FL,C=US</urn3:issuer>
                     <urn3:conditions>
                        <urn3:notBefore>2009-04-16T13:10:39.093Z</urn3:notBefore>
                        <urn3:notOnOrAfter>2009-12-31T12:00:00.000Z</urn3:notOnOrAfter>
                     </urn3:conditions>
                     <urn3:accessConsentPolicy>Claim-Ref-1234</urn3:accessConsentPolicy>
                     <urn3:instanceAccessConsentPolicy>Claim-Instance-1</urn3:instanceAccessConsentPolicy>
                  </urn3:assertion>
               </urn3:evidence>
            </urn3:samlAuthzDecisionStatement>
         </urn:assertion>
      </urn:RespondingGateway_CrossGatewayQueryResponse>
   </soap:Body>
</soap:Envelope>]]></con:request>
            <con:assertion type="SOAP Response"/>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:testStep type="mockresponse" name="Mock Policy Engine">
        <con:settings/>
        <con:config xsi:type="con:MockResponseStep" startStep="send request" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>AdapterPolicyEngineBindingSoap</con:interface>
          <con:operation>CheckPolicy</con:operation>
          <con:path>/mockPE</con:path>
          <con:port>18082</con:port>
          <con:timeout>30000</con:timeout>
          <con:response>
            <con:settings/>
            <con:responseContent><![CDATA[<soapenv:Envelope xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope" xmlns:urn="urn:gov:hhs:fha:nhinc:common:nhinccommonadapter" xmlns:urn1="urn:oasis:names:tc:xacml:2.0:context:schema:os">
   <soapenv:Header/>
   <soapenv:Body>
      <urn:CheckPolicyResponse>
         <urn:response>
            <urn1:Result>
               <urn1:Decision>deny</urn1:Decision>
            </urn1:Result>
         </urn:response>
      </urn:CheckPolicyResponse>
   </soapenv:Body>
</soapenv:Envelope>]]></con:responseContent>
            <con:wsaConfig mustUnderstand="NONE" version="200508"/>
          </con:response>
          <con:assertion type="GroovyScriptAssertion" name="AuthnStatementAuthnInstant " disabled="true">
            <con:configuration>
              <scriptText>def FieldName='authInstant';
def AssertionXpath='//ec:assertion/nc:samlAuthnStatement/nc:authInstant'
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authn-statement:auth-instant';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("send request");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("Request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="AuthnStatementSessionIndex">
            <con:configuration>
              <scriptText>def FieldName='sessionIndex';
def AssertionXpath='//ec:assertion/nc:samlAuthnStatement/nc:sessionIndex';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authn-statement:session-index';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("send request");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("Request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="AuthnStatementAthnContextClassRef " disabled="true">
            <con:configuration>
              <scriptText>def FieldName='authContextClassRef';
def AssertionXpath='//ec:assertion/nc:samlAuthnStatement/nc:authContextClassRef';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authn-statement:auth-context-class-ref';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("send request");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("Request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="AuthnStatementSubjectLocalityAddress ">
            <con:configuration>
              <scriptText>def FieldName='subjectLocalityAddress';
def AssertionXpath='//ec:assertion/nc:samlAuthnStatement/nc:subjectLocalityAddress';
def XacmlAttributeId='urn:oasis:names:tc:xacml:1.0:subject:authn-locality:ip-address';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("send request");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("Request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="AuthnStatementDNSName ">
            <con:configuration>
              <scriptText>def FieldName='subjectLocalityDNSName';
def AssertionXpath='//ec:assertion/nc:samlAuthnStatement/nc:subjectLocalityDNSName';
def XacmlAttributeId='urn:oasis:names:tc:xacml:1.0:subject:authn-locality:dns-name';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("send request");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("Request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="UserPersonName">
            <con:configuration>
              <scriptText>def FieldName='personname';
def AssertionXpath='//ec:assertion/nc:userInfo/nc:userName';
def XacmlAttributeId='urn:oasis:names:tc:xacml:1.0:subject:subject-id';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("send request");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("Request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="UserOrganizationName">
            <con:configuration>
              <scriptText>def FieldName='user organization';
def AssertionXpath='//ec:assertion/nc:userInfo/nc:org/nc:name';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:user-organization-name';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("send request");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("Request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="UserRoleCode">
            <con:configuration>
              <scriptText>def FieldName='user role coded';
def AssertionXpath='//ec:assertion/nc:userInfo/nc:roleCoded/nc:code';
//def XacmlAttributeId='urn:gov:hhs:fha:nhinc:user-role-code';
def XacmlAttributeId='urn:oasis:names:tc:xacml:2.0:subject:role';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("send request");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("Request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="UserRoleCodeSystem ">
            <con:configuration>
              <scriptText>def FieldName='user role system';
def AssertionXpath='//ec:assertion/nc:userInfo/nc:roleCoded/nc:codeSystem';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:user-role-code-system';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("send request");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("Request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="UserRoleCodeSystemName ">
            <con:configuration>
              <scriptText>def FieldName='user role system name';
def AssertionXpath='//ec:assertion/nc:userInfo/nc:roleCoded/nc:codeSystemName';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:user-role-code-system-name';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("send request");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("Request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="UserRoleCodeDiplayName ">
            <con:configuration>
              <scriptText>def FieldName='user role display name';
def AssertionXpath='//ec:assertion/nc:userInfo/nc:roleCoded/nc:displayName';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:user-role-description';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("send request");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("Request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="PurposeForUseCode">
            <con:configuration>
              <scriptText>def FieldName='PurposeForUseCode';
def AssertionXpath='//ec:assertion/nc:purposeOfDisclosureCoded/nc:code';
//def XacmlAttributeId='urn:gov:hhs:fha:nhinc:purpose-of-use-code';
def XacmlAttributeId='urn:oasis:names:tc:xspa:1.0:subject:purposeofuse';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("send request");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("Request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="PurposeForUseCodeSystem">
            <con:configuration>
              <scriptText>def FieldName='PurposeForUseCodeSystem';
def AssertionXpath='//ec:assertion/nc:purposeOfDisclosureCoded/nc:codeSystem';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:purpose-of-use-code-system';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("send request");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("Request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="PurposeForUseCodeSystemName">
            <con:configuration>
              <scriptText>def FieldName='PurposeForUseCodeSystemName';
def AssertionXpath='//ec:assertion/nc:purposeOfDisclosureCoded/nc:codeSystemName';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:purpose-of-use-code-system-name';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("send request");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("Request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="PurposeForUseCodeDisplayName">
            <con:configuration>
              <scriptText>def FieldName='PurposeForUseCodeDisplayName';
def AssertionXpath='//ec:assertion/nc:purposeOfDisclosureCoded/nc:displayName';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:purpose-of-use-display-name';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("send request");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("Request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="AuthzDecisionStatementDecision">
            <con:configuration>
              <scriptText>def FieldName='AuthzDecisionStatementDecision';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:decision';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-decision';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("send request");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("Request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="AuthzDecisionStatementResource">
            <con:configuration>
              <scriptText>def FieldName='AuthzDecisionStatementResource';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:resource';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-resource';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("send request");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("Request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

//def AssertionValue = sourceRequestHolder[AssertionXpath];
//log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

def AssertionValue='https://localhost:8181/CONNECTNhinServicesWeb/DocumentRepositoryXDR_Service';
log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="AuthzDecisionStatementAction">
            <con:configuration>
              <scriptText>def FieldName='AuthzDecisionStatementAction';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:action';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-action';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("send request");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("Request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
//log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);
def ExpectedValue='Execute';
//log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (ExpectedValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="AuthzDecisionStatementEvidenceAssertionID ">
            <con:configuration>
              <scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionID';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:id';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-id';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("send request");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("Request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="AuthzDecisionStatementEvidenceAssertionIssueInstant">
            <con:configuration>
              <scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionIssueInstant';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:issueInstant';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-issue-instant';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("send request");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("Request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="AuthzDecisionStatementEvidenceAssertionVersion">
            <con:configuration>
              <scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionVersion';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:version';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-version';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("send request");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("Request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="AuthzDecisionStatementEvidenceAssertionIssuer">
            <con:configuration>
              <scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionIssuer';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:issuer';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-issuer';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("send request");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("Request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="AuthzDecisionStatementEvidenceAssertionConditionsNotBefore" disabled="true">
            <con:configuration>
              <scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionConditionsNotBefore';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:conditions/nc:notBefore';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-not-before';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("send request");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("Request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
//assert (AssertionValue==XacmlValue);
assert (XacmlValue == '2010-02-25T17:12:31.790Z')

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#date';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="AuthzDecisionStatementEvidenceAssertionConditionsNotOnOrAfter " disabled="true">
            <con:configuration>
              <scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionConditionsNotOnOrAfter';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:conditions/nc:notOnOrAfter';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-not-on-or-after';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("send request");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("Request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
//assert (AssertionValue==XacmlValue);
assert (XacmlValue == '2010-02-25T17:12:31.790Z')

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#date';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="AuthzDecisionStatementEvidenceAssertionContentReference " disabled="true">
            <con:configuration>
              <scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionContentReference';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:contentReference';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-content-reference';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("send request");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("Request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="AuthzDecisionStatementEvidenceAssertionContentType " disabled="true">
            <con:configuration>
              <scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionContentType';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:contentType';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-content-type';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("send request");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("Request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="AuthzDecisionStatementEvidenceAssertionContent " disabled="true">
            <con:configuration>
              <scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionContent';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:content';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-content';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("send request");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("Request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="HomeCommunityId">
            <con:configuration>
              <scriptText>def FieldName='home-community-id';
def AssertionXpath='//ec:assertion/nc:homeCommunity/nc:homeCommunityId';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:home-community-id';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("send request");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("Request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="OrganizationId">
            <con:configuration>
              <scriptText>def FieldName='organizationid';
def AssertionXpath='//ec:assertion/nc:userInfo/nc:org/nc:homeCommunityId';
def XacmlAttributeId='urn:oasis:names:tc:xspa:1.0:subject:organization-id';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("send request");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("Request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#anyURI';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="PatientId">
            <con:configuration>
              <scriptText>def FieldName='PatientId';
def AssertionXpath='//ec:assertion/nc:uniquePatientId';
def XacmlAttributeId='http://www.hhs.gov/healthit/nhin#subject-id';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("send request");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("Request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';
mockRequestHolder.namespaces['hl7'] = 'urn:hl7-org:v3';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Resource/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValueExtension = mockRequestHolder["//xacml:Resource/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue/hl7:PatientId/@extension"]
def ExpectedExtension='1234';
log.info('XacmlAttributeValue(' + FieldName + '@extension)=' + XacmlValueExtension);
//log.info('XacmlAttributeValue(' + FieldName + '@extension) == ' + 'AssertionValue(' + FieldName + '@extension) => ' + (AssertionValue==XacmlValueExtension));
assert (ExpectedExtension==XacmlValueExtension);

def XacmlValueRoot = mockRequestHolder["//xacml:Resource/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue/hl7:PatientId/@root"]
def ExpectedRoot='amp;1.1';
log.info('XacmlAttributeValue(' + FieldName + '@root)=' + XacmlValueRoot);
//log.info('XacmlAttributeValue(' + FieldName + '@extension) == ' + 'AssertionValue(' + FieldName + '@extension) => ' + (AssertionValue==XacmlValueExtension));
assert (ExpectedRoot==XacmlValueRoot);

def ActualDataType = mockRequestHolder["//xacml:Resource/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'urn:hl7-org:v3#II';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="AuthzDecisionStatementEvidenceAssertionAccessConsent">
            <con:configuration>
              <scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionAccessConsent';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:accessConsentPolicy';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-access-consent';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("send request");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("Request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#anyURI';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="AuthzDecisionStatementEvidenceAssertionInstanceAccessConsent">
            <con:configuration>
              <scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionInstanceAccessConsent';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:instanceAccessConsentPolicy';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-instance-access-consent';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("send request");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("Request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#anyURI';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Namespace for Action" disabled="true">
            <con:configuration>
              <path>declare namespace ns6='urn:oasis:names:tc:xacml:2.0:context:schema:os';
declare namespace ns19='urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
//ns19:CheckPolicyRequest[1]/ns19:request[1]/ns6:Resource[1]/ns6:Attribute[7]/@AttributeId</path>
              <content>urn:oasis:names:tc:SAML:1.0:action:rwedc:saml-authz-decision-statement-action</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" disabled="true">
            <con:configuration>
              <path>declare namespace ns6='urn:oasis:names:tc:xacml:2.0:context:schema:os';
declare namespace ns19='urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
//ns19:CheckPolicyRequest[1]/ns19:request[1]/ns6:Resource[1]/ns6:Attribute[7]/ns6:AttributeValue[1]</path>
              <content>Execute</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match">
            <con:configuration>
              <path>declare namespace ns18='urn:gov:hhs:fha:nhinc:common:nhinccommon';
declare namespace ns19='urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
//ns19:CheckPolicyRequest[1]/ns19:assertion[1]/ns18:samlAuthzDecisionStatement[1]/ns18:action[1]</path>
              <content>Execute</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            </con:configuration>
          </con:assertion>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="reset URL">
        <con:settings/>
        <con:config>
          <script>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

//def destConfigFileLocation = context.findProperty("NHINGatewayConfigDir");
def destConfigFileLocation = System.env['NHINC_PROPERTIES_DIR'];
def NHINGatewayHost = context.findProperty("NHINGatewayHost");
def mockHost = context.findProperty("mockHost");
def mockPEURL = "http://" + mockHost + ":8080/CONNECTAdapter/AdapterProxyService/AdapterPolicyEngine";
def LocalHCID = context.findProperty( "LocalHCID" );

FileUtils.CreateOrUpdateConnection(destConfigFileLocation, LocalHCID, "policyengineservice", mockPEURL, context, log)</script>
        </con:config>
      </con:testStep>
      <con:properties/>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Response fails Service Enabled Check" searchProperties="true">
      <con:settings/>
      <con:testStep type="groovy" name="Update gateway.properties">
        <con:settings/>
        <con:config>
          <script>def destConfigFileLocation = System.env['NHINC_PROPERTIES_DIR']

void UpdateProperty(String directory, String filename, String propertyKey, String propertyValue,context,log) {
			  
   log.info("begin UpdateProperty; directory='" + directory + "';filename='" + filename + "';key='" + propertyKey + "';value='" + propertyValue + "';");
   File file = new File(directory,filename);
   Properties properties = new Properties();
   FileInputStream frPropFile = new FileInputStream(file);
   properties.load(frPropFile);
   properties.setProperty(propertyKey, propertyValue);
   FileOutputStream fwPropFile = new FileOutputStream(file);
   properties.store(fwPropFile, "**DO NOT CHECK IN** - written by groovy script FileUtils.groovy->UpdateProperty");
   properties = null;
}

UpdateProperty(destConfigFileLocation,"gateway.properties","serviceDocumentQuery","false",context,log);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="request" name="NhincResponse">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>NhincProxyDocQueryDeferredResponseBindingSoap</con:interface>
          <con:operation>RespondingGateway_CrossGatewayQuery</con:operation>
          <con:request name="NhincResponse">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${#Project#Endpoint-DeferredDocQuery}</con:endpoint>
            <con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:urn="urn:gov:hhs:fha:nhinc:common:nhinccommonproxy" xmlns:urn1="urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0" xmlns:urn2="urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0" xmlns:urn3="urn:gov:hhs:fha:nhinc:common:nhinccommon">
   <soap:Header/>
   <soap:Body>
      <urn:RespondingGateway_CrossGatewayQueryResponse>
         <urn1:AdhocQueryResponse status="?">
            <urn2:RegistryObjectList/>
         </urn1:AdhocQueryResponse>
          <urn:assertion>
            <urn3:address xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
               <urn3:addressType>
                  <urn3:code>AddrCode</urn3:code>
                  <urn3:codeSystem>AddrCodeSyst</urn3:codeSystem>
                  <urn3:codeSystemName>AddrCodeSystName</urn3:codeSystemName>
                  <urn3:codeSystemVersion>1.0</urn3:codeSystemVersion>
                  <urn3:displayName>AddrCode</urn3:displayName>
                  <urn3:originalText>AddrCode</urn3:originalText>
               </urn3:addressType>
               <urn3:city>AddrCity</urn3:city>
               <urn3:country>AddrCountry</urn3:country>
               <urn3:state>AddrState</urn3:state>
               <urn3:streetAddress>AddrStreet</urn3:streetAddress>
               <urn3:zipCode>AddrZip</urn3:zipCode>
            </urn3:address>
            <urn3:dateOfBirth xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">06/04/1959 05:21:00</urn3:dateOfBirth>
            <urn3:explanationNonClaimantSignature xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">Electronic</urn3:explanationNonClaimantSignature>
            <urn3:haveSecondWitnessSignature xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">false</urn3:haveSecondWitnessSignature>
            <urn3:haveSignature xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">false</urn3:haveSignature>
            <urn3:haveWitnessSignature xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">false</urn3:haveWitnessSignature>
            <urn3:homeCommunity xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
               <urn3:description>${#Project#RemoteHCDescription}</urn3:description>
               <urn3:homeCommunityId>${#Project#RemoteHCID}</urn3:homeCommunityId>
               <urn3:name>${#Project#RemoteHCDescription}</urn3:name>
            </urn3:homeCommunity>
            <urn3:personName xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
               <urn3:familyName>Smith</urn3:familyName>
               <urn3:givenName>Sandy</urn3:givenName>
               <urn3:nameType>
                  <urn3:code>nameCode</urn3:code>
                  <urn3:codeSystem>nameCodeSyst</urn3:codeSystem>
                  <urn3:codeSystemName>nameCodeSystName</urn3:codeSystemName>
                  <urn3:codeSystemVersion>1.0</urn3:codeSystemVersion>
                  <urn3:displayName>nameCode</urn3:displayName>
                  <urn3:originalText>nameCode</urn3:originalText>
               </urn3:nameType>
               <urn3:secondNameOrInitials>S</urn3:secondNameOrInitials>
               <urn3:fullName>Sandy S. Smith</urn3:fullName>
            </urn3:personName>
            <urn3:phoneNumber xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
               <urn3:areaCode>321</urn3:areaCode>
               <urn3:countryCode>1</urn3:countryCode>
               <urn3:extension>5436</urn3:extension>
               <urn3:localNumber>253-6849</urn3:localNumber>
               <urn3:phoneNumberType>
                  <urn3:code>phoneCode</urn3:code>
                  <urn3:codeSystem>phoneCodeSyst</urn3:codeSystem>
                  <urn3:codeSystemName>phoneCodeSystName</urn3:codeSystemName>
                  <urn3:codeSystemVersion>1.0</urn3:codeSystemVersion>
                  <urn3:displayName>phoneCode</urn3:displayName>
                  <urn3:originalText>phoneCode</urn3:originalText>
               </urn3:phoneNumberType>
            </urn3:phoneNumber>
            <urn3:secondWitnessAddress xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
               <urn3:addressType>
                  <urn3:code>AddrCode</urn3:code>
                  <urn3:codeSystem>AddrCodeSyst</urn3:codeSystem>
                  <urn3:codeSystemName>AddrCodeSystName</urn3:codeSystemName>
                  <urn3:codeSystemVersion>1.0</urn3:codeSystemVersion>
                  <urn3:displayName>AddrCode</urn3:displayName>
                  <urn3:originalText>AddrCode</urn3:originalText>
               </urn3:addressType>
               <urn3:city>Addr2City</urn3:city>
               <urn3:country>Addr2Country</urn3:country>
               <urn3:state>Addr2State</urn3:state>
               <urn3:streetAddress>Addr2Street</urn3:streetAddress>
               <urn3:zipCode>Addr2Zip</urn3:zipCode>
            </urn3:secondWitnessAddress>
            <urn3:secondWitnessName xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
               <urn3:familyName>Smith</urn3:familyName>
               <urn3:givenName>Sammy</urn3:givenName>
               <urn3:nameType>
                  <urn3:code>nameCode</urn3:code>
                  <urn3:codeSystem>nameCodeSyst</urn3:codeSystem>
                  <urn3:codeSystemName>nameCodeSystName</urn3:codeSystemName>
                  <urn3:codeSystemVersion>1.0</urn3:codeSystemVersion>
                  <urn3:displayName>nameCode</urn3:displayName>
                  <urn3:originalText>nameCode</urn3:originalText>
               </urn3:nameType>
               <urn3:secondNameOrInitials>s</urn3:secondNameOrInitials>
               <urn3:fullName>Sammy S. Smith</urn3:fullName>
            </urn3:secondWitnessName>
            <urn3:secondWitnessPhone xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
               <urn3:areaCode>321</urn3:areaCode>
               <urn3:countryCode>1</urn3:countryCode>
               <urn3:extension>5424</urn3:extension>
               <urn3:localNumber>542-6823</urn3:localNumber>
               <urn3:phoneNumberType>
                  <urn3:code>phoneCode</urn3:code>
                  <urn3:codeSystem>phoneCodeSyst</urn3:codeSystem>
                  <urn3:codeSystemName>phoneCodeSystName</urn3:codeSystemName>
                  <urn3:codeSystemVersion>1.0</urn3:codeSystemVersion>
                  <urn3:displayName>phoneCode</urn3:displayName>
                  <urn3:originalText>phoneCode</urn3:originalText>
               </urn3:phoneNumberType>
            </urn3:secondWitnessPhone>
            <urn3:SSN xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">253-98-7546</urn3:SSN>
            <urn3:uniquePatientId xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">500000000^^^&amp;1.1&amp;ISO</urn3:uniquePatientId>
            <urn3:witnessAddress xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
               <urn3:addressType>
                  <urn3:code>addrCode</urn3:code>
                  <urn3:codeSystem>addrCodeSyst</urn3:codeSystem>
                  <urn3:codeSystemName>addrCodeSystName</urn3:codeSystemName>
                  <urn3:codeSystemVersion>1.0</urn3:codeSystemVersion>
                  <urn3:displayName>addrCode</urn3:displayName>
                  <urn3:originalText>addrCode</urn3:originalText>
               </urn3:addressType>
               <urn3:city>Burnell</urn3:city>
               <urn3:country>USA</urn3:country>
               <urn3:state>FL</urn3:state>
               <urn3:streetAddress>825 North</urn3:streetAddress>
               <urn3:zipCode>32184</urn3:zipCode>
            </urn3:witnessAddress>
            <urn3:witnessName xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
               <urn3:familyName>Smith</urn3:familyName>
               <urn3:givenName>Scott</urn3:givenName>
               <urn3:nameType>
                  <urn3:code>nameCode</urn3:code>
                  <urn3:codeSystem>nameCodeSyst</urn3:codeSystem>
                  <urn3:codeSystemName>nameCodeSystName</urn3:codeSystemName>
                  <urn3:codeSystemVersion>1.0</urn3:codeSystemVersion>
                  <urn3:displayName>nameCode</urn3:displayName>
                  <urn3:originalText>nameCode</urn3:originalText>
               </urn3:nameType>
               <urn3:secondNameOrInitials>S.</urn3:secondNameOrInitials>
               <urn3:fullName>Scott S. Smith</urn3:fullName>
            </urn3:witnessName>
            <urn3:witnessPhone xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
               <urn3:areaCode>321</urn3:areaCode>
               <urn3:countryCode>1</urn3:countryCode>
               <urn3:extension>8432</urn3:extension>
               <urn3:localNumber>985-2239</urn3:localNumber>
               <urn3:phoneNumberType>
                  <urn3:code>phoneCode</urn3:code>
                  <urn3:codeSystem>phoneCodeSyst</urn3:codeSystem>
                  <urn3:codeSystemName>phoneCodeSystName</urn3:codeSystemName>
                  <urn3:codeSystemVersion>1.0</urn3:codeSystemVersion>
                  <urn3:displayName>phoneCode</urn3:displayName>
                  <urn3:originalText>phoneCode</urn3:originalText>
               </urn3:phoneNumberType>
            </urn3:witnessPhone>
            <urn3:userInfo xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
               <urn3:personName>
                  <urn3:familyName>Skagerberg</urn3:familyName>
                  <urn3:givenName>Karl</urn3:givenName>
                  <urn3:nameType>
                     <urn3:code>nameCode</urn3:code>
                     <urn3:codeSystem>nameCodeSyst</urn3:codeSystem>
                     <urn3:codeSystemName>nameCodeSystName</urn3:codeSystemName>
                     <urn3:codeSystemVersion>1.0</urn3:codeSystemVersion>
                     <urn3:displayName>nameCode</urn3:displayName>
                     <urn3:originalText>nameCode</urn3:originalText>
                  </urn3:nameType>
                  <urn3:secondNameOrInitials>S</urn3:secondNameOrInitials>
                  <urn3:fullName>Kasrl S. Skagerberg</urn3:fullName>
               </urn3:personName>
               <urn3:userName>kskagerb</urn3:userName>
               <urn3:org>
                  <urn3:description>${#Project#RemoteHCDescription}</urn3:description>
                  <urn3:homeCommunityId>${#Project#RemoteHCID}</urn3:homeCommunityId>
                  <urn3:name>${#Project#RemoteHCDescription}</urn3:name>
               </urn3:org>
               <urn3:roleCoded>
                  <urn3:code>307969004</urn3:code>
                  <urn3:codeSystem>2.16.840.1.113883.6.96</urn3:codeSystem>
                  <urn3:codeSystemName>SNOMED_CT</urn3:codeSystemName>
                  <urn3:codeSystemVersion>1.0</urn3:codeSystemVersion>
                  <urn3:displayName>Public Health</urn3:displayName>
                  <urn3:originalText>Public Health</urn3:originalText>
               </urn3:roleCoded>
            </urn3:userInfo>
            <urn3:authorized xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">true</urn3:authorized>
            <urn3:purposeOfDisclosureCoded xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
               <urn3:code>PUBLICHEALTH</urn3:code>
               <urn3:codeSystem>2.16.840.1.113883.3.18.7.1</urn3:codeSystem>
               <urn3:codeSystemName>nhin-purpose</urn3:codeSystemName>
               <urn3:codeSystemVersion>1.0</urn3:codeSystemVersion>
               <urn3:displayName>Use or disclosure of Psychotherapy Notes</urn3:displayName>
               <urn3:originalText>Use or disclosure of Psychotherapy Notes</urn3:originalText>
            </urn3:purposeOfDisclosureCoded>
            <urn3:samlAuthnStatement xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
               <urn3:authInstant>2009-04-16T13:15:39Z</urn3:authInstant>
               <urn3:sessionIndex>987</urn3:sessionIndex>
               <urn3:authContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:X509</urn3:authContextClassRef>
               <urn3:subjectLocalityAddress>158.147.185.168</urn3:subjectLocalityAddress>
               <urn3:subjectLocalityDNSName>cs.myharris.net</urn3:subjectLocalityDNSName>
            </urn3:samlAuthnStatement>
            <urn3:samlAuthzDecisionStatement xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
               <urn3:decision>Permit</urn3:decision>
               <urn3:resource>https://158.147.185.168:8181/SamlReceiveService/SamlProcessWS</urn3:resource>
               <urn3:action>TestSaml</urn3:action>
               <urn3:evidence>
                  <urn3:assertion>
                     <urn3:id>40df7c0a-ff3e-4b26-baeb-f2910f6d05a9</urn3:id>
                     <urn3:issueInstant>2009-04-16T13:10:39.093Z</urn3:issueInstant>
                     <urn3:version>2.0</urn3:version>
                     <urn3:issuerFormat>urn:oasis:names:tc:SAML:1.1:nameid-format:X509SubjectName</urn3:issuerFormat>
                     <urn3:issuer>CN=SAML User,OU=Harris,O=HITS,L=Melbourne,ST=FL,C=US</urn3:issuer>
                     <urn3:conditions>
                        <urn3:notBefore>2009-04-16T13:10:39.093Z</urn3:notBefore>
                        <urn3:notOnOrAfter>2009-12-31T12:00:00.000Z</urn3:notOnOrAfter>
                     </urn3:conditions>
                     <urn3:accessConsentPolicy>Claim-Ref-1234</urn3:accessConsentPolicy>
                     <urn3:instanceAccessConsentPolicy>Claim-Instance-1</urn3:instanceAccessConsentPolicy>
                  </urn3:assertion>
               </urn3:evidence>
            </urn3:samlAuthzDecisionStatement>
         </urn:assertion>
      </urn:RespondingGateway_CrossGatewayQueryResponse>
   </soap:Body>
</soap:Envelope>]]></con:request>
            <con:assertion type="SOAP Response"/>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:properties/>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Response in Passthrough Mode" searchProperties="true">
      <con:settings/>
      <con:testStep type="groovy" name="Update gateway.properties">
        <con:settings/>
        <con:config>
          <script>def destConfigFileLocation = System.env['NHINC_PROPERTIES_DIR']

void UpdateProperty(String directory, String filename, String propertyKey, String propertyValue,context,log) {
			  
   log.info("begin UpdateProperty; directory='" + directory + "';filename='" + filename + "';key='" + propertyKey + "';value='" + propertyValue + "';");
   File file = new File(directory,filename);
   Properties properties = new Properties();
   FileInputStream frPropFile = new FileInputStream(file);
   properties.load(frPropFile);
   properties.setProperty(propertyKey, propertyValue);
   FileOutputStream fwPropFile = new FileOutputStream(file);
   properties.store(fwPropFile, "**DO NOT CHECK IN** - written by groovy script FileUtils.groovy->UpdateProperty");
   properties = null;
}

UpdateProperty(destConfigFileLocation,"gateway.properties","documentQueryPassthrough","true",context,log);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="request" name="NhincResponse">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>NhincProxyDocQueryDeferredResponseBindingSoap</con:interface>
          <con:operation>RespondingGateway_CrossGatewayQuery</con:operation>
          <con:request name="NhincResponse">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${#Project#Endpoint-DeferredDocQuery}</con:endpoint>
            <con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:urn="urn:gov:hhs:fha:nhinc:common:nhinccommonproxy" xmlns:urn1="urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0" xmlns:urn2="urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0" xmlns:urn3="urn:gov:hhs:fha:nhinc:common:nhinccommon">
   <soap:Header/>
   <soap:Body>
      <urn:RespondingGateway_CrossGatewayQueryResponse>
         <urn1:AdhocQueryResponse status="?">
            <urn2:RegistryObjectList/>
         </urn1:AdhocQueryResponse>
          <urn:assertion>
            <urn3:address xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
               <urn3:addressType>
                  <urn3:code>AddrCode</urn3:code>
                  <urn3:codeSystem>AddrCodeSyst</urn3:codeSystem>
                  <urn3:codeSystemName>AddrCodeSystName</urn3:codeSystemName>
                  <urn3:codeSystemVersion>1.0</urn3:codeSystemVersion>
                  <urn3:displayName>AddrCode</urn3:displayName>
                  <urn3:originalText>AddrCode</urn3:originalText>
               </urn3:addressType>
               <urn3:city>AddrCity</urn3:city>
               <urn3:country>AddrCountry</urn3:country>
               <urn3:state>AddrState</urn3:state>
               <urn3:streetAddress>AddrStreet</urn3:streetAddress>
               <urn3:zipCode>AddrZip</urn3:zipCode>
            </urn3:address>
            <urn3:dateOfBirth xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">06/04/1959 05:21:00</urn3:dateOfBirth>
            <urn3:explanationNonClaimantSignature xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">Electronic</urn3:explanationNonClaimantSignature>
            <urn3:haveSecondWitnessSignature xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">false</urn3:haveSecondWitnessSignature>
            <urn3:haveSignature xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">false</urn3:haveSignature>
            <urn3:haveWitnessSignature xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">false</urn3:haveWitnessSignature>
            <urn3:homeCommunity xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
               <urn3:description>${#Project#RemoteHCDescription}</urn3:description>
               <urn3:homeCommunityId>${#Project#RemoteHCID}</urn3:homeCommunityId>
               <urn3:name>${#Project#RemoteHCDescription}</urn3:name>
            </urn3:homeCommunity>
            <urn3:personName xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
               <urn3:familyName>Smith</urn3:familyName>
               <urn3:givenName>Sandy</urn3:givenName>
               <urn3:nameType>
                  <urn3:code>nameCode</urn3:code>
                  <urn3:codeSystem>nameCodeSyst</urn3:codeSystem>
                  <urn3:codeSystemName>nameCodeSystName</urn3:codeSystemName>
                  <urn3:codeSystemVersion>1.0</urn3:codeSystemVersion>
                  <urn3:displayName>nameCode</urn3:displayName>
                  <urn3:originalText>nameCode</urn3:originalText>
               </urn3:nameType>
               <urn3:secondNameOrInitials>S</urn3:secondNameOrInitials>
               <urn3:fullName>Sandy S. Smith</urn3:fullName>
            </urn3:personName>
            <urn3:phoneNumber xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
               <urn3:areaCode>321</urn3:areaCode>
               <urn3:countryCode>1</urn3:countryCode>
               <urn3:extension>5436</urn3:extension>
               <urn3:localNumber>253-6849</urn3:localNumber>
               <urn3:phoneNumberType>
                  <urn3:code>phoneCode</urn3:code>
                  <urn3:codeSystem>phoneCodeSyst</urn3:codeSystem>
                  <urn3:codeSystemName>phoneCodeSystName</urn3:codeSystemName>
                  <urn3:codeSystemVersion>1.0</urn3:codeSystemVersion>
                  <urn3:displayName>phoneCode</urn3:displayName>
                  <urn3:originalText>phoneCode</urn3:originalText>
               </urn3:phoneNumberType>
            </urn3:phoneNumber>
            <urn3:secondWitnessAddress xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
               <urn3:addressType>
                  <urn3:code>AddrCode</urn3:code>
                  <urn3:codeSystem>AddrCodeSyst</urn3:codeSystem>
                  <urn3:codeSystemName>AddrCodeSystName</urn3:codeSystemName>
                  <urn3:codeSystemVersion>1.0</urn3:codeSystemVersion>
                  <urn3:displayName>AddrCode</urn3:displayName>
                  <urn3:originalText>AddrCode</urn3:originalText>
               </urn3:addressType>
               <urn3:city>Addr2City</urn3:city>
               <urn3:country>Addr2Country</urn3:country>
               <urn3:state>Addr2State</urn3:state>
               <urn3:streetAddress>Addr2Street</urn3:streetAddress>
               <urn3:zipCode>Addr2Zip</urn3:zipCode>
            </urn3:secondWitnessAddress>
            <urn3:secondWitnessName xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
               <urn3:familyName>Smith</urn3:familyName>
               <urn3:givenName>Sammy</urn3:givenName>
               <urn3:nameType>
                  <urn3:code>nameCode</urn3:code>
                  <urn3:codeSystem>nameCodeSyst</urn3:codeSystem>
                  <urn3:codeSystemName>nameCodeSystName</urn3:codeSystemName>
                  <urn3:codeSystemVersion>1.0</urn3:codeSystemVersion>
                  <urn3:displayName>nameCode</urn3:displayName>
                  <urn3:originalText>nameCode</urn3:originalText>
               </urn3:nameType>
               <urn3:secondNameOrInitials>s</urn3:secondNameOrInitials>
               <urn3:fullName>Sammy S. Smith</urn3:fullName>
            </urn3:secondWitnessName>
            <urn3:secondWitnessPhone xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
               <urn3:areaCode>321</urn3:areaCode>
               <urn3:countryCode>1</urn3:countryCode>
               <urn3:extension>5424</urn3:extension>
               <urn3:localNumber>542-6823</urn3:localNumber>
               <urn3:phoneNumberType>
                  <urn3:code>phoneCode</urn3:code>
                  <urn3:codeSystem>phoneCodeSyst</urn3:codeSystem>
                  <urn3:codeSystemName>phoneCodeSystName</urn3:codeSystemName>
                  <urn3:codeSystemVersion>1.0</urn3:codeSystemVersion>
                  <urn3:displayName>phoneCode</urn3:displayName>
                  <urn3:originalText>phoneCode</urn3:originalText>
               </urn3:phoneNumberType>
            </urn3:secondWitnessPhone>
            <urn3:SSN xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">253-98-7546</urn3:SSN>
            <urn3:uniquePatientId xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">500000000^^^&amp;1.1&amp;ISO</urn3:uniquePatientId>
            <urn3:witnessAddress xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
               <urn3:addressType>
                  <urn3:code>addrCode</urn3:code>
                  <urn3:codeSystem>addrCodeSyst</urn3:codeSystem>
                  <urn3:codeSystemName>addrCodeSystName</urn3:codeSystemName>
                  <urn3:codeSystemVersion>1.0</urn3:codeSystemVersion>
                  <urn3:displayName>addrCode</urn3:displayName>
                  <urn3:originalText>addrCode</urn3:originalText>
               </urn3:addressType>
               <urn3:city>Burnell</urn3:city>
               <urn3:country>USA</urn3:country>
               <urn3:state>FL</urn3:state>
               <urn3:streetAddress>825 North</urn3:streetAddress>
               <urn3:zipCode>32184</urn3:zipCode>
            </urn3:witnessAddress>
            <urn3:witnessName xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
               <urn3:familyName>Smith</urn3:familyName>
               <urn3:givenName>Scott</urn3:givenName>
               <urn3:nameType>
                  <urn3:code>nameCode</urn3:code>
                  <urn3:codeSystem>nameCodeSyst</urn3:codeSystem>
                  <urn3:codeSystemName>nameCodeSystName</urn3:codeSystemName>
                  <urn3:codeSystemVersion>1.0</urn3:codeSystemVersion>
                  <urn3:displayName>nameCode</urn3:displayName>
                  <urn3:originalText>nameCode</urn3:originalText>
               </urn3:nameType>
               <urn3:secondNameOrInitials>S.</urn3:secondNameOrInitials>
               <urn3:fullName>Scott S. Smith</urn3:fullName>
            </urn3:witnessName>
            <urn3:witnessPhone xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
               <urn3:areaCode>321</urn3:areaCode>
               <urn3:countryCode>1</urn3:countryCode>
               <urn3:extension>8432</urn3:extension>
               <urn3:localNumber>985-2239</urn3:localNumber>
               <urn3:phoneNumberType>
                  <urn3:code>phoneCode</urn3:code>
                  <urn3:codeSystem>phoneCodeSyst</urn3:codeSystem>
                  <urn3:codeSystemName>phoneCodeSystName</urn3:codeSystemName>
                  <urn3:codeSystemVersion>1.0</urn3:codeSystemVersion>
                  <urn3:displayName>phoneCode</urn3:displayName>
                  <urn3:originalText>phoneCode</urn3:originalText>
               </urn3:phoneNumberType>
            </urn3:witnessPhone>
            <urn3:userInfo xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
               <urn3:personName>
                  <urn3:familyName>Skagerberg</urn3:familyName>
                  <urn3:givenName>Karl</urn3:givenName>
                  <urn3:nameType>
                     <urn3:code>nameCode</urn3:code>
                     <urn3:codeSystem>nameCodeSyst</urn3:codeSystem>
                     <urn3:codeSystemName>nameCodeSystName</urn3:codeSystemName>
                     <urn3:codeSystemVersion>1.0</urn3:codeSystemVersion>
                     <urn3:displayName>nameCode</urn3:displayName>
                     <urn3:originalText>nameCode</urn3:originalText>
                  </urn3:nameType>
                  <urn3:secondNameOrInitials>S</urn3:secondNameOrInitials>
                  <urn3:fullName>Kasrl S. Skagerberg</urn3:fullName>
               </urn3:personName>
               <urn3:userName>kskagerb</urn3:userName>
               <urn3:org>
                  <urn3:description>${#Project#RemoteHCDescription}</urn3:description>
                  <urn3:homeCommunityId>${#Project#RemoteHCID}</urn3:homeCommunityId>
                  <urn3:name>${#Project#RemoteHCDescription}</urn3:name>
               </urn3:org>
               <urn3:roleCoded>
                  <urn3:code>307969004</urn3:code>
                  <urn3:codeSystem>2.16.840.1.113883.6.96</urn3:codeSystem>
                  <urn3:codeSystemName>SNOMED_CT</urn3:codeSystemName>
                  <urn3:codeSystemVersion>1.0</urn3:codeSystemVersion>
                  <urn3:displayName>Public Health</urn3:displayName>
                  <urn3:originalText>Public Health</urn3:originalText>
               </urn3:roleCoded>
            </urn3:userInfo>
            <urn3:authorized xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">true</urn3:authorized>
            <urn3:purposeOfDisclosureCoded xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
               <urn3:code>PUBLICHEALTH</urn3:code>
               <urn3:codeSystem>2.16.840.1.113883.3.18.7.1</urn3:codeSystem>
               <urn3:codeSystemName>nhin-purpose</urn3:codeSystemName>
               <urn3:codeSystemVersion>1.0</urn3:codeSystemVersion>
               <urn3:displayName>Use or disclosure of Psychotherapy Notes</urn3:displayName>
               <urn3:originalText>Use or disclosure of Psychotherapy Notes</urn3:originalText>
            </urn3:purposeOfDisclosureCoded>
            <urn3:samlAuthnStatement xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
               <urn3:authInstant>2009-04-16T13:15:39Z</urn3:authInstant>
               <urn3:sessionIndex>987</urn3:sessionIndex>
               <urn3:authContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:X509</urn3:authContextClassRef>
               <urn3:subjectLocalityAddress>158.147.185.168</urn3:subjectLocalityAddress>
               <urn3:subjectLocalityDNSName>cs.myharris.net</urn3:subjectLocalityDNSName>
            </urn3:samlAuthnStatement>
            <urn3:samlAuthzDecisionStatement xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
               <urn3:decision>Permit</urn3:decision>
               <urn3:resource>https://158.147.185.168:8181/SamlReceiveService/SamlProcessWS</urn3:resource>
               <urn3:action>TestSaml</urn3:action>
               <urn3:evidence>
                  <urn3:assertion>
                     <urn3:id>40df7c0a-ff3e-4b26-baeb-f2910f6d05a9</urn3:id>
                     <urn3:issueInstant>2009-04-16T13:10:39.093Z</urn3:issueInstant>
                     <urn3:version>2.0</urn3:version>
                     <urn3:issuerFormat>urn:oasis:names:tc:SAML:1.1:nameid-format:X509SubjectName</urn3:issuerFormat>
                     <urn3:issuer>CN=SAML User,OU=Harris,O=HITS,L=Melbourne,ST=FL,C=US</urn3:issuer>
                     <urn3:conditions>
                        <urn3:notBefore>2009-04-16T13:10:39.093Z</urn3:notBefore>
                        <urn3:notOnOrAfter>2009-12-31T12:00:00.000Z</urn3:notOnOrAfter>
                     </urn3:conditions>
                     <urn3:accessConsentPolicy>Claim-Ref-1234</urn3:accessConsentPolicy>
                     <urn3:instanceAccessConsentPolicy>Claim-Instance-1</urn3:instanceAccessConsentPolicy>
                  </urn3:assertion>
               </urn3:evidence>
            </urn3:samlAuthzDecisionStatement>
         </urn:assertion>
      </urn:RespondingGateway_CrossGatewayQueryResponse>
   </soap:Body>
</soap:Envelope>]]></con:request>
            <con:assertion type="SOAP Response"/>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:properties/>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Response - Audit log" searchProperties="true">
      <con:settings/>
      <con:testStep type="groovy" name="Generate patient ID for Doc Query">
        <con:settings/>
        <con:config>
          <script>def localAA = context.findProperty('LocalAA')
def dqPatientID = context.findProperty('DQPatientID')

context.testCase.setPropertyValue('FullPatientID', "'${dqPatientID}^^^&amp;amp;${localAA}&amp;amp;ISO'");</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Set User ID">
        <con:settings/>
        <con:config>
          <script>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

def DDQUserID = context.findProperty( "DDQUserID" );

def nowDate = new Date();
context.testCase.setPropertyValue('UserId',"${DDQUserID}${nowDate}1");</script>
        </con:config>
      </con:testStep>
      <con:testStep type="request" name="NhincResponse">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>NhincProxyDocQueryDeferredResponseBindingSoap</con:interface>
          <con:operation>RespondingGateway_CrossGatewayQuery</con:operation>
          <con:request name="NhincResponse">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${#Project#Endpoint-DeferredDocQuery}</con:endpoint>
            <con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:urn="urn:gov:hhs:fha:nhinc:common:nhinccommonproxy" xmlns:urn1="urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0" xmlns:urn2="urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0" xmlns:urn3="urn:gov:hhs:fha:nhinc:common:nhinccommon">
   <soap:Header/>
   <soap:Body>
      <urn:RespondingGateway_CrossGatewayQueryResponse>
         <urn1:AdhocQueryResponse status="?">
            <urn2:RegistryObjectList/>
         </urn1:AdhocQueryResponse>
          <urn:assertion>
            <urn3:address xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
               <urn3:addressType>
                  <urn3:code>AddrCode</urn3:code>
                  <urn3:codeSystem>AddrCodeSyst</urn3:codeSystem>
                  <urn3:codeSystemName>AddrCodeSystName</urn3:codeSystemName>
                  <urn3:codeSystemVersion>1.0</urn3:codeSystemVersion>
                  <urn3:displayName>AddrCode</urn3:displayName>
                  <urn3:originalText>AddrCode</urn3:originalText>
               </urn3:addressType>nam
               <urn3:city>AddrCity</urn3:city>
               <urn3:country>AddrCountry</urn3:country>
               <urn3:state>AddrState</urn3:state>
               <urn3:streetAddress>AddrStreet</urn3:streetAddress>
               <urn3:zipCode>AddrZip</urn3:zipCode>
            </urn3:address>
            <urn3:dateOfBirth xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">06/04/1959 05:21:00</urn3:dateOfBirth>
            <urn3:explanationNonClaimantSignature xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">Electronic</urn3:explanationNonClaimantSignature>
            <urn3:haveSecondWitnessSignature xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">false</urn3:haveSecondWitnessSignature>
            <urn3:haveSignature xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">false</urn3:haveSignature>
            <urn3:haveWitnessSignature xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">false</urn3:haveWitnessSignature>
            <urn3:homeCommunity xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
               <urn3:description>${#Project#RemoteHCDescription}</urn3:description>
               <urn3:homeCommunityId>${#Project#RemoteHCID}</urn3:homeCommunityId>
               <urn3:name>${#Project#RemoteHCDescription}</urn3:name>
            </urn3:homeCommunity>
            <urn3:personName xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
               <urn3:familyName>Smith</urn3:familyName>
               <urn3:givenName>Sandy</urn3:givenName>
               <urn3:nameType>
                  <urn3:code>nameCode</urn3:code>
                  <urn3:codeSystem>nameCodeSyst</urn3:codeSystem>
                  <urn3:codeSystemName>nameCodeSystName</urn3:codeSystemName>
                  <urn3:codeSystemVersion>1.0</urn3:codeSystemVersion>
                  <urn3:displayName>nameCode</urn3:displayName>
                  <urn3:originalText>nameCode</urn3:originalText>
               </urn3:nameType>
               <urn3:secondNameOrInitials>S</urn3:secondNameOrInitials>
               <urn3:fullName>Sandy S. Smith</urn3:fullName>
            </urn3:personName>
            <urn3:phoneNumber xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
               <urn3:areaCode>321</urn3:areaCode>
               <urn3:countryCode>1</urn3:countryCode>
               <urn3:extension>5436</urn3:extension>
               <urn3:localNumber>253-6849</urn3:localNumber>
               <urn3:phoneNumberType>
                  <urn3:code>phoneCode</urn3:code>
                  <urn3:codeSystem>phoneCodeSyst</urn3:codeSystem>
                  <urn3:codeSystemName>phoneCodeSystName</urn3:codeSystemName>
                  <urn3:codeSystemVersion>1.0</urn3:codeSystemVersion>
                  <urn3:displayName>phoneCode</urn3:displayName>
                  <urn3:originalText>phoneCode</urn3:originalText>
               </urn3:phoneNumberType>
            </urn3:phoneNumber>
            <urn3:secondWitnessAddress xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
               <urn3:addressType>
                  <urn3:code>AddrCode</urn3:code>
                  <urn3:codeSystem>AddrCodeSyst</urn3:codeSystem>
                  <urn3:codeSystemName>AddrCodeSystName</urn3:codeSystemName>
                  <urn3:codeSystemVersion>1.0</urn3:codeSystemVersion>
                  <urn3:displayName>AddrCode</urn3:displayName>
                  <urn3:originalText>AddrCode</urn3:originalText>
               </urn3:addressType>
               <urn3:city>Addr2City</urn3:city>
               <urn3:country>Addr2Country</urn3:country>
               <urn3:state>Addr2State</urn3:state>
               <urn3:streetAddress>Addr2Street</urn3:streetAddress>
               <urn3:zipCode>Addr2Zip</urn3:zipCode>
            </urn3:secondWitnessAddress>
            <urn3:secondWitnessName xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
               <urn3:familyName>Smith</urn3:familyName>
               <urn3:givenName>Sammy</urn3:givenName>
               <urn3:nameType>
                  <urn3:code>nameCode</urn3:code>
                  <urn3:codeSystem>nameCodeSyst</urn3:codeSystem>
                  <urn3:codeSystemName>nameCodeSystName</urn3:codeSystemName>
                  <urn3:codeSystemVersion>1.0</urn3:codeSystemVersion>
                  <urn3:displayName>nameCode</urn3:displayName>
                  <urn3:originalText>nameCode</urn3:originalText>
               </urn3:nameType>
               <urn3:secondNameOrInitials>s</urn3:secondNameOrInitials>
               <urn3:fullName>Sammy S. Smith</urn3:fullName>
            </urn3:secondWitnessName>
            <urn3:secondWitnessPhone xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
               <urn3:areaCode>321</urn3:areaCode>
               <urn3:countryCode>1</urn3:countryCode>
               <urn3:extension>5424</urn3:extension>
               <urn3:localNumber>542-6823</urn3:localNumber>
               <urn3:phoneNumberType>
                  <urn3:code>phoneCode</urn3:code>
                  <urn3:codeSystem>phoneCodeSyst</urn3:codeSystem>
                  <urn3:codeSystemName>phoneCodeSystName</urn3:codeSystemName>
                  <urn3:codeSystemVersion>1.0</urn3:codeSystemVersion>
                  <urn3:displayName>phoneCode</urn3:displayName>
                  <urn3:originalText>phoneCode</urn3:originalText>
               </urn3:phoneNumberType>
            </urn3:secondWitnessPhone>
            <urn3:SSN xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">253-98-7546</urn3:SSN>
            <urn3:uniquePatientId xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">500000000^^^&amp;1.1&amp;ISO</urn3:uniquePatientId>
            <urn3:witnessAddress xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
               <urn3:addressType>
                  <urn3:code>addrCode</urn3:code>
                  <urn3:codeSystem>addrCodeSyst</urn3:codeSystem>
                  <urn3:codeSystemName>addrCodeSystName</urn3:codeSystemName>
                  <urn3:codeSystemVersion>1.0</urn3:codeSystemVersion>
                  <urn3:displayName>addrCode</urn3:displayName>
                  <urn3:originalText>addrCode</urn3:originalText>
               </urn3:addressType>
               <urn3:city>Burnell</urn3:city>
               <urn3:country>USA</urn3:country>
               <urn3:state>FL</urn3:state>
               <urn3:streetAddress>825 North</urn3:streetAddress>
               <urn3:zipCode>32184</urn3:zipCode>
            </urn3:witnessAddress>
            <urn3:witnessName xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
               <urn3:familyName>Smith</urn3:familyName>
               <urn3:givenName>Scott</urn3:givenName>
               <urn3:nameType>
                  <urn3:code>nameCode</urn3:code>
                  <urn3:codeSystem>nameCodeSyst</urn3:codeSystem>
                  <urn3:codeSystemName>nameCodeSystName</urn3:codeSystemName>
                  <urn3:codeSystemVersion>1.0</urn3:codeSystemVersion>
                  <urn3:displayName>nameCode</urn3:displayName>
                  <urn3:originalText>nameCode</urn3:originalText>
               </urn3:nameType>
               <urn3:secondNameOrInitials>S.</urn3:secondNameOrInitials>
               <urn3:fullName>Scott S. Smith</urn3:fullName>
            </urn3:witnessName>
            <urn3:witnessPhone xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
               <urn3:areaCode>321</urn3:areaCode>
               <urn3:countryCode>1</urn3:countryCode>
               <urn3:extension>8432</urn3:extension>
               <urn3:localNumber>985-2239</urn3:localNumber>
               <urn3:phoneNumberType>
                  <urn3:code>phoneCode</urn3:code>
                  <urn3:codeSystem>phoneCodeSyst</urn3:codeSystem>
                  <urn3:codeSystemName>phoneCodeSystName</urn3:codeSystemName>
                  <urn3:codeSystemVersion>1.0</urn3:codeSystemVersion>
                  <urn3:displayName>phoneCode</urn3:displayName>
                  <urn3:originalText>phoneCode</urn3:originalText>
               </urn3:phoneNumberType>
            </urn3:witnessPhone>
            <urn3:userInfo xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
               <urn3:personName>
                  <urn3:familyName>Skagerberg</urn3:familyName>
                  <urn3:givenName>Karl</urn3:givenName>
                  <urn3:nameType>
                     <urn3:code>nameCode</urn3:code>
                     <urn3:codeSystem>nameCodeSyst</urn3:codeSystem>
                     <urn3:codeSystemName>nameCodeSystName</urn3:codeSystemName>
                     <urn3:codeSystemVersion>1.0</urn3:codeSystemVersion>
                     <urn3:displayName>nameCode</urn3:displayName>
                     <urn3:originalText>nameCode</urn3:originalText>
                  </urn3:nameType>
                  <urn3:secondNameOrInitials>S</urn3:secondNameOrInitials>
                  <urn3:fullName>Kasrl S. Skagerberg</urn3:fullName>
               </urn3:personName>
               <urn3:userName>${#TestCase#UserId}</urn3:userName>
               <urn3:org>
                  <urn3:description>${#Project#RemoteHCDescription}</urn3:description>
                  <urn3:homeCommunityId>${#Project#RemoteHCID}</urn3:homeCommunityId>
                  <urn3:name>${#Project#RemoteHCDescription}</urn3:name>
               </urn3:org>
               <urn3:roleCoded>
                  <urn3:code>307969004</urn3:code>
                  <urn3:codeSystem>2.16.840.1.113883.6.96</urn3:codeSystem>
                  <urn3:codeSystemName>SNOMED_CT</urn3:codeSystemName>
                  <urn3:codeSystemVersion>1.0</urn3:codeSystemVersion>
                  <urn3:displayName>Public Health</urn3:displayName>
                  <urn3:originalText>Public Health</urn3:originalText>
               </urn3:roleCoded>
            </urn3:userInfo>
            <urn3:authorized xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">true</urn3:authorized>
            <urn3:purposeOfDisclosureCoded xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
               <urn3:code>PUBLICHEALTH</urn3:code>
               <urn3:codeSystem>2.16.840.1.113883.3.18.7.1</urn3:codeSystem>
               <urn3:codeSystemName>nhin-purpose</urn3:codeSystemName>
               <urn3:codeSystemVersion>1.0</urn3:codeSystemVersion>
               <urn3:displayName>Use or disclosure of Psychotherapy Notes</urn3:displayName>
               <urn3:originalText>Use or disclosure of Psychotherapy Notes</urn3:originalText>
            </urn3:purposeOfDisclosureCoded>
            <urn3:samlAuthnStatement xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
               <urn3:authInstant>2009-04-16T13:15:39Z</urn3:authInstant>
               <urn3:sessionIndex>987</urn3:sessionIndex>
               <urn3:authContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:X509</urn3:authContextClassRef>
               <urn3:subjectLocalityAddress>158.147.185.168</urn3:subjectLocalityAddress>
               <urn3:subjectLocalityDNSName>cs.myharris.net</urn3:subjectLocalityDNSName>
            </urn3:samlAuthnStatement>
            <urn3:samlAuthzDecisionStatement xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
               <urn3:decision>Permit</urn3:decision>
               <urn3:resource>https://158.147.185.168:8181/SamlReceiveService/SamlProcessWS</urn3:resource>
               <urn3:action>TestSaml</urn3:action>
               <urn3:evidence>
                  <urn3:assertion>
                     <urn3:id>40df7c0a-ff3e-4b26-baeb-f2910f6d05a9</urn3:id>
                     <urn3:issueInstant>2009-04-16T13:10:39.093Z</urn3:issueInstant>
                     <urn3:version>2.0</urn3:version>
                     <urn3:issuerFormat>urn:oasis:names:tc:SAML:1.1:nameid-format:X509SubjectName</urn3:issuerFormat>
                     <urn3:issuer>CN=SAML User,OU=Harris,O=HITS,L=Melbourne,ST=FL,C=US</urn3:issuer>
                     <urn3:conditions>
                        <urn3:notBefore>2009-04-16T13:10:39.093Z</urn3:notBefore>
                        <urn3:notOnOrAfter>2009-12-31T12:00:00.000Z</urn3:notOnOrAfter>
                     </urn3:conditions>
                     <urn3:accessConsentPolicy>Claim-Ref-1234</urn3:accessConsentPolicy>
                     <urn3:instanceAccessConsentPolicy>Claim-Instance-1</urn3:instanceAccessConsentPolicy>
                  </urn3:assertion>
               </urn3:evidence>
            </urn3:samlAuthzDecisionStatement>
         </urn:assertion>
      </urn:RespondingGateway_CrossGatewayQueryResponse>
   </soap:Body>
</soap:Envelope>]]></con:request>
            <con:assertion type="SOAP Response"/>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:testStep type="request" name="Audit Events">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>NhincProxyAuditLogQueryBindingSoap</con:interface>
          <con:operation>findAuditEvents</con:operation>
          <con:request name="Audit Events">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${#Project#Endpoint-AuditLogQuery}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope" xmlns:urn="urn:gov:hhs:fha:nhinc:common:nhinccommonproxy" xmlns:aud="http://nhinc.services.com/schema/auditmessage" xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon" xmlns:add="http://schemas.xmlsoap.org/ws/2004/08/addressing">
   <soapenv:Header/>
   <soapenv:Body projectName="DeferredDQ-RespondingGWreceivesRequest" testCase="Request - Audit Log">
      <urn:FindAuditEventsRequest>
         <aud:FindAuditEvents>
         <aud:patientId>${#TestCase#FullPatientID}</aud:patientId>
            <aud:userId>${#TestCase#UserId}</aud:userId>
            <aud:beginDateTime>${#TestCase#startDate}</aud:beginDateTime>
            <aud:endDateTime>${#TestCase#endDate}</aud:endDateTime>
         </aud:FindAuditEvents>
         <urn:assertion>
            <urn1:address>
               <urn1:addressType>
                  <urn1:code>AddrCode</urn1:code>
                  <urn1:codeSystem>AddrCodeSyst</urn1:codeSystem>
                  <urn1:codeSystemName>AddrCodeSystName</urn1:codeSystemName>
                  <urn1:codeSystemVersion>1.0</urn1:codeSystemVersion>
                  <urn1:displayName>AddrCode</urn1:displayName>
                  <urn1:originalText>AddrCode</urn1:originalText>
               </urn1:addressType>
               <urn1:city>AddrCity</urn1:city>
               <urn1:country>AddrCountry</urn1:country>
               <urn1:state>AddrState</urn1:state>
               <urn1:streetAddress>AddrStreet</urn1:streetAddress>
               <urn1:zipCode>AddrZip</urn1:zipCode>
            </urn1:address>
            <urn1:dateOfBirth>06/04/1959 05:21:00</urn1:dateOfBirth>
            <urn1:explanationNonClaimantSignature>Electronic</urn1:explanationNonClaimantSignature>
            <urn1:haveSecondWitnessSignature>false</urn1:haveSecondWitnessSignature>
            <urn1:haveSignature>false</urn1:haveSignature>
            <urn1:haveWitnessSignature>false</urn1:haveWitnessSignature>
            <urn1:homeCommunity>
               <urn1:description>${#Project#RemoteHCDescription}</urn1:description>
               <urn1:homeCommunityId>${#Project#RemoteHCID}</urn1:homeCommunityId>
               <urn1:name>${#Project#RemoteHCDescription}</urn1:name>
            </urn1:homeCommunity>
            <urn1:personName>
               <urn1:familyName>Smith</urn1:familyName>
               <urn1:givenName>Sandy</urn1:givenName>
               <urn1:nameType>
                  <urn1:code>nameCode</urn1:code>
                  <urn1:codeSystem>nameCodeSyst</urn1:codeSystem>
                  <urn1:codeSystemName>nameCodeSystName</urn1:codeSystemName>
                  <urn1:codeSystemVersion>1.0</urn1:codeSystemVersion>
                  <urn1:displayName>nameCode</urn1:displayName>
                  <urn1:originalText>nameCode</urn1:originalText>
               </urn1:nameType>
               <urn1:secondNameOrInitials>S</urn1:secondNameOrInitials>
               <urn1:fullName>Sandy S. Smith</urn1:fullName>
            </urn1:personName>
            <urn1:phoneNumber>
               <urn1:areaCode>321</urn1:areaCode>
               <urn1:countryCode>1</urn1:countryCode>
               <urn1:extension>5436</urn1:extension>
               <urn1:localNumber>253-6849</urn1:localNumber>
               <urn1:phoneNumberType>
                  <urn1:code>phoneCode</urn1:code>
                  <urn1:codeSystem>phoneCodeSyst</urn1:codeSystem>
                  <urn1:codeSystemName>phoneCodeSystName</urn1:codeSystemName>
                  <urn1:codeSystemVersion>1.0</urn1:codeSystemVersion>
                  <urn1:displayName>phoneCode</urn1:displayName>
                  <urn1:originalText>phoneCode</urn1:originalText>
               </urn1:phoneNumberType>
            </urn1:phoneNumber>
            <urn1:secondWitnessAddress>
               <urn1:addressType>
                  <urn1:code>AddrCode</urn1:code>
                  <urn1:codeSystem>AddrCodeSyst</urn1:codeSystem>
                  <urn1:codeSystemName>AddrCodeSystName</urn1:codeSystemName>
                  <urn1:codeSystemVersion>1.0</urn1:codeSystemVersion>
                  <urn1:displayName>AddrCode</urn1:displayName>
                  <urn1:originalText>AddrCode</urn1:originalText>
               </urn1:addressType>
               <urn1:city>Addr2City</urn1:city>
               <urn1:country>Addr2Country</urn1:country>
               <urn1:state>Addr2State</urn1:state>
               <urn1:streetAddress>Addr2Street</urn1:streetAddress>
               <urn1:zipCode>Addr2Zip</urn1:zipCode>
            </urn1:secondWitnessAddress>
            <urn1:secondWitnessName>
               <urn1:familyName>Smith</urn1:familyName>
               <urn1:givenName>Sammy</urn1:givenName>
               <urn1:nameType>
                  <urn1:code>nameCode</urn1:code>
                  <urn1:codeSystem>nameCodeSyst</urn1:codeSystem>
                  <urn1:codeSystemName>nameCodeSystName</urn1:codeSystemName>
                  <urn1:codeSystemVersion>1.0</urn1:codeSystemVersion>
                  <urn1:displayName>nameCode</urn1:displayName>
                  <urn1:originalText>nameCode</urn1:originalText>
               </urn1:nameType>
               <urn1:secondNameOrInitials>s</urn1:secondNameOrInitials>
               <urn1:fullName>Sammy S. Smith</urn1:fullName>
            </urn1:secondWitnessName>
            <urn1:secondWitnessPhone>
               <urn1:areaCode>321</urn1:areaCode>
               <urn1:countryCode>1</urn1:countryCode>
               <urn1:extension>5424</urn1:extension>
               <urn1:localNumber>542-6823</urn1:localNumber>
               <urn1:phoneNumberType>
                  <urn1:code>phoneCode</urn1:code>
                  <urn1:codeSystem>phoneCodeSyst</urn1:codeSystem>
                  <urn1:codeSystemName>phoneCodeSystName</urn1:codeSystemName>
                  <urn1:codeSystemVersion>1.0</urn1:codeSystemVersion>
                  <urn1:displayName>phoneCode</urn1:displayName>
                  <urn1:originalText>phoneCode</urn1:originalText>
               </urn1:phoneNumberType>
            </urn1:secondWitnessPhone>
            <urn1:SSN>253-98-7546</urn1:SSN>
            <urn1:uniquePatientId>500000000^^^&amp;1.1&amp;ISO</urn1:uniquePatientId>
            <urn1:witnessAddress>
               <urn1:addressType>
                  <urn1:code>addrCode</urn1:code>
                  <urn1:codeSystem>addrCodeSyst</urn1:codeSystem>
                  <urn1:codeSystemName>addrCodeSystName</urn1:codeSystemName>
                  <urn1:codeSystemVersion>1.0</urn1:codeSystemVersion>
                  <urn1:displayName>addrCode</urn1:displayName>
                  <urn1:originalText>addrCode</urn1:originalText>
               </urn1:addressType>
               <urn1:city>Burnell</urn1:city>
               <urn1:country>USA</urn1:country>
               <urn1:state>FL</urn1:state>
               <urn1:streetAddress>825 North</urn1:streetAddress>
               <urn1:zipCode>32184</urn1:zipCode>
            </urn1:witnessAddress>
            <urn1:witnessName>
               <urn1:familyName>Smith</urn1:familyName>
               <urn1:givenName>Scott</urn1:givenName>
               <urn1:nameType>
                  <urn1:code>nameCode</urn1:code>
                  <urn1:codeSystem>nameCodeSyst</urn1:codeSystem>
                  <urn1:codeSystemName>nameCodeSystName</urn1:codeSystemName>
                  <urn1:codeSystemVersion>1.0</urn1:codeSystemVersion>
                  <urn1:displayName>nameCode</urn1:displayName>
                  <urn1:originalText>nameCode</urn1:originalText>
               </urn1:nameType>
               <urn1:secondNameOrInitials>S.</urn1:secondNameOrInitials>
               <urn1:fullName>Scott S. Smith</urn1:fullName>
            </urn1:witnessName>
            <urn1:witnessPhone>
               <urn1:areaCode>321</urn1:areaCode>
               <urn1:countryCode>1</urn1:countryCode>
               <urn1:extension>8432</urn1:extension>
               <urn1:localNumber>985-2239</urn1:localNumber>
               <urn1:phoneNumberType>
                  <urn1:code>phoneCode</urn1:code>
                  <urn1:codeSystem>phoneCodeSyst</urn1:codeSystem>
                  <urn1:codeSystemName>phoneCodeSystName</urn1:codeSystemName>
                  <urn1:codeSystemVersion>1.0</urn1:codeSystemVersion>
                  <urn1:displayName>phoneCode</urn1:displayName>
                  <urn1:originalText>phoneCode</urn1:originalText>
               </urn1:phoneNumberType>
            </urn1:witnessPhone>
            <urn1:userInfo>
               <urn1:personName>
                  <urn1:familyName>Skagerberg</urn1:familyName>
                  <urn1:givenName>Karl</urn1:givenName>
                  <urn1:nameType>
                     <urn1:code>nameCode</urn1:code>
                     <urn1:codeSystem>nameCodeSyst</urn1:codeSystem>
                     <urn1:codeSystemName>nameCodeSystName</urn1:codeSystemName>
                     <urn1:codeSystemVersion>1.0</urn1:codeSystemVersion>
                     <urn1:displayName>nameCode</urn1:displayName>
                     <urn1:originalText>nameCode</urn1:originalText>
                  </urn1:nameType>
                  <urn1:secondNameOrInitials>S</urn1:secondNameOrInitials>
                  <urn1:fullName>Kasrl S. Skagerberg</urn1:fullName>
               </urn1:personName>
               <urn1:userName>kskagerb</urn1:userName>
               <urn1:org>
                  <urn1:description>${#Project#RemoteHCDescription}</urn1:description>
                  <urn1:homeCommunityId>${#Project#RemoteHCID}</urn1:homeCommunityId>
                  <urn1:name>${#Project#RemoteHCDescription}</urn1:name>
               </urn1:org>
               <urn1:roleCoded>
                  <urn1:code>307969004</urn1:code>
                  <urn1:codeSystem>2.16.840.1.113883.6.96</urn1:codeSystem>
                  <urn1:codeSystemName>SNOMED_CT</urn1:codeSystemName>
                  <urn1:codeSystemVersion>1.0</urn1:codeSystemVersion>
                  <urn1:displayName>Public Health</urn1:displayName>
                  <urn1:originalText>Public Health</urn1:originalText>
               </urn1:roleCoded>
            </urn1:userInfo>
            <urn1:authorized>true</urn1:authorized>
            <urn1:purposeOfDisclosureCoded>
               <urn1:code>PUBLICHEALTH</urn1:code>
               <urn1:codeSystem>2.16.840.1.113883.3.18.7.1</urn1:codeSystem>
               <urn1:codeSystemName>nhin-purpose</urn1:codeSystemName>
               <urn1:codeSystemVersion>1.0</urn1:codeSystemVersion>
               <urn1:displayName>Use or disclosure of Psychotherapy Notes</urn1:displayName>
               <urn1:originalText>Use or disclosure of Psychotherapy Notes</urn1:originalText>
            </urn1:purposeOfDisclosureCoded>
            <urn1:samlAuthnStatement>
               <urn1:authInstant>2009-04-16T13:15:39Z</urn1:authInstant>
               <urn1:sessionIndex>987</urn1:sessionIndex>
               <urn1:authContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:X509</urn1:authContextClassRef>
               <urn1:subjectLocalityAddress>158.147.185.168</urn1:subjectLocalityAddress>
               <urn1:subjectLocalityDNSName>cs.myharris.net</urn1:subjectLocalityDNSName>
            </urn1:samlAuthnStatement>
            <urn1:samlAuthzDecisionStatement>
               <urn1:decision>Permit</urn1:decision>
               <urn1:resource>https://158.147.185.168:8181/SamlReceiveService/SamlProcessWS</urn1:resource>
               <urn1:action>TestSaml</urn1:action>
               <urn1:evidence>
                  <urn1:assertion>
                     <urn1:id>40df7c0a-ff3e-4b26-baeb-f2910f6d05a9</urn1:id>
                     <urn1:issueInstant>2009-04-16T13:10:39.093Z</urn1:issueInstant>
                     <urn1:version>2.0</urn1:version>
                     <urn1:issuerFormat>urn:oasis:names:tc:SAML:1.1:nameid-format:X509SubjectName</urn1:issuerFormat>
                     <urn1:issuer>CN=SAML User,OU=Harris,O=HITS,L=Melbourne,ST=FL,C=US</urn1:issuer>
                     <urn1:conditions>
                        <urn1:notBefore>2009-04-16T13:10:39.093Z</urn1:notBefore>
                        <urn1:notOnOrAfter>2009-12-31T12:00:00.000Z</urn1:notOnOrAfter>
                     </urn1:conditions>
                     <urn1:accessConsentPolicy>Claim-Ref-1234</urn1:accessConsentPolicy>
                     <urn1:instanceAccessConsentPolicy>Claim-Instance-1</urn1:instanceAccessConsentPolicy>
                  </urn1:assertion>
               </urn1:evidence>
            </urn1:samlAuthzDecisionStatement>
         </urn:assertion>
         <urn:nhinTargetSystem>
            <urn1:homeCommunity>
               <urn1:description>${#Project#LocalHCDescription}</urn1:description>
               <urn1:homeCommunityId>${#Project#LocalHCID}</urn1:homeCommunityId>
               <urn1:name>${#Project#LocalHCDescription}</urn1:name>
            </urn1:homeCommunity>
         </urn:nhinTargetSystem>
      </urn:FindAuditEventsRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="SOAP Fault Assertion"/>
            <con:assertion type="SOAP Response"/>
            <con:assertion type="Schema Compliance">
              <con:configuration>
                <definition/>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match">
              <con:configuration>
                <path>declare namespace ns16='http://nhinc.services.com/schema/auditmessage';
count(//ns16:FindAuditEventsResponse[1]/ns16:findAuditEventsReturn)</path>
                <content>3</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              </con:configuration>
            </con:assertion>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:gov:hhs:fha:nhinc:nhincproxyauditlogquery/NhincProxyAuditLogQueryPortType/findAuditEventsRequest" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:properties/>
      <con:reportParameters/>
    </con:testCase>
    <con:properties/>
    <con:reportParameters/>
  </con:testSuite>
  <con:requirements/>
  <con:properties>
    <con:property>
      <con:name>RemoteAA</con:name>
      <con:value>2.2</con:value>
    </con:property>
    <con:property>
      <con:name>DQDocID</con:name>
      <con:value>1.123401.11111</con:value>
    </con:property>
    <con:property>
      <con:name>DBPass</con:name>
      <con:value>nhincpass</con:value>
    </con:property>
    <con:property>
      <con:name>DQPatientID</con:name>
      <con:value>D123401</con:value>
    </con:property>
    <con:property>
      <con:name>DDQUserID</con:name>
      <con:value>DeferredDQ</con:value>
    </con:property>
    <con:property>
      <con:name>DBHost</con:name>
      <con:value>localhost</con:value>
    </con:property>
    <con:property>
      <con:name>LocalAA</con:name>
      <con:value>1.1</con:value>
    </con:property>
    <con:property>
      <con:name>RemoteHCID</con:name>
      <con:value>2.2</con:value>
    </con:property>
    <con:property>
      <con:name>RemoteHCDescription</con:name>
      <con:value>InternalTest2</con:value>
    </con:property>
    <con:property>
      <con:name>Endpoint-DeferredDocQuery</con:name>
      <con:value>http://localhost:8080/CONNECTMsgProxyWeb/EntityService/PassthruDocQueryDeferredResponseUnsecured</con:value>
    </con:property>
    <con:property>
      <con:name>LocalHCID</con:name>
      <con:value>1.1</con:value>
    </con:property>
    <con:property>
      <con:name>DBPort</con:name>
      <con:value>3306</con:value>
    </con:property>
    <con:property>
      <con:name>DBUser</con:name>
      <con:value>nhincuser</con:value>
    </con:property>
    <con:property>
      <con:name>Endpoint-AuditLogQuery</con:name>
      <con:value>http://localhost:8080/CONNECTAdapter/NhincProxyAuditQuery</con:value>
    </con:property>
    <con:property>
      <con:name>LocalHCDescription</con:name>
      <con:value>InternalTest1</con:value>
    </con:property>
  </con:properties>
  <con:afterLoadScript>def propertiesFilename = project.path[0..(project.path.size()-4)] + 'properties'
def propertiesFile = new File(propertiesFilename)
if (propertiesFile.exists()) {
	def props = new Properties()
	props.load(new FileInputStream(propertiesFile))
	props.each { key, value ->
	    project.setPropertyValue(key, value)
	}
}


TimeZone.setDefault(TimeZone.getTimeZone("UTC"))
def testRunListener = [
  afterRun: { testRunner, runContext -> },
  afterStep: { testRunner, runContext, result -> },
  beforeStep: { testRunner, runContext -> },
  beforeStep: { testRunner, runContext, testStep -> },
  beforeRun: { testRunner, runContext -> 
    use (org.codehaus.groovy.runtime.TimeCategory) {
      def startDate = 5.minutes.ago
      def endDate = 5.minutes.from.now
      def expireDate = 30.days.from.now

      def df = "yyyy-MM-dd'T'HH:mm:ss'Z'"
      def dfSig = "MM/dd/yyyy' 'HH:mm:ss"

      runContext.testCase.setPropertyValue("startDate", startDate.format(df))
      runContext.testCase.setPropertyValue("endDate", endDate.format(df))
      runContext.testCase.setPropertyValue("sigDate", startDate.format(dfSig))
      runContext.testCase.setPropertyValue("expireDate", expireDate.format(df))
    }
  }   
] as com.eviware.soapui.model.testsuite.TestRunListener

project.testSuiteList*.testCaseList.flatten()*.addTestRunListener(testRunListener)



com.eviware.soapui.impl.wsdl.testcase.WsdlTestRunContext.metaClass.findProperty = { propertyName ->
    return delegate.getProperty(propertyName) ?:
                delegate.testCase.getPropertyValue(propertyName) ?:
                delegate.testCase.testSuite.getPropertyValue(propertyName) ?:
                delegate.testCase.testSuite.project.getPropertyValue(propertyName)
}

com.eviware.soapui.impl.wsdl.testcase.WsdlTestRunContext.metaClass.withSql = { dbOrPropertyName, block ->
  def dbName = delegate.findProperty(dbOrPropertyName) ?: dbOrPropertyName
  def host = delegate.findProperty('DBHost')
  def port = delegate.findProperty('DBPort')
  def user = delegate.findProperty('DBUser')
  def pass = delegate.findProperty('DBPass')
  
  def connectString = "jdbc:mysql://${host}:${port}/${dbName}"
  def sql = groovy.sql.Sql.newInstance(connectString, user, pass, "com.mysql.jdbc.Driver");
  try {
     block(sql)
  } finally {
    sql.close()
  }
}</con:afterLoadScript>
  <con:wssContainer/>
  <con:databaseConnectionContainer/>
  <con:reporting>
    <con:reportTemplates/>
    <con:xmlTemplates/>
    <con:parameters/>
  </con:reporting>
</con:soapui-project>
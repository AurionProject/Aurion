<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project name="EntityPatientDiscoveryPatchMergesTo3.1" resourceRoot="" soapui-version="4.0.0" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:interface xsi:type="con:WsdlInterface" wsaVersion="NONE" name="EntityPatientDiscoveryBindingSoap" type="wsdl" bindingName="{urn:gov:hhs:fha:nhinc:entitypatientdiscovery}EntityPatientDiscoveryBindingSoap" soapVersion="1_2" anonymous="optional" definition="file:/C:/Projects/NHINC/Current/Product/Production/Common/Interfaces/src/wsdl/EntityPatientDiscovery.wsdl" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:endpoints><con:endpoint>https://localhost:${HttpsDefaultPort}/NhinConnect/EntityPatientDiscovery</con:endpoint></con:endpoints><con:operation isOneWay="false" action="urn:RespondingGateway_PRPA_IN201305UV02" name="RespondingGateway_PRPA_IN201305UV02" bindingOperationName="RespondingGateway_PRPA_IN201305UV02" type="Request-Response" outputName="RespondingGateway_PRPA_IN201306UV02Response" inputName="RespondingGateway_PRPA_IN201305UV02Request" receivesAttachments="false" sendsAttachments="false"><con:settings/></con:operation></con:interface><con:interface xsi:type="con:WsdlInterface" wsaVersion="NONE" name="NhincProxyPatientDiscoveryBinding" type="wsdl" bindingName="{urn:gov:hhs:fha:nhinc:nhincproxypatientdiscovery}NhincProxyPatientDiscoveryBinding" soapVersion="1_2" anonymous="optional" definition="file:/C:/Projects/NHINC/Current/Product/Production/Common/Interfaces/src/wsdl/NhincProxyPatientDiscovery.wsdl" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:endpoints><con:endpoint>https://localhost:8181/CONNECTGatewayTest/NhinPatientDiscoveryTestHelper</con:endpoint><con:endpoint>http://localhost:${HttpDefaultPort}/NhinConnect/NhincProxyPatientDiscovery</con:endpoint></con:endpoints><con:operation isOneWay="false" action="urn:Proxy_PRPA_IN201305UV" name="Proxy_PRPA_IN201305UV" bindingOperationName="Proxy_PRPA_IN201305UV" type="Request-Response" outputName="Proxy_PRPA_IN201306UVProxyResponse" inputName="Proxy_PRPA_IN201305UVProxyRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/></con:operation></con:interface><con:interface xsi:type="con:WsdlInterface" wsaVersion="NONE" name="PatientCorrelationBinding" type="wsdl" bindingName="{urn:gov:hhs:fha:nhinc:nhinccomponentpatientcorrelation}PatientCorrelationBinding" soapVersion="1_2" anonymous="optional" definition="http://localhost:8080/CONNECTAdapter/PatientCorrelationService?wsdl" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:endpoints><con:endpoint>http://localhost:8080/CONNECTAdapter/PatientCorrelationService</con:endpoint></con:endpoints><con:operation isOneWay="false" action="AddPatientCorrelation" name="AddPatientCorrelation" bindingOperationName="AddPatientCorrelation" type="Request-Response" outputName="AddPatientCorrelationResponse" inputName="AddPatientCorrelationRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/></con:operation><con:operation isOneWay="false" action="RetrievePatientCorrelations" name="RetrievePatientCorrelations" bindingOperationName="RetrievePatientCorrelations" type="Request-Response" outputName="RetrievePatientCorrelationsResponse" inputName="RetrievePatientCorrelationsRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/></con:operation></con:interface><con:interface xsi:type="con:WsdlInterface" wsaVersion="NONE" name="AdapterPolicyEngineBindingSoap" type="wsdl" bindingName="{urn:gov:hhs:fha:nhinc:adapterpolicyengine}AdapterPolicyEngineBindingSoap" soapVersion="1_2" anonymous="optional" definition="file:/C:/Projects/NHINC/Current/Product/Production/Common/Interfaces/src/wsdl/AdapterPolicyEngine.wsdl" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
		<con:settings/>
		
		<con:endpoints>
			<con:endpoint>http://localhost:${HttpDefaultPort}/CONNECTGateway/AdapterProxyService/AdapterPolicyEngine</con:endpoint>
		<con:endpoint>http://localhost:${HttpDefaultPort}/NhinConnect/AdapterPolicyEngine</con:endpoint></con:endpoints>
		<con:operation isOneWay="false" action="urn:CheckPolicy" name="CheckPolicy" bindingOperationName="CheckPolicy" type="Request-Response" outputName="CheckPolicyResponse" inputName="CheckPolicyRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional">
			<con:settings/>
			
		</con:operation>
	</con:interface><con:testSuite name="EntityPatientDiscoveryPatchMergesTo3.1TestSuite"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PatientDiscoverySingleMatchMockResponseTest" searchProperties="true" id="2945cf6f-7354-45c6-b240-ae7daa19d5ef"><con:settings/><con:testStep type="properties" name="EntityPatientDiscovery Test Case Properties" disabled="true"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" createMissingOnLoad="true" discardValuesOnSave="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:source>C:/Projects/NHINC/Current/Product/SoapUI_Test/RegressionSuite/EntityPatientDiscovery.properties</con:source><con:target/><con:properties><con:property><con:name>LocalAA</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>LocalHCIDescription</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>LocalHCID</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PatientDiscoveryEndpoint</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDSubjectID</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDzipCode</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDRespondingAA</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDRespondingHCID</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDpurposeOfDisclosure</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDSSN</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDdOB</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDexpirationDate</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDuniquePatientId</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDstreetAddress</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDstate</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDCity</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDcountry</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDdateOfSignature</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDRespondingHCDesc</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDRespondingHCName</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDlivingSubjectAdministrativeGender</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDlivingSubjectBirthTime</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>LocalHCIDName</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDAssignAuthID</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>NHINGatewayConfigDir</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>NHINGatewayHost</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PEReceivingHCID</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>mockHost</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>SingleMatchPrefix</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>SingleMatchGivenName</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>SingleMatchFullName</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>SingleMatchFamilyName</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>SUT.PatientCorrelationHost</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>SUT.PatientCorrelationPort</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>SUT.PatientCorrelationDB</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>SUT.PatientCorrelationUser</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>SUT.PatientCorrelationPass</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>SUT.PatientCorrelationTable</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>NoMatchPrefix</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>NoMatchGivenName</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>NoMatchFullName</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>NoMatchFamilyName</con:name><con:value xsi:nil="true"/></con:property></con:properties></con:config></con:testStep><con:testStep type="transfer" name="EntityPatientDiscovery Property Transfer" disabled="true"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>PatientDiscoveryEndPoint</con:name><con:sourceType>PatientDiscoveryEndpoint</con:sourceType><con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep><con:targetType>Endpoint</con:targetType><con:targetStep>EntityPatientDiscoveryRequest</con:targetStep><con:targetPath/></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferChildNodes="false" useXQuery="false" ignoreEmpty="false" entitize="false" transferToAll="false"><con:name>LocalHCID</con:name><con:sourceType>LocalHCID</con:sourceType><con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep><con:targetType>Request</con:targetType><con:targetStep>EntityPatientDiscoveryRequest</con:targetStep><con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:sender[1]/urn:device[1]/urn:asAgent[1]/urn:representedOrganization[1]/urn:id[1]/@root</con:targetPath></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferChildNodes="false" transferToAll="false" ignoreEmpty="false" useXQuery="false" entitize="false"><con:name>ReceivingHCID</con:name><con:sourceType>PDRespondingHCID</con:sourceType><con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep><con:targetType>Request</con:targetType><con:targetStep>EntityPatientDiscoveryRequest</con:targetStep><con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:receiver[1]/urn:device[1]/urn:id[1]/@root</con:targetPath></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" transferToAll="false"><con:name>PDQueryRequestHCID</con:name><con:sourceType>LocalHCID</con:sourceType><con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep><con:targetType>Request</con:targetType><con:targetStep>EntityPatientDiscoveryRequest</con:targetStep><con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:sender[1]/urn:device[1]/urn:asAgent[1]/urn:representedOrganization[1]/urn:id[1]/@root</con:targetPath></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false"><con:name>PDQueryRequestSubjectGivenName</con:name><con:sourceType>SingleMatchGivenName</con:sourceType><con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep><con:targetType>Request</con:targetType><con:targetStep>EntityPatientDiscoveryRequest</con:targetStep><con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:controlActProcess[1]/urn:queryByParameter[1]/urn:parameterList[1]/urn:livingSubjectName[1]/urn:value[1]/urn:given[1]</con:targetPath></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" ignoreEmpty="false" transferToAll="false" useXQuery="false" transferChildNodes="false"><con:name>PDQueryRequestSubjectFamName</con:name><con:sourceType>SingleMatchFamilyName</con:sourceType><con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep><con:sourcePath xsi:nil="true"/><con:targetType>Request</con:targetType><con:targetStep>EntityPatientDiscoveryRequest</con:targetStep><con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:controlActProcess[1]/urn:queryByParameter[1]/urn:parameterList[1]/urn:livingSubjectName[1]/urn:value[1]/urn:family[1]</con:targetPath></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" transferToAll="false" ignoreEmpty="false" useXQuery="false" transferChildNodes="false"><con:name>PDQueryRequestSubjectBirthTime</con:name><con:sourceType>PDlivingSubjectBirthTime</con:sourceType><con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep><con:targetType>Request</con:targetType><con:targetStep>EntityPatientDiscoveryRequest</con:targetStep><con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:controlActProcess[1]/urn:queryByParameter[1]/urn:parameterList[1]/urn:livingSubjectBirthTime[1]/urn:value[1]/@value</con:targetPath></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" ignoreEmpty="false" transferToAll="false" useXQuery="false" transferChildNodes="false"><con:name>PDQueryRequestSubjectGender</con:name><con:sourceType>PDlivingSubjectAdministrativeGender</con:sourceType><con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep><con:sourcePath xsi:nil="true"/><con:targetType>Request</con:targetType><con:targetStep>EntityPatientDiscoveryRequest</con:targetStep><con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:controlActProcess[1]/urn:queryByParameter[1]/urn:parameterList[1]/urn:livingSubjectAdministrativeGender[1]/urn:value[1]/@code</con:targetPath></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferToAll="false" entitize="false" ignoreEmpty="false" useXQuery="false" transferChildNodes="false"><con:name>AssertionSSN</con:name><con:sourceType>PDSSN</con:sourceType><con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep><con:sourcePath xsi:nil="true"/><con:targetType>Request</con:targetType><con:targetStep>EntityPatientDiscoveryRequest</con:targetStep><con:targetPath>declare namespace urn1='urn:gov:hhs:fha:nhinc:common:nhinccommon';
declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:assertion[1]/urn1:SSN[1]</con:targetPath></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferToAll="false" entitize="false" ignoreEmpty="false" useXQuery="false" transferChildNodes="false"><con:name>AssertionUniquePatientID</con:name><con:sourceType>PDuniquePatientId</con:sourceType><con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep><con:sourcePath xsi:nil="true"/><con:targetType>Request</con:targetType><con:targetStep>EntityPatientDiscoveryRequest</con:targetStep><con:targetPath>declare namespace urn1='urn:gov:hhs:fha:nhinc:common:nhinccommon';
declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:assertion[1]/urn1:uniquePatientId[1]</con:targetPath></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>PDAssignAuthId</con:name><con:sourceType>PDAssignAuthID</con:sourceType><con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep><con:targetType>Request</con:targetType><con:targetStep>EntityPatientDiscoveryRequest</con:targetStep><con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:controlActProcess[1]/urn:authorOrPerformer[1]/urn:assignedDevice[1]/urn:id[1]/@root</con:targetPath></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>PDQueryReqSubjectAssignAuthID</con:name><con:sourceType>PDAssignAuthID</con:sourceType><con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep><con:targetType>Request</con:targetType><con:targetStep>EntityPatientDiscoveryRequest</con:targetStep><con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:controlActProcess[1]/urn:queryByParameter[1]/urn:parameterList[1]/urn:livingSubjectId[1]/urn:value[1]/@root</con:targetPath></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" useXQuery="false" transferChildNodes="false" transferToAll="false" ignoreEmpty="false"><con:name>PDQueryRequestSubjectID</con:name><con:sourceType>PDSubjectID</con:sourceType><con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep><con:targetType>Request</con:targetType><con:targetStep>EntityPatientDiscoveryRequest</con:targetStep><con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:controlActProcess[1]/urn:queryByParameter[1]/urn:parameterList[1]/urn:livingSubjectId[1]/urn:value[1]/@extension</con:targetPath></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferToAll="false" ignoreEmpty="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>AssertionHCID</con:name><con:sourceType>LocalHCID</con:sourceType><con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep><con:sourcePath xsi:nil="true"/><con:targetType>Request</con:targetType><con:targetStep>EntityPatientDiscoveryRequest</con:targetStep><con:targetPath>declare namespace urn1='urn:gov:hhs:fha:nhinc:common:nhinccommon';
declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:assertion[1]/urn1:homeCommunity[1]/urn1:homeCommunityId[1]</con:targetPath></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" transferToAll="false"><con:name>AssertionHCIDDesc</con:name><con:sourceType>LocalHCIDescription</con:sourceType><con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep><con:sourcePath xsi:nil="true"/><con:targetType>Request</con:targetType><con:targetStep>EntityPatientDiscoveryRequest</con:targetStep><con:targetPath>declare namespace urn1='urn:gov:hhs:fha:nhinc:common:nhinccommon';
declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:assertion[1]/urn1:homeCommunity[1]/urn1:description[1]</con:targetPath></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>AssertionHCIDname</con:name><con:sourceType>LocalHCIDName</con:sourceType><con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep><con:sourcePath xsi:nil="true"/><con:targetType>Request</con:targetType><con:targetStep>EntityPatientDiscoveryRequest</con:targetStep><con:targetPath>declare namespace urn1='urn:gov:hhs:fha:nhinc:common:nhinccommon';
declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:assertion[1]/urn1:homeCommunity[1]/urn1:name[1]</con:targetPath></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Intialize Configurations"><con:settings/><con:config><script>FileUtils.InitializeNHINCProperties(context, log);
</script></con:config></con:testStep><con:testStep type="groovy" name="Set Response Mode"><con:settings/><con:config><script>//def dataSource = testRunner.testCase.getTestStepByName( "EntityPatientDiscovery Test Case Properties" );
//def destDir = dataSource.getPropertyValue( "NHINGatewayConfigDir" );
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

def destConfigFileLocation = context.findProperty("NHINGatewayConfigDir");
FileUtils.UpdateProperty(destConfigFileLocation, 'gateway.properties', 'patientDiscoveryResponseMode', 'Verify',context,log)</script></con:config></con:testStep><con:testStep type="groovy" name="clear correlations table"><con:settings/><con:config><script>context.withSql('PatientCorrelationDB') { sql -> 
  sql.execute('delete from ' + context.findProperty('PatientCorrelationTable'))
}
</script></con:config></con:testStep><con:testStep type="groovy" name="clear AA mapping table" disabled="true"><con:settings/><con:config><script>context.withSql('AAmappingDB') { sql -> 
  sql.execute('delete from ' + context.findProperty('AAmappingTable'))
}
</script></con:config></con:testStep><con:testStep type="groovy" name="ModifyInternalConnectionInfoUsingTestHelper" disabled="true"><con:settings/><con:config><script>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );
def destConfigFileLocation = System.env['NHINC_PROPERTIES_DIR'];
def NHINGatewayHost = context.findProperty("NHINGatewayHost");//**** Redbox (remove later)

def mockHost = context.findProperty("mockHost");
def patientdiscoveryURL = "https://" + NHINGatewayHost + ":8181/CONNECTGatewayTest/NhinPatientDiscoveryTestHelper";
def mockPatientDiscoveryURL = "http://" + mockHost + ":2222/EntityPatientDiscoveryMockResponse";
def LocalHCID = context.findProperty( "LocalHCID" );
def RemoteHCID = context.findProperty("PDRespondingHCID");

FileUtils.CreateOrUpdateConnection(destConfigFileLocation, RemoteHCID, "PatientDiscovery", patientdiscoveryURL, context, log)
FileUtils.CreateOrUpdateConnection(destConfigFileLocation, RemoteHCID, "mockpatientdiscovery", mockPatientDiscoveryURL, context, log)</script></con:config></con:testStep><con:testStep type="request" name="EntityPatientDiscoveryRequest"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>EntityPatientDiscoveryBindingSoap</con:interface><con:operation>RespondingGateway_PRPA_IN201305UV02</con:operation><con:request name="EntityPatientDiscoveryRequest"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://localhost:8080/CONNECTGateway/EntityPatientDiscovery</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope" xmlns:urn="urn:hl7-org:v3" xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
   <soapenv:Header/>
   <soapenv:Body>
      <urn:RespondingGateway_PRPA_IN201305UV02Request>
         <urn:PRPA_IN201305UV02 ITSVersion="XML_1.0">
            <urn:id root="1.1" extension="-5a3e95b1:11d1fa33d45:-7f9b"/>
            <urn:creationTime value="20091116084800"/>
            <urn:interactionId root="2.16.840.1.113883.1.6" extension="PRPA_IN201305UV02"/>
            <urn:processingCode code="T"/>
            <urn:processingModeCode code="I"/>
            <urn:acceptAckCode code="AL"/>
            <urn:receiver typeCode="RCV">
               <urn:device classCode="DEV" determinerCode="INSTANCE">
                  <urn:id root="2.2"/>
                  <urn:asAgent classCode="AGNT">
                     <urn:representedOrganization classCode="ORG" determinerCode="INSTANCE">
                        <urn:id root="${#Project#PDRespondingHCID}"/>
                     </urn:representedOrganization>
                  </urn:asAgent>
               </urn:device>
            </urn:receiver>
            <urn:sender typeCode="SND">
               <urn:device classCode="DEV" determinerCode="INSTANCE">
                  <urn:id root="1.2.345.678.999"/>
                  <urn:asAgent classCode="AGNT">
                     <urn:representedOrganization classCode="ORG" determinerCode="INSTANCE">
                        <urn:id root="${#Project#LocalHCID}"/>
                     </urn:representedOrganization>
                  </urn:asAgent>
               </urn:device>
            </urn:sender>
            <urn:controlActProcess classCode="CACT" moodCode="EVN">
               <code code="PRPA_TE201305UV02" codeSystem="2.16.840.1.113883.1.6"/>
               <urn:authorOrPerformer typeCode="AUT">
                  <urn:assignedDevice>
                     <urn:id root="${#Project#PDAssignAuthID}"/>
                  </urn:assignedDevice>
               </urn:authorOrPerformer>
               <urn:queryByParameter>
                  <urn:queryId root="2.2" extension="-abd3453dcd24wkkks545"/>
                  <urn:statusCode code="new"/>
                  <urn:responseModalityCode code="R"/>
                  <urn:responsePriorityCode code="I"/>
                  <urn:parameterList>
                     <urn:livingSubjectAdministrativeGender>
                        <urn:value code="${#Project#PDlivingSubjectAdministrativeGender}"/>
                        <urn:semanticsText representation="TXT">LivingSubject.administrativeGender</urn:semanticsText>
                     </urn:livingSubjectAdministrativeGender>
                     <urn:livingSubjectBirthTime>
                        <urn:value value="${#Project#PDlivingSubjectBirthTime}" operator="I"/>
                        <urn:semanticsText representation="TXT">LivingSubject.birthTime</urn:semanticsText>
                     </urn:livingSubjectBirthTime>
                     <urn:livingSubjectName>
                        <urn:value>
                           <urn:family partType="FAM">${#Project#SingleMatchFamilyName}</urn:family>
                           <urn:given partType="GIV">${#Project#SingleMatchGivenName}</urn:given>
                           <urn:given partType="GIV">${#Project#SingleMatchMiddleName}</urn:given>
                        </urn:value>
                        <urn:semanticsText representation="TXT">LivingSubject.name</urn:semanticsText>
                     </urn:livingSubjectName>
                     <urn:livingSubjectId>
                        <urn:value root="${#Project#PDAssignAuthID}" extension="${#Project#PDSubjectID}" assigningAuthorityName="?"/>
                        <urn:semanticsText representation="TXT"/>
                     </urn:livingSubjectId>
                  </urn:parameterList>
               </urn:queryByParameter>
            </urn:controlActProcess>
         </urn:PRPA_IN201305UV02>
         <urn:NhinTargetCommunities>
            <urn1:nhinTargetCommunity>
               <urn1:homeCommunity>
                  <urn1:description>desc</urn1:description>
                  <urn1:homeCommunityId>${#Project#PDRespondingHCID}</urn1:homeCommunityId>
                  <urn1:name>Name</urn1:name>
               </urn1:homeCommunity>
               <urn1:list>List</urn1:list>
               <urn1:region>Region</urn1:region>
            </urn1:nhinTargetCommunity>
         </urn:NhinTargetCommunities>
         <urn:assertion>
            <urn1:address>
               <urn1:addressType>
                  <urn1:code>W</urn1:code>
               </urn1:addressType>
               <urn1:city>Melbourne</urn1:city>
               <urn1:country>US</urn1:country>
               <urn1:state>FL</urn1:state>
               <urn1:streetAddress>123 Johnson Rd</urn1:streetAddress>
               <urn1:zipCode>12345</urn1:zipCode>
            </urn1:address>
            <urn1:dateOfBirth>19800516</urn1:dateOfBirth>
            <urn1:dateOfSignature>20080520</urn1:dateOfSignature>
            <urn1:expirationDate>20100520</urn1:expirationDate>
            <urn1:explanationNonClaimantSignature>NEEDED</urn1:explanationNonClaimantSignature>
            <urn1:haveSecondWitnessSignature>true</urn1:haveSecondWitnessSignature>
            <urn1:haveSignature>true</urn1:haveSignature>
            <urn1:haveWitnessSignature>true</urn1:haveWitnessSignature>
            <urn1:homeCommunity>
               <urn1:description>Test HCID1</urn1:description>
               <urn1:homeCommunityId>1.1</urn1:homeCommunityId>
               <urn1:name>HCID1</urn1:name>
            </urn1:homeCommunity>
            <urn1:personName>
               <urn1:familyName>Winslet</urn1:familyName>
               <urn1:givenName>Kate</urn1:givenName>
               <urn1:nameType>
                  <urn1:code>G</urn1:code>
               </urn1:nameType>
               <urn1:secondNameOrInitials>FJ</urn1:secondNameOrInitials>
               <urn1:fullName>Joe Smith</urn1:fullName>
               <urn1:prefix>Mr</urn1:prefix>
            </urn1:personName>
            <urn1:phoneNumber>
               <urn1:areaCode>123</urn1:areaCode>
               <urn1:countryCode>1</urn1:countryCode>
               <urn1:extension>1234</urn1:extension>
               <urn1:localNumber>3456789</urn1:localNumber>
               <urn1:phoneNumberType>
                  <urn1:code>W</urn1:code>
               </urn1:phoneNumberType>
            </urn1:phoneNumber>
            <urn1:purposeOfDisclosureCoded>
               <urn1:code>PUBLICHEALTH</urn1:code>
               <urn1:codeSystem>2.16.840.1.113883.3.18.7.1</urn1:codeSystem>
               <urn1:codeSystemName>nhin-purpose</urn1:codeSystemName>
               <urn1:codeSystemVersion>1.0</urn1:codeSystemVersion>
               <urn1:displayName>Use or disclosure of Psychotherapy Notes</urn1:displayName>
               <urn1:originalText>Use or disclosure of Psychotherapy Notes</urn1:originalText>
            </urn1:purposeOfDisclosureCoded>
            <urn1:secondWitnessAddress>
               <urn1:addressType>
                  <urn1:code>W</urn1:code>
               </urn1:addressType>
               <urn1:city>Melbourne</urn1:city>
               <urn1:country>US</urn1:country>
               <urn1:state>FL</urn1:state>
               <urn1:streetAddress>123 Johnson Rd</urn1:streetAddress>
               <urn1:zipCode>12345</urn1:zipCode>
            </urn1:secondWitnessAddress>
            <urn1:secondWitnessName>
               <urn1:familyName>Hughes</urn1:familyName>
               <urn1:givenName>Howie</urn1:givenName>
               <urn1:nameType>
                  <urn1:code>G</urn1:code>
               </urn1:nameType>
               <urn1:secondNameOrInitials>HH</urn1:secondNameOrInitials>
               <urn1:fullName>Howie Hughes</urn1:fullName>
               <urn1:prefix>Dr</urn1:prefix>
            </urn1:secondWitnessName>
            <urn1:secondWitnessPhone>
               <urn1:areaCode>123</urn1:areaCode>
               <urn1:countryCode>1</urn1:countryCode>
               <urn1:extension>1546</urn1:extension>
               <urn1:localNumber>4567892</urn1:localNumber>
               <urn1:phoneNumberType>
                  <urn1:code>W</urn1:code>
               </urn1:phoneNumberType>
            </urn1:secondWitnessPhone>
            <urn1:SSN>123456789</urn1:SSN>
            <!--1 or more repetitions:-->
            <urn1:uniquePatientId>1234^^^&amp;amp;1.1&amp;amp;ISO</urn1:uniquePatientId>
            <urn1:witnessAddress>
               <urn1:addressType>
                  <urn1:code>W</urn1:code>
               </urn1:addressType>
               <urn1:city>Frankfort</urn1:city>
               <urn1:country>US</urn1:country>
               <urn1:state>MN</urn1:state>
               <urn1:streetAddress>432 Jackson St</urn1:streetAddress>
               <urn1:zipCode>65498</urn1:zipCode>
            </urn1:witnessAddress>
            <urn1:witnessName>
               <urn1:familyName>Ugble</urn1:familyName>
               <urn1:givenName>Gary</urn1:givenName>
               <urn1:nameType>
                  <urn1:code>G</urn1:code>
               </urn1:nameType>
               <urn1:secondNameOrInitials>GU</urn1:secondNameOrInitials>
               <urn1:fullName>Gary Ugble</urn1:fullName>
               <urn1:prefix>Mr</urn1:prefix>
            </urn1:witnessName>
            <urn1:witnessPhone>
               <urn1:areaCode>987</urn1:areaCode>
               <urn1:countryCode>1</urn1:countryCode>
               <urn1:extension>6549</urn1:extension>
               <urn1:localNumber>2222222</urn1:localNumber>
               <urn1:phoneNumberType>
                  <urn1:code>H</urn1:code>
               </urn1:phoneNumberType>
            </urn1:witnessPhone>
            <urn1:userInfo>
               <urn1:personName>
                  <urn1:familyName>Anderson</urn1:familyName>
                  <urn1:givenName>Wilma</urn1:givenName>
                  <urn1:nameType>
                     <urn1:code>G</urn1:code>
                  </urn1:nameType>
                  <urn1:secondNameOrInitials>WA</urn1:secondNameOrInitials>
                  <urn1:fullName>Wilma Anderson</urn1:fullName>
                  <urn1:prefix>Mrs</urn1:prefix>
               </urn1:personName>
               <urn1:userName>wanderson</urn1:userName>
               <urn1:role>nuse</urn1:role>
               <urn1:org>
                  <urn1:description>Test HCID1</urn1:description>
                  <urn1:homeCommunityId>1.1</urn1:homeCommunityId>
                  <urn1:name>HCID1</urn1:name>
               </urn1:org>
               <!--Optional:-->
               <urn1:roleCoded>
                  <urn1:code>Code</urn1:code>
                  <urn1:codeSystem>CodeSystem</urn1:codeSystem>
                  <urn1:codeSystemName>CodeSystemName</urn1:codeSystemName>
                  <urn1:codeSystemVersion>codeSystemVersion</urn1:codeSystemVersion>
                  <urn1:displayName>displayName</urn1:displayName>
                  <urn1:originalText>originalText</urn1:originalText>
                  <!--Zero or more repetitions:-->
                  <urn1:translation/>
               </urn1:roleCoded>
            </urn1:userInfo>
            <urn1:authorized>authorized</urn1:authorized>
            <!--Optional:-->
            <urn1:claimFormRef>claimFormRef</urn1:claimFormRef>
            <!--Optional:-->
            <urn1:claimFormRaw>cid:610957193055</urn1:claimFormRaw>
            <!--Optional:-->
            <urn1:samlAuthnStatement>
               <!--Optional:-->
               <urn1:authInstant>authInstant</urn1:authInstant>
               <!--Optional:-->
               <urn1:sessionIndex>sessionIndex</urn1:sessionIndex>
               <!--Optional:-->
               <urn1:authContextClassRef>authContextClassRef</urn1:authContextClassRef>
               <!--Optional:-->
               <urn1:subjectLocalityAddress>subjectLocalityAddress</urn1:subjectLocalityAddress>
               <!--Optional:-->
               <urn1:subjectLocalityDNSName>subjectLocalityDNSName</urn1:subjectLocalityDNSName>
            </urn1:samlAuthnStatement>
            <!--Optional:-->
            <urn1:samlAuthzDecisionStatement>
               <!--Optional:-->
               <urn1:decision>decision</urn1:decision>
               <!--Optional:-->
               <urn1:resource>resource</urn1:resource>
               <!--Optional:-->
               <urn1:action>action</urn1:action>
               <!--Optional:-->
               <urn1:evidence>
                  <!--Optional:-->
                  <urn1:assertion>
                     <!--Optional:-->
                     <urn1:id>5555</urn1:id>
                     <!--Optional:-->
                     <urn1:issueInstant>issueInstant</urn1:issueInstant>
                     <!--Optional:-->
                     <urn1:version>version</urn1:version>
                     <!--Optional:-->
                     <urn1:issuer>issuer</urn1:issuer>
                     <!--Optional:-->
                     <urn1:issuerFormat>issuerFormat</urn1:issuerFormat>
                     <!--Optional:-->
                     <urn1:conditions>
                        <!--Optional:-->
                        <urn1:notBefore>notBefore</urn1:notBefore>
                        <!--Optional:-->
                        <urn1:notOnOrAfter>notOnOrAfter</urn1:notOnOrAfter>
                     </urn1:conditions>
                     <!--Optional:-->
                     <urn1:contentReference>contentReference</urn1:contentReference>
                     <!--Optional:-->
                     <urn1:contentType>contentType</urn1:contentType>
                     <!--Optional:-->
                     <urn1:content>cid:574777349023</urn1:content>
                  </urn1:assertion>
               </urn1:evidence>
            </urn1:samlAuthzDecisionStatement>
            <!--Optional:-->
            <urn1:samlSignature>
               <!--Optional:-->
               <urn1:keyInfo>
                  <!--Optional:-->
                  <urn1:rsaKeyValueModulus>cid:1157111506023</urn1:rsaKeyValueModulus>
                  <!--Optional:-->
                  <urn1:rsaKeyValueExponent>cid:136268302631</urn1:rsaKeyValueExponent>
               </urn1:keyInfo>
               <!--Optional:-->
               <urn1:signatureValue>cid:880867232879</urn1:signatureValue>
            </urn1:samlSignature>
         </urn:assertion>
      </urn:RespondingGateway_PRPA_IN201305UV02Request>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="Schema Compliance" disabled="true"><con:configuration/></con:assertion><con:assertion type="SOAP Fault Assertion"/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="mockresponse" name="NHINCProxyPatientDiscoveryMockResponse" disabled="true"><con:settings/><con:config xsi:type="con:MockResponseStep" startStep="EntityPatientDiscoveryRequest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>NhincProxyPatientDiscoveryBinding</con:interface><con:operation>Proxy_PRPA_IN201305UV</con:operation><con:path>/EntityPatientDiscoveryMockResponse</con:path><con:port>2222</con:port><con:timeout>40000</con:timeout><con:response><con:settings/><con:responseContent><![CDATA[<S:Envelope xmlns:S="http://www.w3.org/2003/05/soap-envelope">
   <S:Body>
      <ns3:PRPA_IN201306UV02 ITSVersion="XML_1.0" xmlns="http://schemas.xmlsoap.org/ws/2004/08/addressing" xmlns:ns2="urn:gov:hhs:fha:nhinc:common:nhinccommon" xmlns:ns3="urn:hl7-org:v3" xmlns:ns4="urn:gov:hhs:fha:nhinc:common:patientcorrelationfacade">
         <ns3:id extension="4191797c:1259356875e:-7c2d" root="1.1.1"/>
         <ns3:creationTime value="2009121522276"/>
         <ns3:interactionId extension="PRPA_IN201306UV" root="2.16.840.1.113883.1.6"/>
         <ns3:processingCode code="P"/>
         <ns3:processingModeCode code="R"/>
         <ns3:acceptAckCode code="AL"/>
         <ns3:receiver typeCode="RCV">
            <ns3:device determinerCode="INSTANCE" classCode="">
               <ns3:id root="1.2.345.678.999"/>
               <ns3:asAgent classCode="AGNT">
                  <ns3:representedOrganization determinerCode="INSTANCE" classCode="ORG">
                     <ns3:id/>
                  </ns3:representedOrganization>
               </ns3:asAgent>
            </ns3:device>
         </ns3:receiver>
         <ns3:sender typeCode="SND">
            <ns3:device determinerCode="INSTANCE" classCode="">
               <ns3:id root="1.2.345.678.999"/>
               <ns3:asAgent classCode="AGNT">
                  <ns3:representedOrganization determinerCode="INSTANCE" classCode="ORG">
                     <ns3:id/>
                  </ns3:representedOrganization>
               </ns3:asAgent>
            </ns3:device>
         </ns3:sender>
         <ns3:acknowledgement>
            <ns3:typeId extension="PRPA_IN201305UV02" root="2.16.840.1.113883.1.6"/>
            <ns3:typeCode code="AA"/>
            <ns3:targetMessage xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
         </ns3:acknowledgement>
         <ns3:controlActProcess moodCode="EVN" classCode="">
            <ns3:code codeSystem="2.16.840.1.113883.1.6" code="PRPA_TE201306UV"/>
            <ns3:subject typeCode="SUBJ">
               <ns3:registrationEvent moodCode="" classCode="">
                  <ns3:id nullFlavor="NA"/>
                  <ns3:statusCode code="active"/>
                  <ns3:subject1 typeCode="">
                     <ns3:patient classCode="PAT">
                        <ns3:id extension="1234" root="2.2.2"/>
                        <ns3:statusCode code="SD"/>
                        <ns3:patientPerson>
                           <ns3:name>
                              <ns3:family partType="FAM">Smith</ns3:family>
                              <ns3:given partType="GIV">Joe</ns3:given>
                           </ns3:name>
                           <ns3:administrativeGenderCode code="M"/>
                           <ns3:birthTime value="19560301"/>
                           <ns3:addr>
                              <ns3:city>Orlando</ns3:city>
                              <ns3:state>FL</ns3:state>
                              <ns3:postalCode>98765</ns3:postalCode>
                           </ns3:addr>
                           <asOtherIDs classCode="SD">
                              <id extension="123456789" root="2.16.840.1.113883.4.1"/>
                              <scopingOrganization determinerCode="" classCode="">
                                 <id root="2.16.840.1.113883.4.1"/>
                              </scopingOrganization>
                           </asOtherIDs>
                        </ns3:patientPerson>
                        <ns3:providerOrganization determinerCode="INSTANCE" classCode="ORG">
                           <ns3:id root="2.2.2"/>
                           <ns3:contactParty xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
                        </ns3:providerOrganization>
                        <ns3:subjectOf1>
                           <ns3:queryMatchObservation moodCode="EVN" classCode="CASE">
                              <ns3:code code="IHE_PDQ"/>
                              <ns3:value xsi:type="ns3:INT" value="100" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
                           </ns3:queryMatchObservation>
                        </ns3:subjectOf1>
                     </ns3:patient>
                  </ns3:subject1>
                  <ns3:custodian typeCode="CST">
                     <ns3:assignedEntity classCode="ASSIGNED">
                        <ns3:id root="2.2.2"/>
                     </ns3:assignedEntity>
                  </ns3:custodian>
               </ns3:registrationEvent>
            </ns3:subject>
            <ns3:queryAck>
               <ns3:queryId extension="-abd3453dcd24wkkks545" root="1.1"/>
               <ns3:queryResponseCode code="OK"/>
               <ns3:resultTotalQuantity value="1"/>
               <ns3:resultCurrentQuantity value="1"/>
               <ns3:resultRemainingQuantity value="0"/>
            </ns3:queryAck>
            <ns3:queryByParameter xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
         </ns3:controlActProcess>
      </ns3:PRPA_IN201306UV02>
   </S:Body>
</S:Envelope>]]></con:responseContent><con:wsaConfig mustUnderstand="NONE" version="200508"/></con:response><con:assertion type="XPath Match" name="SingleMatchGivenName" disabled="true"><con:configuration><path>declare namespace ns3='urn:hl7-org:v3';
//ns3:Proxy_PRPA_IN201305UVProxyRequest[1]/ns3:PRPA_IN201305UV02[1]/ns3:controlActProcess[1]/ns3:queryByParameter[1]/ns3:parameterList[1]/ns3:livingSubjectName[1]/ns3:value[1]/ns3:given[1]</path><content>Joe</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:assertion type="XPath Match" name="SingleMatchFamilyName"><con:configuration><path>declare namespace ns3='urn:hl7-org:v3';
//ns3:Proxy_PRPA_IN201305UVProxyRequest[1]/ns3:PRPA_IN201305UV02[1]/ns3:controlActProcess[1]/ns3:queryByParameter[1]/ns3:parameterList[1]/ns3:livingSubjectName[1]/ns3:value[1]/ns3:family[1]</path><content>Smith</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:host/></con:config></con:testStep><con:testStep type="groovy" name="count correlations (1)"><con:settings/><con:config><script>
def patId = context.findProperty('PDSubjectID')
context.withSql('PatientCorrelationDB') { sql -> 
  assert 1 == sql.firstRow("select count(*) from " + context.findProperty('PatientCorrelationTable') + " where PatientId = '" + patId + "'")[0]
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Count AA Mapping (2)" disabled="true"><con:settings/><con:config><script>context.withSql('AAmappingDB') { sql -> 
  assert 2 == sql.firstRow("select count(*) from " + context.findProperty('AAmappingTable'))[0]
}
</script></con:config></con:testStep><con:properties><con:property><con:name>startDate</con:name><con:value>2010-07-06T00:00:00Z</con:value></con:property><con:property><con:name>endDate</con:name><con:value>2010-07-06T18:02:13Z</con:value></con:property><con:property><con:name>sigDate</con:name><con:value>07/06/2010 00:00:00</con:value></con:property><con:property><con:name>expireDate</con:name><con:value>2010-08-05T00:00:00Z</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PatientDiscoveryNoBlankValuesMockResponseVerifyMode - Patch 191 and 231" searchProperties="true" id="c9c86c9c-d6ff-485f-9e02-95210c5af6ec"><con:settings/><con:testStep type="properties" name="EntityPatientDiscovery Test Case Properties" disabled="true"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" createMissingOnLoad="true" discardValuesOnSave="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:source>C:/Projects/NHINC/Current/Product/SoapUI_Test/RegressionSuite/EntityPatientDiscovery.properties</con:source><con:target/><con:properties><con:property><con:name>LocalAA</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>LocalHCIDescription</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>LocalHCID</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PatientDiscoveryEndpoint</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDSubjectID</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDzipCode</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDRespondingAA</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDRespondingHCID</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDpurposeOfDisclosure</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDSSN</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDdOB</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDexpirationDate</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDuniquePatientId</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDstreetAddress</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDstate</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDCity</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDcountry</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDdateOfSignature</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDRespondingHCDesc</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDRespondingHCName</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDlivingSubjectAdministrativeGender</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDlivingSubjectBirthTime</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>LocalHCIDName</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDAssignAuthID</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>NHINGatewayConfigDir</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>NHINGatewayHost</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PEReceivingHCID</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>mockHost</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>SingleMatchPrefix</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>SingleMatchGivenName</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>SingleMatchFullName</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>SingleMatchFamilyName</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>SUT.PatientCorrelationHost</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>SUT.PatientCorrelationPort</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>SUT.PatientCorrelationDB</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>SUT.PatientCorrelationUser</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>SUT.PatientCorrelationPass</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>SUT.PatientCorrelationTable</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>NoMatchPrefix</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>NoMatchGivenName</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>NoMatchFullName</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>NoMatchFamilyName</con:name><con:value xsi:nil="true"/></con:property></con:properties></con:config></con:testStep><con:testStep type="transfer" name="EntityPatientDiscovery Property Transfer" disabled="true"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>PatientDiscoveryEndPoint</con:name><con:sourceType>PatientDiscoveryEndpoint</con:sourceType><con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep><con:targetType>Endpoint</con:targetType><con:targetStep>EntityPatientDiscoveryRequest</con:targetStep><con:targetPath/></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferChildNodes="false" useXQuery="false" ignoreEmpty="false" entitize="false" transferToAll="false"><con:name>LocalHCID</con:name><con:sourceType>LocalHCID</con:sourceType><con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep><con:targetType>Request</con:targetType><con:targetStep>EntityPatientDiscoveryRequest</con:targetStep><con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:sender[1]/urn:device[1]/urn:asAgent[1]/urn:representedOrganization[1]/urn:id[1]/@root</con:targetPath></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferChildNodes="false" transferToAll="false" ignoreEmpty="false" useXQuery="false" entitize="false"><con:name>ReceivingHCID</con:name><con:sourceType>PDRespondingHCID</con:sourceType><con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep><con:targetType>Request</con:targetType><con:targetStep>EntityPatientDiscoveryRequest</con:targetStep><con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:receiver[1]/urn:device[1]/urn:id[1]/@root</con:targetPath></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" transferToAll="false"><con:name>PDQueryRequestHCID</con:name><con:sourceType>LocalHCID</con:sourceType><con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep><con:targetType>Request</con:targetType><con:targetStep>EntityPatientDiscoveryRequest</con:targetStep><con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:sender[1]/urn:device[1]/urn:asAgent[1]/urn:representedOrganization[1]/urn:id[1]/@root</con:targetPath></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false"><con:name>PDQueryRequestSubjectGivenName</con:name><con:sourceType>SingleMatchGivenName</con:sourceType><con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep><con:targetType>Request</con:targetType><con:targetStep>EntityPatientDiscoveryRequest</con:targetStep><con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:controlActProcess[1]/urn:queryByParameter[1]/urn:parameterList[1]/urn:livingSubjectName[1]/urn:value[1]/urn:given[1]</con:targetPath></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" ignoreEmpty="false" transferToAll="false" useXQuery="false" transferChildNodes="false"><con:name>PDQueryRequestSubjectFamName</con:name><con:sourceType>SingleMatchFamilyName</con:sourceType><con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep><con:sourcePath xsi:nil="true"/><con:targetType>Request</con:targetType><con:targetStep>EntityPatientDiscoveryRequest</con:targetStep><con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:controlActProcess[1]/urn:queryByParameter[1]/urn:parameterList[1]/urn:livingSubjectName[1]/urn:value[1]/urn:family[1]</con:targetPath></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" transferToAll="false" ignoreEmpty="false" useXQuery="false" transferChildNodes="false"><con:name>PDQueryRequestSubjectBirthTime</con:name><con:sourceType>PDlivingSubjectBirthTime</con:sourceType><con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep><con:targetType>Request</con:targetType><con:targetStep>EntityPatientDiscoveryRequest</con:targetStep><con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:controlActProcess[1]/urn:queryByParameter[1]/urn:parameterList[1]/urn:livingSubjectBirthTime[1]/urn:value[1]/@value</con:targetPath></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" ignoreEmpty="false" transferToAll="false" useXQuery="false" transferChildNodes="false"><con:name>PDQueryRequestSubjectGender</con:name><con:sourceType>PDlivingSubjectAdministrativeGender</con:sourceType><con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep><con:sourcePath xsi:nil="true"/><con:targetType>Request</con:targetType><con:targetStep>EntityPatientDiscoveryRequest</con:targetStep><con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:controlActProcess[1]/urn:queryByParameter[1]/urn:parameterList[1]/urn:livingSubjectAdministrativeGender[1]/urn:value[1]/@code</con:targetPath></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferToAll="false" entitize="false" ignoreEmpty="false" useXQuery="false" transferChildNodes="false"><con:name>AssertionSSN</con:name><con:sourceType>PDSSN</con:sourceType><con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep><con:sourcePath xsi:nil="true"/><con:targetType>Request</con:targetType><con:targetStep>EntityPatientDiscoveryRequest</con:targetStep><con:targetPath>declare namespace urn1='urn:gov:hhs:fha:nhinc:common:nhinccommon';
declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:assertion[1]/urn1:SSN[1]</con:targetPath></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferToAll="false" entitize="false" ignoreEmpty="false" useXQuery="false" transferChildNodes="false"><con:name>AssertionUniquePatientID</con:name><con:sourceType>PDuniquePatientId</con:sourceType><con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep><con:sourcePath xsi:nil="true"/><con:targetType>Request</con:targetType><con:targetStep>EntityPatientDiscoveryRequest</con:targetStep><con:targetPath>declare namespace urn1='urn:gov:hhs:fha:nhinc:common:nhinccommon';
declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:assertion[1]/urn1:uniquePatientId[1]</con:targetPath></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>PDAssignAuthId</con:name><con:sourceType>PDAssignAuthID</con:sourceType><con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep><con:targetType>Request</con:targetType><con:targetStep>EntityPatientDiscoveryRequest</con:targetStep><con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:controlActProcess[1]/urn:authorOrPerformer[1]/urn:assignedDevice[1]/urn:id[1]/@root</con:targetPath></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>PDQueryReqSubjectAssignAuthID</con:name><con:sourceType>PDAssignAuthID</con:sourceType><con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep><con:targetType>Request</con:targetType><con:targetStep>EntityPatientDiscoveryRequest</con:targetStep><con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:controlActProcess[1]/urn:queryByParameter[1]/urn:parameterList[1]/urn:livingSubjectId[1]/urn:value[1]/@root</con:targetPath></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" useXQuery="false" transferChildNodes="false" transferToAll="false" ignoreEmpty="false"><con:name>PDQueryRequestSubjectID</con:name><con:sourceType>PDSubjectID</con:sourceType><con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep><con:targetType>Request</con:targetType><con:targetStep>EntityPatientDiscoveryRequest</con:targetStep><con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:controlActProcess[1]/urn:queryByParameter[1]/urn:parameterList[1]/urn:livingSubjectId[1]/urn:value[1]/@extension</con:targetPath></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferToAll="false" ignoreEmpty="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>AssertionHCID</con:name><con:sourceType>LocalHCID</con:sourceType><con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep><con:sourcePath xsi:nil="true"/><con:targetType>Request</con:targetType><con:targetStep>EntityPatientDiscoveryRequest</con:targetStep><con:targetPath>declare namespace urn1='urn:gov:hhs:fha:nhinc:common:nhinccommon';
declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:assertion[1]/urn1:homeCommunity[1]/urn1:homeCommunityId[1]</con:targetPath></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" transferToAll="false"><con:name>AssertionHCIDDesc</con:name><con:sourceType>LocalHCIDescription</con:sourceType><con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep><con:sourcePath xsi:nil="true"/><con:targetType>Request</con:targetType><con:targetStep>EntityPatientDiscoveryRequest</con:targetStep><con:targetPath>declare namespace urn1='urn:gov:hhs:fha:nhinc:common:nhinccommon';
declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:assertion[1]/urn1:homeCommunity[1]/urn1:description[1]</con:targetPath></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>AssertionHCIDname</con:name><con:sourceType>LocalHCIDName</con:sourceType><con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep><con:sourcePath xsi:nil="true"/><con:targetType>Request</con:targetType><con:targetStep>EntityPatientDiscoveryRequest</con:targetStep><con:targetPath>declare namespace urn1='urn:gov:hhs:fha:nhinc:common:nhinccommon';
declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:assertion[1]/urn1:homeCommunity[1]/urn1:name[1]</con:targetPath></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Intialize Configurations"><con:settings/><con:config><script>FileUtils.InitializeNHINCProperties(context, log);
</script></con:config></con:testStep><con:testStep type="groovy" name="Set Response Mode"><con:settings/><con:config><script>//def dataSource = testRunner.testCase.getTestStepByName( "EntityPatientDiscovery Test Case Properties" );
//def destDir = dataSource.getPropertyValue( "NHINGatewayConfigDir" );
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

def destConfigFileLocation = context.findProperty("NHINGatewayConfigDir");
FileUtils.UpdateProperty(destConfigFileLocation, 'gateway.properties', 'patientDiscoveryResponseMode', 'Verify',context,log)</script></con:config></con:testStep><con:testStep type="groovy" name="clear correlations table"><con:settings/><con:config><script>context.withSql('PatientCorrelationDB') { sql -> 
  sql.execute('delete from ' + context.findProperty('PatientCorrelationTable'))
}
</script></con:config></con:testStep><con:testStep type="groovy" name="ModifyInternalConnectionInfoUsingTestHelper"><con:settings/><con:config><script>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );
def destConfigFileLocation = System.env['NHINC_PROPERTIES_DIR'];
def NHINGatewayHost = context.findProperty("NHINGatewayHost");//**** Redbox (remove later)

def mockHost = context.findProperty("mockHost");
def patientdiscoveryURL = "https://" + NHINGatewayHost + ":8181/CONNECTGatewayTest/NhinPatientDiscoveryTestHelper";
def mockPatientDiscoveryURL = "http://" + mockHost + ":2222/EntityPatientDiscoveryMockResponse";
def LocalHCID = context.findProperty( "LocalHCID" );
def RemoteHCID = context.findProperty("PDRespondingHCID");

FileUtils.CreateOrUpdateConnection(destConfigFileLocation, RemoteHCID, "PatientDiscovery", patientdiscoveryURL, context, log)
FileUtils.CreateOrUpdateConnection(destConfigFileLocation, RemoteHCID, "mockpatientdiscovery", mockPatientDiscoveryURL, context, log)</script></con:config></con:testStep><con:testStep type="request" name="EntityPatientDiscoveryRequest"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>EntityPatientDiscoveryBindingSoap</con:interface><con:operation>RespondingGateway_PRPA_IN201305UV02</con:operation><con:request name="EntityPatientDiscoveryRequest"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://localhost:8080/CONNECTGateway/EntityPatientDiscovery</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope" xmlns:urn="urn:hl7-org:v3" xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
   <soapenv:Header/>
   <soapenv:Body>
      <urn:RespondingGateway_PRPA_IN201305UV02Request>
         <urn:PRPA_IN201305UV02 ITSVersion="XML_1.0">
            <urn:id root="1.1" extension="-5a3e95b1:11d1fa33d45:-7f9b"/>
            <urn:creationTime value="20091116084800"/>
            <urn:interactionId root="2.16.840.1.113883.1.6" extension="PRPA_IN201305UV02"/>
            <urn:processingCode code="T"/>
            <urn:processingModeCode code="I"/>
            <urn:acceptAckCode code="AL"/>
            <urn:receiver typeCode="RCV">
               <urn:device classCode="DEV" determinerCode="INSTANCE">
                  <urn:id root="2.2"/>
                  <urn:asAgent classCode="AGNT">
                     <urn:representedOrganization classCode="ORG" determinerCode="INSTANCE">
                        <urn:id root="${#Project#PDRespondingHCID}"/>
                     </urn:representedOrganization>
                  </urn:asAgent>
               </urn:device>
            </urn:receiver>
            <urn:sender typeCode="SND">
               <urn:device classCode="DEV" determinerCode="INSTANCE">
                  <urn:id root="1.2.345.678.999"/>
                  <urn:asAgent classCode="AGNT">
                     <urn:representedOrganization classCode="ORG" determinerCode="INSTANCE">
                        <urn:id root="${#Project#LocalHCID}"/>
                     </urn:representedOrganization>
                  </urn:asAgent>
               </urn:device>
            </urn:sender>
            <urn:controlActProcess classCode="CACT" moodCode="EVN">
               <code code="PRPA_TE201305UV02" codeSystem="2.16.840.1.113883.1.6"/>
               <urn:authorOrPerformer typeCode="AUT">
                  <urn:assignedDevice>
                     <urn:id root="${#Project#PDAssignAuthID}"/>
                  </urn:assignedDevice>
               </urn:authorOrPerformer>
               <urn:queryByParameter>
                  <urn:queryId root="2.2" extension="-abd3453dcd24wkkks545"/>
                  <urn:statusCode code="new"/>
                  <urn:responseModalityCode code="R"/>
                  <urn:responsePriorityCode code="I"/>
                  <urn:parameterList>
                     <urn:livingSubjectAdministrativeGender>
                        <urn:value code="${#Project#PDlivingSubjectAdministrativeGender}"/>
                        <urn:semanticsText representation="TXT">LivingSubject.administrativeGender</urn:semanticsText>
                     </urn:livingSubjectAdministrativeGender>
                     <urn:livingSubjectBirthTime>
                        <urn:value value="${#Project#PDlivingSubjectBirthTime}" operator="I"/>
                        <urn:semanticsText representation="TXT">LivingSubject.birthTime</urn:semanticsText>
                     </urn:livingSubjectBirthTime>
                     <urn:livingSubjectName>
                        <urn:value>
                           <urn:family partType="FAM">${#Project#SingleMatchFamilyName}</urn:family>
                           <urn:given partType="GIV">${#Project#SingleMatchGivenName}</urn:given>
                           <urn:given partType="GIV">${#Project#SingleMatchMiddleName}</urn:given>
                        </urn:value>
                        <urn:semanticsText representation="TXT">LivingSubject.name</urn:semanticsText>
                     </urn:livingSubjectName>
                     <urn:livingSubjectId>
                        <urn:value extension="123456789" root="2.16.840.1.113883.4.1"/>
                        <urn:semanticsText/>
                     </urn:livingSubjectId>
                     <urn:livingSubjectId>
                        <urn:value root="${#Project#PDAssignAuthID}" extension="${#Project#PDSubjectID}" assigningAuthorityName="?"/>
                        <urn:semanticsText representation="TXT"/>
                     </urn:livingSubjectId>
                  </urn:parameterList>
               </urn:queryByParameter>
            </urn:controlActProcess>
         </urn:PRPA_IN201305UV02>
         <urn:NhinTargetCommunities>
            <urn1:nhinTargetCommunity>
               <urn1:homeCommunity>
                  <urn1:description>desc</urn1:description>
                  <urn1:homeCommunityId>${#Project#PDRespondingHCID}</urn1:homeCommunityId>
                  <urn1:name>Name</urn1:name>
               </urn1:homeCommunity>
               <urn1:list>List</urn1:list>
               <urn1:region>Region</urn1:region>
            </urn1:nhinTargetCommunity>
         </urn:NhinTargetCommunities>
         <urn:assertion>
            <urn1:address>
               <urn1:addressType>
                  <urn1:code>W</urn1:code>
               </urn1:addressType>
               <urn1:city>Melbourne</urn1:city>
               <urn1:country>US</urn1:country>
               <urn1:state>FL</urn1:state>
               <urn1:streetAddress>123 Johnson Rd</urn1:streetAddress>
               <urn1:zipCode>12345</urn1:zipCode>
            </urn1:address>
            <urn1:dateOfBirth>19800516</urn1:dateOfBirth>
            <urn1:dateOfSignature>20080520</urn1:dateOfSignature>
            <urn1:expirationDate>20100520</urn1:expirationDate>
            <urn1:explanationNonClaimantSignature>NEEDED</urn1:explanationNonClaimantSignature>
            <urn1:haveSecondWitnessSignature>true</urn1:haveSecondWitnessSignature>
            <urn1:haveSignature>true</urn1:haveSignature>
            <urn1:haveWitnessSignature>true</urn1:haveWitnessSignature>
            <urn1:homeCommunity>
               <urn1:description>Test HCID1</urn1:description>
               <urn1:homeCommunityId>1.1</urn1:homeCommunityId>
               <urn1:name>HCID1</urn1:name>
            </urn1:homeCommunity>
            <urn1:personName>
               <urn1:familyName>Winslet</urn1:familyName>
               <urn1:givenName>Kate</urn1:givenName>
               <urn1:nameType>
                  <urn1:code>G</urn1:code>
               </urn1:nameType>
               <urn1:secondNameOrInitials>FJ</urn1:secondNameOrInitials>
               <urn1:fullName>Joe Smith</urn1:fullName>
               <urn1:prefix>Mr</urn1:prefix>
            </urn1:personName>
            <urn1:phoneNumber>
               <urn1:areaCode>123</urn1:areaCode>
               <urn1:countryCode>1</urn1:countryCode>
               <urn1:extension>1234</urn1:extension>
               <urn1:localNumber>3456789</urn1:localNumber>
               <urn1:phoneNumberType>
                  <urn1:code>W</urn1:code>
               </urn1:phoneNumberType>
            </urn1:phoneNumber>
            <urn1:purposeOfDisclosureCoded>
               <urn1:code>PUBLICHEALTH</urn1:code>
               <urn1:codeSystem>2.16.840.1.113883.3.18.7.1</urn1:codeSystem>
               <urn1:codeSystemName>nhin-purpose</urn1:codeSystemName>
               <urn1:codeSystemVersion>1.0</urn1:codeSystemVersion>
               <urn1:displayName>Use or disclosure of Psychotherapy Notes</urn1:displayName>
               <urn1:originalText>Use or disclosure of Psychotherapy Notes</urn1:originalText>
            </urn1:purposeOfDisclosureCoded>
            <urn1:secondWitnessAddress>
               <urn1:addressType>
                  <urn1:code>W</urn1:code>
               </urn1:addressType>
               <urn1:city>Melbourne</urn1:city>
               <urn1:country>US</urn1:country>
               <urn1:state>FL</urn1:state>
               <urn1:streetAddress>123 Johnson Rd</urn1:streetAddress>
               <urn1:zipCode>12345</urn1:zipCode>
            </urn1:secondWitnessAddress>
            <urn1:secondWitnessName>
               <urn1:familyName>Hughes</urn1:familyName>
               <urn1:givenName>Howie</urn1:givenName>
               <urn1:nameType>
                  <urn1:code>G</urn1:code>
               </urn1:nameType>
               <urn1:secondNameOrInitials>HH</urn1:secondNameOrInitials>
               <urn1:fullName>Howie Hughes</urn1:fullName>
               <urn1:prefix>Dr</urn1:prefix>
            </urn1:secondWitnessName>
            <urn1:secondWitnessPhone>
               <urn1:areaCode>123</urn1:areaCode>
               <urn1:countryCode>1</urn1:countryCode>
               <urn1:extension>1546</urn1:extension>
               <urn1:localNumber>4567892</urn1:localNumber>
               <urn1:phoneNumberType>
                  <urn1:code>W</urn1:code>
               </urn1:phoneNumberType>
            </urn1:secondWitnessPhone>
            <urn1:SSN>123456789</urn1:SSN>
            <!--1 or more repetitions:-->
            <urn1:uniquePatientId>1234^^^&amp;amp;1.1&amp;amp;ISO</urn1:uniquePatientId>
            <urn1:witnessAddress>
               <urn1:addressType>
                  <urn1:code>W</urn1:code>
               </urn1:addressType>
               <urn1:city>Frankfort</urn1:city>
               <urn1:country>US</urn1:country>
               <urn1:state>MN</urn1:state>
               <urn1:streetAddress>432 Jackson St</urn1:streetAddress>
               <urn1:zipCode>65498</urn1:zipCode>
            </urn1:witnessAddress>
            <urn1:witnessName>
               <urn1:familyName>Ugble</urn1:familyName>
               <urn1:givenName>Gary</urn1:givenName>
               <urn1:nameType>
                  <urn1:code>G</urn1:code>
               </urn1:nameType>
               <urn1:secondNameOrInitials>GU</urn1:secondNameOrInitials>
               <urn1:fullName>Gary Ugble</urn1:fullName>
               <urn1:prefix>Mr</urn1:prefix>
            </urn1:witnessName>
            <urn1:witnessPhone>
               <urn1:areaCode>987</urn1:areaCode>
               <urn1:countryCode>1</urn1:countryCode>
               <urn1:extension>6549</urn1:extension>
               <urn1:localNumber>2222222</urn1:localNumber>
               <urn1:phoneNumberType>
                  <urn1:code>H</urn1:code>
               </urn1:phoneNumberType>
            </urn1:witnessPhone>
            <urn1:userInfo>
               <urn1:personName>
                  <urn1:familyName>Anderson</urn1:familyName>
                  <urn1:givenName>Wilma</urn1:givenName>
                  <urn1:nameType>
                     <urn1:code>G</urn1:code>
                  </urn1:nameType>
                  <urn1:secondNameOrInitials>WA</urn1:secondNameOrInitials>
                  <urn1:fullName>Wilma Anderson</urn1:fullName>
                  <urn1:prefix>Mrs</urn1:prefix>
               </urn1:personName>
               <urn1:userName>wanderson</urn1:userName>
               <urn1:role>nuse</urn1:role>
               <urn1:org>
                  <urn1:description>Test HCID1</urn1:description>
                  <urn1:homeCommunityId>1.1</urn1:homeCommunityId>
                  <urn1:name>HCID1</urn1:name>
               </urn1:org>
               <!--Optional:-->
               <urn1:roleCoded>
                  <urn1:code>Code</urn1:code>
                  <urn1:codeSystem>CodeSystem</urn1:codeSystem>
                  <urn1:codeSystemName>CodeSystemName</urn1:codeSystemName>
                  <urn1:codeSystemVersion>codeSystemVersion</urn1:codeSystemVersion>
                  <urn1:displayName>displayName</urn1:displayName>
                  <urn1:originalText>originalText</urn1:originalText>
                  <!--Zero or more repetitions:-->
                  <urn1:translation/>
               </urn1:roleCoded>
            </urn1:userInfo>
            <urn1:authorized>authorized</urn1:authorized>
            <!--Optional:-->
            <urn1:claimFormRef>claimFormRef</urn1:claimFormRef>
            <!--Optional:-->
            <urn1:claimFormRaw>cid:610957193055</urn1:claimFormRaw>
            <!--Optional:-->
            <urn1:samlAuthnStatement>
               <!--Optional:-->
               <urn1:authInstant>authInstant</urn1:authInstant>
               <!--Optional:-->
               <urn1:sessionIndex>sessionIndex</urn1:sessionIndex>
               <!--Optional:-->
               <urn1:authContextClassRef>authContextClassRef</urn1:authContextClassRef>
               <!--Optional:-->
               <urn1:subjectLocalityAddress>subjectLocalityAddress</urn1:subjectLocalityAddress>
               <!--Optional:-->
               <urn1:subjectLocalityDNSName>subjectLocalityDNSName</urn1:subjectLocalityDNSName>
            </urn1:samlAuthnStatement>
            <!--Optional:-->
            <urn1:samlAuthzDecisionStatement>
               <!--Optional:-->
               <urn1:decision>decision</urn1:decision>
               <!--Optional:-->
               <urn1:resource>resource</urn1:resource>
               <!--Optional:-->
               <urn1:action>action</urn1:action>
               <!--Optional:-->
               <urn1:evidence>
                  <!--Optional:-->
                  <urn1:assertion>
                     <!--Optional:-->
                     <urn1:id>5555</urn1:id>
                     <!--Optional:-->
                     <urn1:issueInstant>issueInstant</urn1:issueInstant>
                     <!--Optional:-->
                     <urn1:version>version</urn1:version>
                     <!--Optional:-->
                     <urn1:issuer>issuer</urn1:issuer>
                     <!--Optional:-->
                     <urn1:issuerFormat>issuerFormat</urn1:issuerFormat>
                     <!--Optional:-->
                     <urn1:conditions>
                        <!--Optional:-->
                        <urn1:notBefore>notBefore</urn1:notBefore>
                        <!--Optional:-->
                        <urn1:notOnOrAfter>notOnOrAfter</urn1:notOnOrAfter>
                     </urn1:conditions>
                     <!--Optional:-->
                     <urn1:contentReference>contentReference</urn1:contentReference>
                     <!--Optional:-->
                     <urn1:contentType>contentType</urn1:contentType>
                     <!--Optional:-->
                     <urn1:content>cid:574777349023</urn1:content>
                  </urn1:assertion>
               </urn1:evidence>
            </urn1:samlAuthzDecisionStatement>
            <!--Optional:-->
            <urn1:samlSignature>
               <!--Optional:-->
               <urn1:keyInfo>
                  <!--Optional:-->
                  <urn1:rsaKeyValueModulus>cid:1157111506023</urn1:rsaKeyValueModulus>
                  <!--Optional:-->
                  <urn1:rsaKeyValueExponent>cid:136268302631</urn1:rsaKeyValueExponent>
               </urn1:keyInfo>
               <!--Optional:-->
               <urn1:signatureValue>cid:880867232879</urn1:signatureValue>
            </urn1:samlSignature>
         </urn:assertion>
      </urn:RespondingGateway_PRPA_IN201305UV02Request>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="SOAP Fault Assertion"/><con:assertion type="XPath Match" name="Receiver determinerCode"><con:configuration><path>declare namespace ns1='urn:hl7-org:v3';
//ns1:RespondingGateway_PRPA_IN201306UV02Response[1]/ns1:communityResponse[1]/ns1:PRPA_IN201306UV02[1]/ns1:receiver[1]/ns1:device[1]/@determinerCode</path><content>INSTANCE</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:assertion type="XPath Match" name="Sender determinerCode"><con:configuration><path>declare namespace ns1='urn:hl7-org:v3';
//ns1:RespondingGateway_PRPA_IN201306UV02Response[1]/ns1:communityResponse[1]/ns1:PRPA_IN201306UV02[1]/ns1:sender[1]/ns1:device[1]/@determinerCode</path><content>INSTANCE</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:assertion type="XPath Match" name="Receiver classCode"><con:configuration><path>declare namespace ns1='urn:hl7-org:v3';
//ns1:RespondingGateway_PRPA_IN201306UV02Response[1]/ns1:communityResponse[1]/ns1:PRPA_IN201306UV02[1]/ns1:receiver[1]/ns1:device[1]/@classCode</path><content>DEV</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:assertion type="XPath Match" name="Sender classCode"><con:configuration><path>declare namespace ns1='urn:hl7-org:v3';
//ns1:RespondingGateway_PRPA_IN201306UV02Response[1]/ns1:communityResponse[1]/ns1:PRPA_IN201306UV02[1]/ns1:sender[1]/ns1:device[1]/@classCode</path><content>DEV</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:assertion type="XPath Match" name="ProviderOrg determinerCode"><con:configuration><path>declare namespace ns1='urn:hl7-org:v3';
//ns1:RespondingGateway_PRPA_IN201306UV02Response[1]/ns1:communityResponse[1]/ns1:PRPA_IN201306UV02[1]/ns1:controlActProcess[1]/ns1:subject[1]/ns1:registrationEvent[1]/ns1:subject1[1]/ns1:patient[1]/ns1:providerOrganization[1]/@determinerCode</path><content>INSTANCE</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:assertion type="XPath Match" name="ProviderOrg classCode"><con:configuration><path>declare namespace ns1='urn:hl7-org:v3';
//ns1:RespondingGateway_PRPA_IN201306UV02Response[1]/ns1:communityResponse[1]/ns1:PRPA_IN201306UV02[1]/ns1:controlActProcess[1]/ns1:subject[1]/ns1:registrationEvent[1]/ns1:subject1[1]/ns1:patient[1]/ns1:providerOrganization[1]/@classCode</path><content>ORG</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:assertion type="XPath Match" name="ControlActProcess moodCode"><con:configuration><path>declare namespace ns1='urn:hl7-org:v3';
//ns1:RespondingGateway_PRPA_IN201306UV02Response[1]/ns1:communityResponse[1]/ns1:PRPA_IN201306UV02[1]/ns1:controlActProcess[1]/@moodCode</path><content>EVN</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:assertion type="XPath Match" name="registrationEvent moodCode"><con:configuration><path>declare namespace ns1='urn:hl7-org:v3';
//ns1:RespondingGateway_PRPA_IN201306UV02Response[1]/ns1:communityResponse[1]/ns1:PRPA_IN201306UV02[1]/ns1:controlActProcess[1]/ns1:subject[1]/ns1:registrationEvent[1]/@moodCode</path><content>EVN</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:assertion type="XPath Match" name="queryMatchObservation moodCode"><con:configuration><path>declare namespace ns1='urn:hl7-org:v3';
//ns1:RespondingGateway_PRPA_IN201306UV02Response[1]/ns1:communityResponse[1]/ns1:PRPA_IN201306UV02[1]/ns1:controlActProcess[1]/ns1:subject[1]/ns1:registrationEvent[1]/ns1:subject1[1]/ns1:patient[1]/ns1:subjectOf1[1]/ns1:queryMatchObservation[1]/@moodCode</path><content>EVN</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:assertion type="XPath Match" name="controlActProcess classCode"><con:configuration><path>declare namespace ns1='urn:hl7-org:v3';
//ns1:RespondingGateway_PRPA_IN201306UV02Response[1]/ns1:communityResponse[1]/ns1:PRPA_IN201306UV02[1]/ns1:controlActProcess[1]/@classCode</path><content>CACT</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:assertion type="XPath Match" name="assignedDevice classCode" disabled="true"><con:configuration><path>declare namespace ns1='urn:hl7-org:v3';
//ns1:RespondingGateway_PRPA_IN201306UV02Response[1]/ns1:communityResponse[1]/ns1:PRPA_IN201306UV02[1]/ns1:controlActProcess[1]/ns1:authorOrPerformer[1]/ns1:assignedDevice[1]/@classCode</path><content>ASSIGNED</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:assertion type="XPath Match" name="registrationEvent classCode"><con:configuration><path>declare namespace ns1='urn:hl7-org:v3';
//ns1:RespondingGateway_PRPA_IN201306UV02Response[1]/ns1:communityResponse[1]/ns1:PRPA_IN201306UV02[1]/ns1:controlActProcess[1]/ns1:subject[1]/ns1:registrationEvent[1]/@classCode</path><content>REG</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:assertion type="XPath Match" name="Patient classCode"><con:configuration><path>declare namespace ns1='urn:hl7-org:v3';
//ns1:RespondingGateway_PRPA_IN201306UV02Response[1]/ns1:communityResponse[1]/ns1:PRPA_IN201306UV02[1]/ns1:controlActProcess[1]/ns1:subject[1]/ns1:registrationEvent[1]/ns1:subject1[1]/ns1:patient[1]/@classCode</path><content>PAT</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:assertion type="XPath Match" name="queryMatchObservation classCode"><con:configuration><path>declare namespace ns1='urn:hl7-org:v3';
//ns1:RespondingGateway_PRPA_IN201306UV02Response[1]/ns1:communityResponse[1]/ns1:PRPA_IN201306UV02[1]/ns1:controlActProcess[1]/ns1:subject[1]/ns1:registrationEvent[1]/ns1:subject1[1]/ns1:patient[1]/ns1:subjectOf1[1]/ns1:queryMatchObservation[1]/@classCode</path><content>CASE</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:assertion type="XPath Match" name="assignedEntity classCode"><con:configuration><path>declare namespace ns1='urn:hl7-org:v3';
//ns1:RespondingGateway_PRPA_IN201306UV02Response[1]/ns1:communityResponse[1]/ns1:PRPA_IN201306UV02[1]/ns1:controlActProcess[1]/ns1:subject[1]/ns1:registrationEvent[1]/ns1:custodian[1]/ns1:assignedEntity[1]/@classCode</path><content>ASSIGNED</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:assertion type="XPath Match" name="Given-First Name"><con:configuration><path>declare namespace ns1='urn:hl7-org:v3';
//ns1:RespondingGateway_PRPA_IN201306UV02Response[1]/ns1:communityResponse[1]/ns1:PRPA_IN201306UV02[1]/ns1:controlActProcess[1]/ns1:subject[1]/ns1:registrationEvent[1]/ns1:subject1[1]/ns1:patient[1]/ns1:patientPerson[1]/ns1:name[1]/ns1:given[1]</path><content>Joe</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:assertion type="XPath Match" name="Family Name"><con:configuration><path>declare namespace ns1='urn:hl7-org:v3';
//ns1:RespondingGateway_PRPA_IN201306UV02Response[1]/ns1:communityResponse[1]/ns1:PRPA_IN201306UV02[1]/ns1:controlActProcess[1]/ns1:subject[1]/ns1:registrationEvent[1]/ns1:subject1[1]/ns1:patient[1]/ns1:patientPerson[1]/ns1:name[1]/ns1:family[1]</path><content>Smith</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:assertion type="XPath Match" name="Given-Middle Name"><con:configuration><path>declare namespace ns1='urn:hl7-org:v3';
//ns1:RespondingGateway_PRPA_IN201306UV02Response[1]/ns1:communityResponse[1]/ns1:PRPA_IN201306UV02[1]/ns1:controlActProcess[1]/ns1:subject[1]/ns1:registrationEvent[1]/ns1:subject1[1]/ns1:patient[1]/ns1:patientPerson[1]/ns1:name[1]/ns1:given[2]</path><content>Middle</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="mockresponse" name="NHINCProxyPatientDiscoveryMockResponse"><con:settings/><con:config xsi:type="con:MockResponseStep" startStep="EntityPatientDiscoveryRequest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>NhincProxyPatientDiscoveryBinding</con:interface><con:operation>Proxy_PRPA_IN201305UV</con:operation><con:path>/EntityPatientDiscoveryMockResponse</con:path><con:port>2222</con:port><con:timeout>40000</con:timeout><con:response><con:settings/><con:responseContent><![CDATA[<S:Envelope xmlns:S="http://www.w3.org/2003/05/soap-envelope">
   <S:Body>
      <ns3:PRPA_IN201306UV02 ITSVersion="XML_1.0" xmlns="http://schemas.xmlsoap.org/ws/2004/08/addressing" xmlns:ns2="urn:gov:hhs:fha:nhinc:common:nhinccommon" xmlns:ns3="urn:hl7-org:v3" xmlns:ns4="urn:gov:hhs:fha:nhinc:common:patientcorrelationfacade">
         <ns3:id extension="4191797c:1259356875e:-7c2d" root="1.1.1"/>
         <ns3:creationTime value="2009121522276"/>
         <ns3:interactionId extension="PRPA_IN201306UV" root="2.16.840.1.113883.1.6"/>
         <ns3:processingCode code="P"/>
         <ns3:processingModeCode code="R"/>
         <ns3:acceptAckCode code="AL"/>
         <ns3:receiver typeCode="RCV">
            <ns3:device determinerCode="INSTANCE" classCode="DEV">
               <ns3:id root="1.2.345.678.999"/>
               <ns3:asAgent classCode="AGNT">
                  <ns3:representedOrganization determinerCode="INSTANCE" classCode="ORG">
                     <ns3:id root="1.1"/>
                  </ns3:representedOrganization>
               </ns3:asAgent>
            </ns3:device>
         </ns3:receiver>
         <ns3:sender typeCode="SND">
            <ns3:device determinerCode="INSTANCE" classCode="DEV">
               <ns3:id root="1.2.345.678.999"/>
               <ns3:asAgent classCode="AGNT">
                  <ns3:representedOrganization determinerCode="INSTANCE" classCode="ORG">
                     <ns3:id root="2.2"/>
                  </ns3:representedOrganization>
               </ns3:asAgent>
            </ns3:device>
         </ns3:sender>
         <ns3:acknowledgement>
            <ns3:typeId extension="PRPA_IN201305UV02" root="2.16.840.1.113883.1.6"/>
            <ns3:typeCode code="AA"/>
            <ns3:targetMessage xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
         </ns3:acknowledgement>
         <ns3:controlActProcess moodCode="EVN" classCode="CACT">
            <authorOrPerformer contextControlCode="AP" typeCode="AUT" nullFlavor="">
               <assignedDevice classCode="ASSIGNED">
                  <id root="1.1"/>
               </assignedDevice>
            </authorOrPerformer>
            <ns3:code codeSystem="2.16.840.1.113883.1.6" code="PRPA_TE201306UV"/>
            <ns3:subject typeCode="SUBJ">
               <ns3:registrationEvent moodCode="EVN" classCode="REG">
                  <ns3:id nullFlavor="NA"/>
                  <ns3:statusCode code="active"/>
                  <ns3:subject1 typeCode="">
                     <ns3:patient classCode="PAT">
                        <ns3:id extension="1234" root="1.1.2.16.840.1.113883.3.198"/>
                        <ns3:statusCode code="SD"/>
                        <ns3:patientPerson>
                           <ns3:name>
                              <ns3:family partType="FAM">Smith</ns3:family>
                              <ns3:given partType="GIV">Joe</ns3:given>
                              <ns3:given partType="GIV">Middle</ns3:given>
                           </ns3:name>
                           <ns3:administrativeGenderCode code="M"/>
                           <ns3:birthTime value="19560301"/>
                           <ns3:addr>
                              <ns3:city>Orlando</ns3:city>
                              <ns3:state>FL</ns3:state>
                              <ns3:postalCode>98765</ns3:postalCode>
                           </ns3:addr>
                           <asOtherIDs classCode="SD">
                              <id extension="123456789" root="2.16.840.1.113883.4.1"/>
                              <scopingOrganization determinerCode="" classCode="">
                                 <id root="2.16.840.1.113883.4.1"/>
                              </scopingOrganization>
                           </asOtherIDs>
                        </ns3:patientPerson>
                        <ns3:providerOrganization determinerCode="INSTANCE" classCode="ORG">
                           <ns3:id root="1.1.2.16.840.1.113883.3.198"/>
                           <ns3:contactParty xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
                        </ns3:providerOrganization>
                        <ns3:subjectOf1>
                           <ns3:queryMatchObservation moodCode="EVN" classCode="CASE">
                              <ns3:code code="IHE_PDQ"/>
                              <ns3:value xsi:type="ns3:INT" value="100" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
                           </ns3:queryMatchObservation>
                        </ns3:subjectOf1>
                     </ns3:patient>
                  </ns3:subject1>
                  <ns3:custodian typeCode="CST">
                     <ns3:assignedEntity classCode="ASSIGNED">
                        <ns3:id root="1.1.2.16.840.1.113883.3.198"/>
                     </ns3:assignedEntity>
                  </ns3:custodian>
               </ns3:registrationEvent>
            </ns3:subject>
            <ns3:queryAck>
               <ns3:queryId extension="-abd3453dcd24wkkks545" root="2.2"/>
               <ns3:queryResponseCode code="OK"/>
               <ns3:resultTotalQuantity value="1"/>
               <ns3:resultCurrentQuantity value="1"/>
               <ns3:resultRemainingQuantity value="0"/>
            </ns3:queryAck>
            <ns3:queryByParameter>
               <ns3:queryId extension="-2fc8f269:1297ebff160:-7e63" root="2.2"/>
               <ns3:statusCode code="new"/>
               <ns3:responseModalityCode code="R"/>
               <ns3:responsePriorityCode code="I"/>
               <ns3:parameterList>
                  <ns3:livingSubjectAdministrativeGender>
                     <ns3:value code="M"/>
                     <ns3:semanticsText/>
                  </ns3:livingSubjectAdministrativeGender>
                  <ns3:livingSubjectBirthTime>
                     <ns3:value value="19560301"/>
                     <ns3:semanticsText/>
                  </ns3:livingSubjectBirthTime>
                  <ns3:livingSubjectId>
                     <ns3:value extension="1234" root="1.1.2.16.840.1.113883.3.198"/>
                     <ns3:semanticsText/>
                  </ns3:livingSubjectId>
                  <ns3:livingSubjectId>
                     <ns3:value extension="123456789" root="2.16.840.1.113883.4.1"/>
                     <ns3:semanticsText/>
                  </ns3:livingSubjectId>
                  <ns3:livingSubjectName>
                     <ns3:value>
                        <ns3:family partType="FAM">Smith</ns3:family>
                        <ns3:given partType="GIV">Joe</ns3:given>
                        <ns3:given partType="GIV">Middle</ns3:given>
                     </ns3:value>
                     <ns3:semanticsText/>
                  </ns3:livingSubjectName>
                  <ns3:patientAddress>
                     <ns3:value>
                        <ns3:city>Orlando</ns3:city>
                        <ns3:state>FL</ns3:state>
                        <ns3:postalCode>98765</ns3:postalCode>
                     </ns3:value>
                     <ns3:semanticsText/>
                  </ns3:patientAddress>
               </ns3:parameterList>
            </ns3:queryByParameter>
         </ns3:controlActProcess>
      </ns3:PRPA_IN201306UV02>
   </S:Body>
</S:Envelope>]]></con:responseContent><con:wsaConfig mustUnderstand="NONE" version="200508"/></con:response><con:assertion type="XPath Match" name="SingleMatchGivenName"><con:configuration><path>declare namespace ns3='urn:hl7-org:v3';
//ns3:Proxy_PRPA_IN201305UVProxyRequest[1]/ns3:PRPA_IN201305UV02[1]/ns3:controlActProcess[1]/ns3:queryByParameter[1]/ns3:parameterList[1]/ns3:livingSubjectName[1]/ns3:value[1]/ns3:given[1]</path><content>Joe</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:assertion type="XPath Match" name="SingleMatchFamilyName"><con:configuration><path>declare namespace ns3='urn:hl7-org:v3';
//ns3:Proxy_PRPA_IN201305UVProxyRequest[1]/ns3:PRPA_IN201305UV02[1]/ns3:controlActProcess[1]/ns3:queryByParameter[1]/ns3:parameterList[1]/ns3:livingSubjectName[1]/ns3:value[1]/ns3:family[1]</path><content>Smith</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:host/></con:config></con:testStep><con:testStep type="groovy" name="count correlations (1)"><con:settings/><con:config><script>
def patId = context.findProperty('PDSubjectID')
context.withSql('PatientCorrelationDB') { sql -> 
  assert 1 == sql.firstRow("select count(*) from " + context.findProperty('PatientCorrelationTable') + " where PatientId = '" + patId + "'")[0]
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Count AA Mapping (2)" disabled="true"><con:settings/><con:config><script>context.withSql('AAmappingDB') { sql -> 
  assert 2 == sql.firstRow("select count(*) from " + context.findProperty('AAmappingTable'))[0]
}
</script></con:config></con:testStep><con:properties><con:property><con:name>startDate</con:name><con:value>2010-07-06T00:00:00Z</con:value></con:property><con:property><con:name>endDate</con:name><con:value>2010-07-06T18:02:14Z</con:value></con:property><con:property><con:name>sigDate</con:name><con:value>07/06/2010 00:00:00</con:value></con:property><con:property><con:name>expireDate</con:name><con:value>2010-08-05T00:00:00Z</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PatientDiscoveryNoBlankValuesMockResponseTrustMode - Patch 191 and 231" searchProperties="true" id="e6ad3ace-c22d-4603-b7c0-0722e09108a2"><con:settings/><con:testStep type="properties" name="EntityPatientDiscovery Test Case Properties" disabled="true"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" createMissingOnLoad="true" discardValuesOnSave="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:source>C:/Projects/NHINC/Current/Product/SoapUI_Test/RegressionSuite/EntityPatientDiscovery.properties</con:source><con:target/><con:properties><con:property><con:name>LocalAA</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>LocalHCIDescription</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>LocalHCID</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PatientDiscoveryEndpoint</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDSubjectID</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDzipCode</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDRespondingAA</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDRespondingHCID</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDpurposeOfDisclosure</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDSSN</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDdOB</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDexpirationDate</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDuniquePatientId</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDstreetAddress</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDstate</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDCity</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDcountry</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDdateOfSignature</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDRespondingHCDesc</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDRespondingHCName</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDlivingSubjectAdministrativeGender</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDlivingSubjectBirthTime</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>LocalHCIDName</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDAssignAuthID</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>NHINGatewayConfigDir</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>NHINGatewayHost</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PEReceivingHCID</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>mockHost</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>SingleMatchPrefix</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>SingleMatchGivenName</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>SingleMatchFullName</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>SingleMatchFamilyName</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>SUT.PatientCorrelationHost</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>SUT.PatientCorrelationPort</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>SUT.PatientCorrelationDB</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>SUT.PatientCorrelationUser</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>SUT.PatientCorrelationPass</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>SUT.PatientCorrelationTable</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>NoMatchPrefix</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>NoMatchGivenName</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>NoMatchFullName</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>NoMatchFamilyName</con:name><con:value xsi:nil="true"/></con:property></con:properties></con:config></con:testStep><con:testStep type="transfer" name="EntityPatientDiscovery Property Transfer" disabled="true"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>PatientDiscoveryEndPoint</con:name><con:sourceType>PatientDiscoveryEndpoint</con:sourceType><con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep><con:targetType>Endpoint</con:targetType><con:targetStep>EntityPatientDiscoveryRequest</con:targetStep><con:targetPath/></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferChildNodes="false" useXQuery="false" ignoreEmpty="false" entitize="false" transferToAll="false"><con:name>LocalHCID</con:name><con:sourceType>LocalHCID</con:sourceType><con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep><con:targetType>Request</con:targetType><con:targetStep>EntityPatientDiscoveryRequest</con:targetStep><con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:sender[1]/urn:device[1]/urn:asAgent[1]/urn:representedOrganization[1]/urn:id[1]/@root</con:targetPath></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferChildNodes="false" transferToAll="false" ignoreEmpty="false" useXQuery="false" entitize="false"><con:name>ReceivingHCID</con:name><con:sourceType>PDRespondingHCID</con:sourceType><con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep><con:targetType>Request</con:targetType><con:targetStep>EntityPatientDiscoveryRequest</con:targetStep><con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:receiver[1]/urn:device[1]/urn:id[1]/@root</con:targetPath></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" transferToAll="false"><con:name>PDQueryRequestHCID</con:name><con:sourceType>LocalHCID</con:sourceType><con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep><con:targetType>Request</con:targetType><con:targetStep>EntityPatientDiscoveryRequest</con:targetStep><con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:sender[1]/urn:device[1]/urn:asAgent[1]/urn:representedOrganization[1]/urn:id[1]/@root</con:targetPath></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false"><con:name>PDQueryRequestSubjectGivenName</con:name><con:sourceType>SingleMatchGivenName</con:sourceType><con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep><con:targetType>Request</con:targetType><con:targetStep>EntityPatientDiscoveryRequest</con:targetStep><con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:controlActProcess[1]/urn:queryByParameter[1]/urn:parameterList[1]/urn:livingSubjectName[1]/urn:value[1]/urn:given[1]</con:targetPath></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" ignoreEmpty="false" transferToAll="false" useXQuery="false" transferChildNodes="false"><con:name>PDQueryRequestSubjectFamName</con:name><con:sourceType>SingleMatchFamilyName</con:sourceType><con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep><con:sourcePath xsi:nil="true"/><con:targetType>Request</con:targetType><con:targetStep>EntityPatientDiscoveryRequest</con:targetStep><con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:controlActProcess[1]/urn:queryByParameter[1]/urn:parameterList[1]/urn:livingSubjectName[1]/urn:value[1]/urn:family[1]</con:targetPath></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" transferToAll="false" ignoreEmpty="false" useXQuery="false" transferChildNodes="false"><con:name>PDQueryRequestSubjectBirthTime</con:name><con:sourceType>PDlivingSubjectBirthTime</con:sourceType><con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep><con:targetType>Request</con:targetType><con:targetStep>EntityPatientDiscoveryRequest</con:targetStep><con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:controlActProcess[1]/urn:queryByParameter[1]/urn:parameterList[1]/urn:livingSubjectBirthTime[1]/urn:value[1]/@value</con:targetPath></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" ignoreEmpty="false" transferToAll="false" useXQuery="false" transferChildNodes="false"><con:name>PDQueryRequestSubjectGender</con:name><con:sourceType>PDlivingSubjectAdministrativeGender</con:sourceType><con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep><con:sourcePath xsi:nil="true"/><con:targetType>Request</con:targetType><con:targetStep>EntityPatientDiscoveryRequest</con:targetStep><con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:controlActProcess[1]/urn:queryByParameter[1]/urn:parameterList[1]/urn:livingSubjectAdministrativeGender[1]/urn:value[1]/@code</con:targetPath></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferToAll="false" entitize="false" ignoreEmpty="false" useXQuery="false" transferChildNodes="false"><con:name>AssertionSSN</con:name><con:sourceType>PDSSN</con:sourceType><con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep><con:sourcePath xsi:nil="true"/><con:targetType>Request</con:targetType><con:targetStep>EntityPatientDiscoveryRequest</con:targetStep><con:targetPath>declare namespace urn1='urn:gov:hhs:fha:nhinc:common:nhinccommon';
declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:assertion[1]/urn1:SSN[1]</con:targetPath></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferToAll="false" entitize="false" ignoreEmpty="false" useXQuery="false" transferChildNodes="false"><con:name>AssertionUniquePatientID</con:name><con:sourceType>PDuniquePatientId</con:sourceType><con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep><con:sourcePath xsi:nil="true"/><con:targetType>Request</con:targetType><con:targetStep>EntityPatientDiscoveryRequest</con:targetStep><con:targetPath>declare namespace urn1='urn:gov:hhs:fha:nhinc:common:nhinccommon';
declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:assertion[1]/urn1:uniquePatientId[1]</con:targetPath></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>PDAssignAuthId</con:name><con:sourceType>PDAssignAuthID</con:sourceType><con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep><con:targetType>Request</con:targetType><con:targetStep>EntityPatientDiscoveryRequest</con:targetStep><con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:controlActProcess[1]/urn:authorOrPerformer[1]/urn:assignedDevice[1]/urn:id[1]/@root</con:targetPath></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>PDQueryReqSubjectAssignAuthID</con:name><con:sourceType>PDAssignAuthID</con:sourceType><con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep><con:targetType>Request</con:targetType><con:targetStep>EntityPatientDiscoveryRequest</con:targetStep><con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:controlActProcess[1]/urn:queryByParameter[1]/urn:parameterList[1]/urn:livingSubjectId[1]/urn:value[1]/@root</con:targetPath></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" useXQuery="false" transferChildNodes="false" transferToAll="false" ignoreEmpty="false"><con:name>PDQueryRequestSubjectID</con:name><con:sourceType>PDSubjectID</con:sourceType><con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep><con:targetType>Request</con:targetType><con:targetStep>EntityPatientDiscoveryRequest</con:targetStep><con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:controlActProcess[1]/urn:queryByParameter[1]/urn:parameterList[1]/urn:livingSubjectId[1]/urn:value[1]/@extension</con:targetPath></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferToAll="false" ignoreEmpty="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>AssertionHCID</con:name><con:sourceType>LocalHCID</con:sourceType><con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep><con:sourcePath xsi:nil="true"/><con:targetType>Request</con:targetType><con:targetStep>EntityPatientDiscoveryRequest</con:targetStep><con:targetPath>declare namespace urn1='urn:gov:hhs:fha:nhinc:common:nhinccommon';
declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:assertion[1]/urn1:homeCommunity[1]/urn1:homeCommunityId[1]</con:targetPath></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" transferToAll="false"><con:name>AssertionHCIDDesc</con:name><con:sourceType>LocalHCIDescription</con:sourceType><con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep><con:sourcePath xsi:nil="true"/><con:targetType>Request</con:targetType><con:targetStep>EntityPatientDiscoveryRequest</con:targetStep><con:targetPath>declare namespace urn1='urn:gov:hhs:fha:nhinc:common:nhinccommon';
declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:assertion[1]/urn1:homeCommunity[1]/urn1:description[1]</con:targetPath></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>AssertionHCIDname</con:name><con:sourceType>LocalHCIDName</con:sourceType><con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep><con:sourcePath xsi:nil="true"/><con:targetType>Request</con:targetType><con:targetStep>EntityPatientDiscoveryRequest</con:targetStep><con:targetPath>declare namespace urn1='urn:gov:hhs:fha:nhinc:common:nhinccommon';
declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:assertion[1]/urn1:homeCommunity[1]/urn1:name[1]</con:targetPath></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Intialize Configurations"><con:settings/><con:config><script>FileUtils.InitializeNHINCProperties(context, log);
</script></con:config></con:testStep><con:testStep type="groovy" name="Set Response Mode"><con:settings/><con:config><script>//def dataSource = testRunner.testCase.getTestStepByName( "EntityPatientDiscovery Test Case Properties" );
//def destDir = dataSource.getPropertyValue( "NHINGatewayConfigDir" );
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

def destConfigFileLocation = context.findProperty("NHINGatewayConfigDir");
FileUtils.UpdateProperty(destConfigFileLocation, 'gateway.properties', 'patientDiscoveryResponseMode', 'Trust',context,log)</script></con:config></con:testStep><con:testStep type="groovy" name="clear correlations table"><con:settings/><con:config><script>context.withSql('PatientCorrelationDB') { sql -> 
  sql.execute('delete from ' + context.findProperty('PatientCorrelationTable'))
}
</script></con:config></con:testStep><con:testStep type="groovy" name="ModifyInternalConnectionInfoUsingTestHelper"><con:settings/><con:config><script>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );
def destConfigFileLocation = System.env['NHINC_PROPERTIES_DIR'];
def NHINGatewayHost = context.findProperty("NHINGatewayHost");//**** Redbox (remove later)

def mockHost = context.findProperty("mockHost");
def patientdiscoveryURL = "https://" + NHINGatewayHost + ":8181/CONNECTGatewayTest/NhinPatientDiscoveryTestHelper";
def mockPatientDiscoveryURL = "http://" + mockHost + ":2222/EntityPatientDiscoveryMockResponse";
def LocalHCID = context.findProperty( "LocalHCID" );
def RemoteHCID = context.findProperty("PDRespondingHCID");

FileUtils.CreateOrUpdateConnection(destConfigFileLocation, RemoteHCID, "PatientDiscovery", patientdiscoveryURL, context, log)
FileUtils.CreateOrUpdateConnection(destConfigFileLocation, RemoteHCID, "mockpatientdiscovery", mockPatientDiscoveryURL, context, log)</script></con:config></con:testStep><con:testStep type="request" name="EntityPatientDiscoveryRequest"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>EntityPatientDiscoveryBindingSoap</con:interface><con:operation>RespondingGateway_PRPA_IN201305UV02</con:operation><con:request name="EntityPatientDiscoveryRequest"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://localhost:8080/CONNECTGateway/EntityPatientDiscovery</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope" xmlns:urn="urn:hl7-org:v3" xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
   <soapenv:Header/>
   <soapenv:Body>
      <urn:RespondingGateway_PRPA_IN201305UV02Request>
         <urn:PRPA_IN201305UV02 ITSVersion="XML_1.0">
            <urn:id root="1.1" extension="-5a3e95b1:11d1fa33d45:-7f9b"/>
            <urn:creationTime value="20091116084800"/>
            <urn:interactionId root="2.16.840.1.113883.1.6" extension="PRPA_IN201305UV02"/>
            <urn:processingCode code="T"/>
            <urn:processingModeCode code="I"/>
            <urn:acceptAckCode code="AL"/>
            <urn:receiver typeCode="RCV">
               <urn:device classCode="DEV" determinerCode="INSTANCE">
                  <urn:id root="2.2"/>
                  <urn:asAgent classCode="AGNT">
                     <urn:representedOrganization classCode="ORG" determinerCode="INSTANCE">
                        <urn:id root="${#Project#PDRespondingHCID}"/>
                     </urn:representedOrganization>
                  </urn:asAgent>
               </urn:device>
            </urn:receiver>
            <urn:sender typeCode="SND">
               <urn:device classCode="DEV" determinerCode="INSTANCE">
                  <urn:id root="1.2.345.678.999"/>
                  <urn:asAgent classCode="AGNT">
                     <urn:representedOrganization classCode="ORG" determinerCode="INSTANCE">
                        <urn:id root="${#Project#LocalHCID}"/>
                     </urn:representedOrganization>
                  </urn:asAgent>
               </urn:device>
            </urn:sender>
            <urn:controlActProcess classCode="CACT" moodCode="EVN">
               <code code="PRPA_TE201305UV02" codeSystem="2.16.840.1.113883.1.6"/>
               <urn:authorOrPerformer typeCode="AUT">
                  <urn:assignedDevice>
                     <urn:id root="${#Project#PDAssignAuthID}"/>
                  </urn:assignedDevice>
               </urn:authorOrPerformer>
               <urn:queryByParameter>
                  <urn:queryId root="2.2" extension="-abd3453dcd24wkkks545"/>
                  <urn:statusCode code="new"/>
                  <urn:responseModalityCode code="R"/>
                  <urn:responsePriorityCode code="I"/>
                  <urn:parameterList>
                     <urn:livingSubjectAdministrativeGender>
                        <urn:value code="${#Project#PDlivingSubjectAdministrativeGender}"/>
                        <urn:semanticsText representation="TXT">LivingSubject.administrativeGender</urn:semanticsText>
                     </urn:livingSubjectAdministrativeGender>
                     <urn:livingSubjectBirthTime>
                        <urn:value value="${#Project#PDlivingSubjectBirthTime}" operator="I"/>
                        <urn:semanticsText representation="TXT">LivingSubject.birthTime</urn:semanticsText>
                     </urn:livingSubjectBirthTime>
                     <urn:livingSubjectName>
                        <urn:value>
                           <urn:family partType="FAM">${#Project#SingleMatchFamilyName}</urn:family>
                           <urn:given partType="GIV">${#Project#SingleMatchGivenName}</urn:given>
                           <urn:given partType="GIV">${#Project#SingleMatchMiddleName}</urn:given>
                        </urn:value>
                        <urn:semanticsText representation="TXT">LivingSubject.name</urn:semanticsText>
                     </urn:livingSubjectName>
                     <urn:livingSubjectId>
                        <urn:value extension="123456789" root="2.16.840.1.113883.4.1"/>
                        <urn:semanticsText/>
                     </urn:livingSubjectId>
                     <urn:livingSubjectId>
                        <urn:value root="${#Project#PDAssignAuthID}" extension="${#Project#PDSubjectID}" assigningAuthorityName="?"/>
                        <urn:semanticsText representation="TXT"/>
                     </urn:livingSubjectId>
                  </urn:parameterList>
               </urn:queryByParameter>
            </urn:controlActProcess>
         </urn:PRPA_IN201305UV02>
         <urn:NhinTargetCommunities>
            <urn1:nhinTargetCommunity>
               <urn1:homeCommunity>
                  <urn1:description>desc</urn1:description>
                  <urn1:homeCommunityId>${#Project#PDRespondingHCID}</urn1:homeCommunityId>
                  <urn1:name>Name</urn1:name>
               </urn1:homeCommunity>
               <urn1:list>List</urn1:list>
               <urn1:region>Region</urn1:region>
            </urn1:nhinTargetCommunity>
         </urn:NhinTargetCommunities>
         <urn:assertion>
            <urn1:address>
               <urn1:addressType>
                  <urn1:code>W</urn1:code>
               </urn1:addressType>
               <urn1:city>Melbourne</urn1:city>
               <urn1:country>US</urn1:country>
               <urn1:state>FL</urn1:state>
               <urn1:streetAddress>123 Johnson Rd</urn1:streetAddress>
               <urn1:zipCode>12345</urn1:zipCode>
            </urn1:address>
            <urn1:dateOfBirth>19800516</urn1:dateOfBirth>
            <urn1:dateOfSignature>20080520</urn1:dateOfSignature>
            <urn1:expirationDate>20100520</urn1:expirationDate>
            <urn1:explanationNonClaimantSignature>NEEDED</urn1:explanationNonClaimantSignature>
            <urn1:haveSecondWitnessSignature>true</urn1:haveSecondWitnessSignature>
            <urn1:haveSignature>true</urn1:haveSignature>
            <urn1:haveWitnessSignature>true</urn1:haveWitnessSignature>
            <urn1:homeCommunity>
               <urn1:description>Test HCID1</urn1:description>
               <urn1:homeCommunityId>1.1</urn1:homeCommunityId>
               <urn1:name>HCID1</urn1:name>
            </urn1:homeCommunity>
            <urn1:personName>
               <urn1:familyName>Winslet</urn1:familyName>
               <urn1:givenName>Kate</urn1:givenName>
               <urn1:nameType>
                  <urn1:code>G</urn1:code>
               </urn1:nameType>
               <urn1:secondNameOrInitials>FJ</urn1:secondNameOrInitials>
               <urn1:fullName>Joe Smith</urn1:fullName>
               <urn1:prefix>Mr</urn1:prefix>
            </urn1:personName>
            <urn1:phoneNumber>
               <urn1:areaCode>123</urn1:areaCode>
               <urn1:countryCode>1</urn1:countryCode>
               <urn1:extension>1234</urn1:extension>
               <urn1:localNumber>3456789</urn1:localNumber>
               <urn1:phoneNumberType>
                  <urn1:code>W</urn1:code>
               </urn1:phoneNumberType>
            </urn1:phoneNumber>
            <urn1:purposeOfDisclosureCoded>
               <urn1:code>PUBLICHEALTH</urn1:code>
               <urn1:codeSystem>2.16.840.1.113883.3.18.7.1</urn1:codeSystem>
               <urn1:codeSystemName>nhin-purpose</urn1:codeSystemName>
               <urn1:codeSystemVersion>1.0</urn1:codeSystemVersion>
               <urn1:displayName>Use or disclosure of Psychotherapy Notes</urn1:displayName>
               <urn1:originalText>Use or disclosure of Psychotherapy Notes</urn1:originalText>
            </urn1:purposeOfDisclosureCoded>
            <urn1:secondWitnessAddress>
               <urn1:addressType>
                  <urn1:code>W</urn1:code>
               </urn1:addressType>
               <urn1:city>Melbourne</urn1:city>
               <urn1:country>US</urn1:country>
               <urn1:state>FL</urn1:state>
               <urn1:streetAddress>123 Johnson Rd</urn1:streetAddress>
               <urn1:zipCode>12345</urn1:zipCode>
            </urn1:secondWitnessAddress>
            <urn1:secondWitnessName>
               <urn1:familyName>Hughes</urn1:familyName>
               <urn1:givenName>Howie</urn1:givenName>
               <urn1:nameType>
                  <urn1:code>G</urn1:code>
               </urn1:nameType>
               <urn1:secondNameOrInitials>HH</urn1:secondNameOrInitials>
               <urn1:fullName>Howie Hughes</urn1:fullName>
               <urn1:prefix>Dr</urn1:prefix>
            </urn1:secondWitnessName>
            <urn1:secondWitnessPhone>
               <urn1:areaCode>123</urn1:areaCode>
               <urn1:countryCode>1</urn1:countryCode>
               <urn1:extension>1546</urn1:extension>
               <urn1:localNumber>4567892</urn1:localNumber>
               <urn1:phoneNumberType>
                  <urn1:code>W</urn1:code>
               </urn1:phoneNumberType>
            </urn1:secondWitnessPhone>
            <urn1:SSN>123456789</urn1:SSN>
            <!--1 or more repetitions:-->
            <urn1:uniquePatientId>1234^^^&amp;amp;1.1&amp;amp;ISO</urn1:uniquePatientId>
            <urn1:witnessAddress>
               <urn1:addressType>
                  <urn1:code>W</urn1:code>
               </urn1:addressType>
               <urn1:city>Frankfort</urn1:city>
               <urn1:country>US</urn1:country>
               <urn1:state>MN</urn1:state>
               <urn1:streetAddress>432 Jackson St</urn1:streetAddress>
               <urn1:zipCode>65498</urn1:zipCode>
            </urn1:witnessAddress>
            <urn1:witnessName>
               <urn1:familyName>Ugble</urn1:familyName>
               <urn1:givenName>Gary</urn1:givenName>
               <urn1:nameType>
                  <urn1:code>G</urn1:code>
               </urn1:nameType>
               <urn1:secondNameOrInitials>GU</urn1:secondNameOrInitials>
               <urn1:fullName>Gary Ugble</urn1:fullName>
               <urn1:prefix>Mr</urn1:prefix>
            </urn1:witnessName>
            <urn1:witnessPhone>
               <urn1:areaCode>987</urn1:areaCode>
               <urn1:countryCode>1</urn1:countryCode>
               <urn1:extension>6549</urn1:extension>
               <urn1:localNumber>2222222</urn1:localNumber>
               <urn1:phoneNumberType>
                  <urn1:code>H</urn1:code>
               </urn1:phoneNumberType>
            </urn1:witnessPhone>
            <urn1:userInfo>
               <urn1:personName>
                  <urn1:familyName>Anderson</urn1:familyName>
                  <urn1:givenName>Wilma</urn1:givenName>
                  <urn1:nameType>
                     <urn1:code>G</urn1:code>
                  </urn1:nameType>
                  <urn1:secondNameOrInitials>WA</urn1:secondNameOrInitials>
                  <urn1:fullName>Wilma Anderson</urn1:fullName>
                  <urn1:prefix>Mrs</urn1:prefix>
               </urn1:personName>
               <urn1:userName>wanderson</urn1:userName>
               <urn1:role>nuse</urn1:role>
               <urn1:org>
                  <urn1:description>Test HCID1</urn1:description>
                  <urn1:homeCommunityId>1.1</urn1:homeCommunityId>
                  <urn1:name>HCID1</urn1:name>
               </urn1:org>
               <!--Optional:-->
               <urn1:roleCoded>
                  <urn1:code>Code</urn1:code>
                  <urn1:codeSystem>CodeSystem</urn1:codeSystem>
                  <urn1:codeSystemName>CodeSystemName</urn1:codeSystemName>
                  <urn1:codeSystemVersion>codeSystemVersion</urn1:codeSystemVersion>
                  <urn1:displayName>displayName</urn1:displayName>
                  <urn1:originalText>originalText</urn1:originalText>
                  <!--Zero or more repetitions:-->
                  <urn1:translation/>
               </urn1:roleCoded>
            </urn1:userInfo>
            <urn1:authorized>authorized</urn1:authorized>
            <!--Optional:-->
            <urn1:claimFormRef>claimFormRef</urn1:claimFormRef>
            <!--Optional:-->
            <urn1:claimFormRaw>cid:610957193055</urn1:claimFormRaw>
            <!--Optional:-->
            <urn1:samlAuthnStatement>
               <!--Optional:-->
               <urn1:authInstant>authInstant</urn1:authInstant>
               <!--Optional:-->
               <urn1:sessionIndex>sessionIndex</urn1:sessionIndex>
               <!--Optional:-->
               <urn1:authContextClassRef>authContextClassRef</urn1:authContextClassRef>
               <!--Optional:-->
               <urn1:subjectLocalityAddress>subjectLocalityAddress</urn1:subjectLocalityAddress>
               <!--Optional:-->
               <urn1:subjectLocalityDNSName>subjectLocalityDNSName</urn1:subjectLocalityDNSName>
            </urn1:samlAuthnStatement>
            <!--Optional:-->
            <urn1:samlAuthzDecisionStatement>
               <!--Optional:-->
               <urn1:decision>decision</urn1:decision>
               <!--Optional:-->
               <urn1:resource>resource</urn1:resource>
               <!--Optional:-->
               <urn1:action>action</urn1:action>
               <!--Optional:-->
               <urn1:evidence>
                  <!--Optional:-->
                  <urn1:assertion>
                     <!--Optional:-->
                     <urn1:id>5555</urn1:id>
                     <!--Optional:-->
                     <urn1:issueInstant>issueInstant</urn1:issueInstant>
                     <!--Optional:-->
                     <urn1:version>version</urn1:version>
                     <!--Optional:-->
                     <urn1:issuer>issuer</urn1:issuer>
                     <!--Optional:-->
                     <urn1:issuerFormat>issuerFormat</urn1:issuerFormat>
                     <!--Optional:-->
                     <urn1:conditions>
                        <!--Optional:-->
                        <urn1:notBefore>notBefore</urn1:notBefore>
                        <!--Optional:-->
                        <urn1:notOnOrAfter>notOnOrAfter</urn1:notOnOrAfter>
                     </urn1:conditions>
                     <!--Optional:-->
                     <urn1:contentReference>contentReference</urn1:contentReference>
                     <!--Optional:-->
                     <urn1:contentType>contentType</urn1:contentType>
                     <!--Optional:-->
                     <urn1:content>cid:574777349023</urn1:content>
                  </urn1:assertion>
               </urn1:evidence>
            </urn1:samlAuthzDecisionStatement>
            <!--Optional:-->
            <urn1:samlSignature>
               <!--Optional:-->
               <urn1:keyInfo>
                  <!--Optional:-->
                  <urn1:rsaKeyValueModulus>cid:1157111506023</urn1:rsaKeyValueModulus>
                  <!--Optional:-->
                  <urn1:rsaKeyValueExponent>cid:136268302631</urn1:rsaKeyValueExponent>
               </urn1:keyInfo>
               <!--Optional:-->
               <urn1:signatureValue>cid:880867232879</urn1:signatureValue>
            </urn1:samlSignature>
         </urn:assertion>
      </urn:RespondingGateway_PRPA_IN201305UV02Request>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="SOAP Fault Assertion"/><con:assertion type="XPath Match" name="Receiver determinerCode"><con:configuration><path>declare namespace ns1='urn:hl7-org:v3';
//ns1:RespondingGateway_PRPA_IN201306UV02Response[1]/ns1:communityResponse[1]/ns1:PRPA_IN201306UV02[1]/ns1:receiver[1]/ns1:device[1]/@determinerCode</path><content>INSTANCE</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:assertion type="XPath Match" name="Sender determinerCode"><con:configuration><path>declare namespace ns1='urn:hl7-org:v3';
//ns1:RespondingGateway_PRPA_IN201306UV02Response[1]/ns1:communityResponse[1]/ns1:PRPA_IN201306UV02[1]/ns1:sender[1]/ns1:device[1]/@determinerCode</path><content>INSTANCE</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:assertion type="XPath Match" name="Receiver classCode"><con:configuration><path>declare namespace ns1='urn:hl7-org:v3';
//ns1:RespondingGateway_PRPA_IN201306UV02Response[1]/ns1:communityResponse[1]/ns1:PRPA_IN201306UV02[1]/ns1:receiver[1]/ns1:device[1]/@classCode</path><content>DEV</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:assertion type="XPath Match" name="Sender classCode"><con:configuration><path>declare namespace ns1='urn:hl7-org:v3';
//ns1:RespondingGateway_PRPA_IN201306UV02Response[1]/ns1:communityResponse[1]/ns1:PRPA_IN201306UV02[1]/ns1:sender[1]/ns1:device[1]/@classCode</path><content>DEV</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:assertion type="XPath Match" name="ProviderOrg determinerCode"><con:configuration><path>declare namespace ns1='urn:hl7-org:v3';
//ns1:RespondingGateway_PRPA_IN201306UV02Response[1]/ns1:communityResponse[1]/ns1:PRPA_IN201306UV02[1]/ns1:controlActProcess[1]/ns1:subject[1]/ns1:registrationEvent[1]/ns1:subject1[1]/ns1:patient[1]/ns1:providerOrganization[1]/@determinerCode</path><content>INSTANCE</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:assertion type="XPath Match" name="ProviderOrg classCode"><con:configuration><path>declare namespace ns1='urn:hl7-org:v3';
//ns1:RespondingGateway_PRPA_IN201306UV02Response[1]/ns1:communityResponse[1]/ns1:PRPA_IN201306UV02[1]/ns1:controlActProcess[1]/ns1:subject[1]/ns1:registrationEvent[1]/ns1:subject1[1]/ns1:patient[1]/ns1:providerOrganization[1]/@classCode</path><content>ORG</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:assertion type="XPath Match" name="ControlActProcess moodCode"><con:configuration><path>declare namespace ns1='urn:hl7-org:v3';
//ns1:RespondingGateway_PRPA_IN201306UV02Response[1]/ns1:communityResponse[1]/ns1:PRPA_IN201306UV02[1]/ns1:controlActProcess[1]/@moodCode</path><content>EVN</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:assertion type="XPath Match" name="registrationEvent moodCode"><con:configuration><path>declare namespace ns1='urn:hl7-org:v3';
//ns1:RespondingGateway_PRPA_IN201306UV02Response[1]/ns1:communityResponse[1]/ns1:PRPA_IN201306UV02[1]/ns1:controlActProcess[1]/ns1:subject[1]/ns1:registrationEvent[1]/@moodCode</path><content>EVN</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:assertion type="XPath Match" name="queryMatchObservation moodCode"><con:configuration><path>declare namespace ns1='urn:hl7-org:v3';
//ns1:RespondingGateway_PRPA_IN201306UV02Response[1]/ns1:communityResponse[1]/ns1:PRPA_IN201306UV02[1]/ns1:controlActProcess[1]/ns1:subject[1]/ns1:registrationEvent[1]/ns1:subject1[1]/ns1:patient[1]/ns1:subjectOf1[1]/ns1:queryMatchObservation[1]/@moodCode</path><content>EVN</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:assertion type="XPath Match" name="controlActProcess classCode"><con:configuration><path>declare namespace ns1='urn:hl7-org:v3';
//ns1:RespondingGateway_PRPA_IN201306UV02Response[1]/ns1:communityResponse[1]/ns1:PRPA_IN201306UV02[1]/ns1:controlActProcess[1]/@classCode</path><content>CACT</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:assertion type="XPath Match" name="assignedDevice classCode" disabled="true"><con:configuration><path>declare namespace ns1='urn:hl7-org:v3';
//ns1:RespondingGateway_PRPA_IN201306UV02Response[1]/ns1:communityResponse[1]/ns1:PRPA_IN201306UV02[1]/ns1:controlActProcess[1]/ns1:authorOrPerformer[1]/ns1:assignedDevice[1]/@classCode</path><content>ASSIGNED</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:assertion type="XPath Match" name="registrationEvent classCode"><con:configuration><path>declare namespace ns1='urn:hl7-org:v3';
//ns1:RespondingGateway_PRPA_IN201306UV02Response[1]/ns1:communityResponse[1]/ns1:PRPA_IN201306UV02[1]/ns1:controlActProcess[1]/ns1:subject[1]/ns1:registrationEvent[1]/@classCode</path><content>REG</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:assertion type="XPath Match" name="Patient classCode"><con:configuration><path>declare namespace ns1='urn:hl7-org:v3';
//ns1:RespondingGateway_PRPA_IN201306UV02Response[1]/ns1:communityResponse[1]/ns1:PRPA_IN201306UV02[1]/ns1:controlActProcess[1]/ns1:subject[1]/ns1:registrationEvent[1]/ns1:subject1[1]/ns1:patient[1]/@classCode</path><content>PAT</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:assertion type="XPath Match" name="queryMatchObservation classCode"><con:configuration><path>declare namespace ns1='urn:hl7-org:v3';
//ns1:RespondingGateway_PRPA_IN201306UV02Response[1]/ns1:communityResponse[1]/ns1:PRPA_IN201306UV02[1]/ns1:controlActProcess[1]/ns1:subject[1]/ns1:registrationEvent[1]/ns1:subject1[1]/ns1:patient[1]/ns1:subjectOf1[1]/ns1:queryMatchObservation[1]/@classCode</path><content>CASE</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:assertion type="XPath Match" name="assignedEntity classCode"><con:configuration><path>declare namespace ns1='urn:hl7-org:v3';
//ns1:RespondingGateway_PRPA_IN201306UV02Response[1]/ns1:communityResponse[1]/ns1:PRPA_IN201306UV02[1]/ns1:controlActProcess[1]/ns1:subject[1]/ns1:registrationEvent[1]/ns1:custodian[1]/ns1:assignedEntity[1]/@classCode</path><content>ASSIGNED</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:assertion type="XPath Match" name="Given-First Name"><con:configuration><path>declare namespace ns1='urn:hl7-org:v3';
//ns1:RespondingGateway_PRPA_IN201306UV02Response[1]/ns1:communityResponse[1]/ns1:PRPA_IN201306UV02[1]/ns1:controlActProcess[1]/ns1:subject[1]/ns1:registrationEvent[1]/ns1:subject1[1]/ns1:patient[1]/ns1:patientPerson[1]/ns1:name[1]/ns1:given[1]</path><content>Joe</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:assertion type="XPath Match" name="Family Name"><con:configuration><path>declare namespace ns1='urn:hl7-org:v3';
//ns1:RespondingGateway_PRPA_IN201306UV02Response[1]/ns1:communityResponse[1]/ns1:PRPA_IN201306UV02[1]/ns1:controlActProcess[1]/ns1:subject[1]/ns1:registrationEvent[1]/ns1:subject1[1]/ns1:patient[1]/ns1:patientPerson[1]/ns1:name[1]/ns1:family[1]</path><content>Smith</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:assertion type="XPath Match" name="Given-Middle Name"><con:configuration><path>declare namespace ns1='urn:hl7-org:v3';
//ns1:RespondingGateway_PRPA_IN201306UV02Response[1]/ns1:communityResponse[1]/ns1:PRPA_IN201306UV02[1]/ns1:controlActProcess[1]/ns1:subject[1]/ns1:registrationEvent[1]/ns1:subject1[1]/ns1:patient[1]/ns1:patientPerson[1]/ns1:name[1]/ns1:given[2]</path><content>Middle</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="mockresponse" name="NHINCProxyPatientDiscoveryMockResponse"><con:settings/><con:config xsi:type="con:MockResponseStep" startStep="EntityPatientDiscoveryRequest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>NhincProxyPatientDiscoveryBinding</con:interface><con:operation>Proxy_PRPA_IN201305UV</con:operation><con:path>/EntityPatientDiscoveryMockResponse</con:path><con:port>2222</con:port><con:timeout>40000</con:timeout><con:response><con:settings/><con:responseContent><![CDATA[<S:Envelope xmlns:S="http://www.w3.org/2003/05/soap-envelope">
   <S:Body>
      <ns3:PRPA_IN201306UV02 ITSVersion="XML_1.0" xmlns="http://schemas.xmlsoap.org/ws/2004/08/addressing" xmlns:ns2="urn:gov:hhs:fha:nhinc:common:nhinccommon" xmlns:ns3="urn:hl7-org:v3" xmlns:ns4="urn:gov:hhs:fha:nhinc:common:patientcorrelationfacade">
         <ns3:id extension="4191797c:1259356875e:-7c2d" root="1.1.1"/>
         <ns3:creationTime value="2009121522276"/>
         <ns3:interactionId extension="PRPA_IN201306UV" root="2.16.840.1.113883.1.6"/>
         <ns3:processingCode code="P"/>
         <ns3:processingModeCode code="R"/>
         <ns3:acceptAckCode code="AL"/>
         <ns3:receiver typeCode="RCV">
            <ns3:device determinerCode="INSTANCE" classCode="DEV">
               <ns3:id root="1.2.345.678.999"/>
               <ns3:asAgent classCode="AGNT">
                  <ns3:representedOrganization determinerCode="INSTANCE" classCode="ORG">
                     <ns3:id root="1.1"/>
                  </ns3:representedOrganization>
               </ns3:asAgent>
            </ns3:device>
         </ns3:receiver>
         <ns3:sender typeCode="SND">
            <ns3:device determinerCode="INSTANCE" classCode="DEV">
               <ns3:id root="1.2.345.678.999"/>
               <ns3:asAgent classCode="AGNT">
                  <ns3:representedOrganization determinerCode="INSTANCE" classCode="ORG">
                     <ns3:id root="2.2"/>
                  </ns3:representedOrganization>
               </ns3:asAgent>
            </ns3:device>
         </ns3:sender>
         <ns3:acknowledgement>
            <ns3:typeId extension="PRPA_IN201305UV02" root="2.16.840.1.113883.1.6"/>
            <ns3:typeCode code="AA"/>
            <ns3:targetMessage xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
         </ns3:acknowledgement>
         <ns3:controlActProcess moodCode="EVN" classCode="CACT">
            <authorOrPerformer contextControlCode="AP" typeCode="AUT" nullFlavor="">
               <assignedDevice classCode="ASSIGNED">
                  <id root="1.1"/>
               </assignedDevice>
            </authorOrPerformer>
            <ns3:code codeSystem="2.16.840.1.113883.1.6" code="PRPA_TE201306UV"/>
            <ns3:subject typeCode="SUBJ">
               <ns3:registrationEvent moodCode="EVN" classCode="REG">
                  <ns3:id nullFlavor="NA"/>
                  <ns3:statusCode code="active"/>
                  <ns3:subject1 typeCode="">
                     <ns3:patient classCode="PAT">
                        <ns3:id extension="1234" root="1.1.2.16.840.1.113883.3.198"/>
                        <ns3:statusCode code="SD"/>
                        <ns3:patientPerson>
                           <ns3:name>
                              <ns3:family partType="FAM">Smith</ns3:family>
                              <ns3:given partType="GIV">Joe</ns3:given>
                              <ns3:given partType="GIV">Middle</ns3:given>
                           </ns3:name>
                           <ns3:administrativeGenderCode code="M"/>
                           <ns3:birthTime value="19560301"/>
                           <ns3:addr>
                              <ns3:city>Orlando</ns3:city>
                              <ns3:state>FL</ns3:state>
                              <ns3:postalCode>98765</ns3:postalCode>
                           </ns3:addr>
                           <asOtherIDs classCode="SD">
                              <id extension="123456789" root="2.16.840.1.113883.4.1"/>
                              <scopingOrganization determinerCode="" classCode="">
                                 <id root="2.16.840.1.113883.4.1"/>
                              </scopingOrganization>
                           </asOtherIDs>
                        </ns3:patientPerson>
                        <ns3:providerOrganization determinerCode="INSTANCE" classCode="ORG">
                           <ns3:id root="1.1.2.16.840.1.113883.3.198"/>
                           <ns3:contactParty xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
                        </ns3:providerOrganization>
                        <ns3:subjectOf1>
                           <ns3:queryMatchObservation moodCode="EVN" classCode="CASE">
                              <ns3:code code="IHE_PDQ"/>
                              <ns3:value xsi:type="ns3:INT" value="100" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
                           </ns3:queryMatchObservation>
                        </ns3:subjectOf1>
                     </ns3:patient>
                  </ns3:subject1>
                  <ns3:custodian typeCode="CST">
                     <ns3:assignedEntity classCode="ASSIGNED">
                        <ns3:id root="1.1.2.16.840.1.113883.3.198"/>
                     </ns3:assignedEntity>
                  </ns3:custodian>
               </ns3:registrationEvent>
            </ns3:subject>
            <ns3:queryAck>
               <ns3:queryId extension="-abd3453dcd24wkkks545" root="2.2"/>
               <ns3:queryResponseCode code="OK"/>
               <ns3:resultTotalQuantity value="1"/>
               <ns3:resultCurrentQuantity value="1"/>
               <ns3:resultRemainingQuantity value="0"/>
            </ns3:queryAck>
            <ns3:queryByParameter>
               <ns3:queryId extension="-2fc8f269:1297ebff160:-7e63" root="2.2"/>
               <ns3:statusCode code="new"/>
               <ns3:responseModalityCode code="R"/>
               <ns3:responsePriorityCode code="I"/>
               <ns3:parameterList>
                  <ns3:livingSubjectAdministrativeGender>
                     <ns3:value code="M"/>
                     <ns3:semanticsText/>
                  </ns3:livingSubjectAdministrativeGender>
                  <ns3:livingSubjectBirthTime>
                     <ns3:value value="19560301"/>
                     <ns3:semanticsText/>
                  </ns3:livingSubjectBirthTime>
                  <ns3:livingSubjectId>
                     <ns3:value extension="1234" root="1.1.2.16.840.1.113883.3.198"/>
                     <ns3:semanticsText/>
                  </ns3:livingSubjectId>
                  <ns3:livingSubjectId>
                     <ns3:value extension="123456789" root="2.16.840.1.113883.4.1"/>
                     <ns3:semanticsText/>
                  </ns3:livingSubjectId>
                  <ns3:livingSubjectName>
                     <ns3:value>
                        <ns3:family partType="FAM">Smith</ns3:family>
                        <ns3:given partType="GIV">Joe</ns3:given>
                        <ns3:given partType="GIV">Middle</ns3:given>
                     </ns3:value>
                     <ns3:semanticsText/>
                  </ns3:livingSubjectName>
                  <ns3:patientAddress>
                     <ns3:value>
                        <ns3:city>Orlando</ns3:city>
                        <ns3:state>FL</ns3:state>
                        <ns3:postalCode>98765</ns3:postalCode>
                     </ns3:value>
                     <ns3:semanticsText/>
                  </ns3:patientAddress>
               </ns3:parameterList>
            </ns3:queryByParameter>
         </ns3:controlActProcess>
      </ns3:PRPA_IN201306UV02>
   </S:Body>
</S:Envelope>]]></con:responseContent><con:wsaConfig mustUnderstand="NONE" version="200508"/></con:response><con:assertion type="XPath Match" name="SingleMatchGivenName"><con:configuration><path>declare namespace ns3='urn:hl7-org:v3';
//ns3:Proxy_PRPA_IN201305UVProxyRequest[1]/ns3:PRPA_IN201305UV02[1]/ns3:controlActProcess[1]/ns3:queryByParameter[1]/ns3:parameterList[1]/ns3:livingSubjectName[1]/ns3:value[1]/ns3:given[1]</path><content>Joe</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:assertion type="XPath Match" name="SingleMatchFamilyName"><con:configuration><path>declare namespace ns3='urn:hl7-org:v3';
//ns3:Proxy_PRPA_IN201305UVProxyRequest[1]/ns3:PRPA_IN201305UV02[1]/ns3:controlActProcess[1]/ns3:queryByParameter[1]/ns3:parameterList[1]/ns3:livingSubjectName[1]/ns3:value[1]/ns3:family[1]</path><content>Smith</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:host/></con:config></con:testStep><con:testStep type="groovy" name="count correlations (1)"><con:settings/><con:config><script>
def patId = context.findProperty('PDSubjectID')
context.withSql('PatientCorrelationDB') { sql -> 
  assert 1 == sql.firstRow("select count(*) from " + context.findProperty('PatientCorrelationTable') + " where PatientId = '" + patId + "'")[0]
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Count AA Mapping (2)" disabled="true"><con:settings/><con:config><script>context.withSql('AAmappingDB') { sql -> 
  assert 2 == sql.firstRow("select count(*) from " + context.findProperty('AAmappingTable'))[0]
}
</script></con:config></con:testStep><con:properties><con:property><con:name>startDate</con:name><con:value>2010-07-06T00:00:00Z</con:value></con:property><con:property><con:name>endDate</con:name><con:value>2010-07-06T18:02:34Z</con:value></con:property><con:property><con:name>sigDate</con:name><con:value>07/06/2010 00:00:00</con:value></con:property><con:property><con:name>expireDate</con:name><con:value>2010-08-05T00:00:00Z</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PDMockPatientCorrelationTrustModeTest - Patch 227 and 220 unsecured" searchProperties="true" id="36afb051-770b-476e-a403-155b1588422b"><con:settings/><con:testStep type="properties" name="EntityPatientDiscovery Test Case Properties" disabled="true"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" createMissingOnLoad="true" discardValuesOnSave="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:source>C:/Projects/NHINC/Current/Product/SoapUI_Test/RegressionSuite/EntityPatientDiscovery.properties</con:source><con:target/><con:properties><con:property><con:name>LocalAA</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>LocalHCIDescription</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>LocalHCID</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PatientDiscoveryEndpoint</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDSubjectID</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDzipCode</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDRespondingAA</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDRespondingHCID</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDpurposeOfDisclosure</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDSSN</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDdOB</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDexpirationDate</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDuniquePatientId</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDstreetAddress</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDstate</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDCity</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDcountry</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDdateOfSignature</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDRespondingHCDesc</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDRespondingHCName</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDlivingSubjectAdministrativeGender</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDlivingSubjectBirthTime</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>LocalHCIDName</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDAssignAuthID</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>NHINGatewayConfigDir</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>NHINGatewayHost</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PEReceivingHCID</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>mockHost</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>SingleMatchPrefix</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>SingleMatchGivenName</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>SingleMatchFullName</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>SingleMatchFamilyName</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>SUT.PatientCorrelationHost</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>SUT.PatientCorrelationPort</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>SUT.PatientCorrelationDB</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>SUT.PatientCorrelationUser</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>SUT.PatientCorrelationPass</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>SUT.PatientCorrelationTable</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>NoMatchPrefix</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>NoMatchGivenName</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>NoMatchFullName</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>NoMatchFamilyName</con:name><con:value xsi:nil="true"/></con:property></con:properties></con:config></con:testStep><con:testStep type="transfer" name="EntityPatientDiscovery Property Transfer" disabled="true"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>PatientDiscoveryEndPoint</con:name><con:sourceType>PatientDiscoveryEndpoint</con:sourceType><con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep><con:targetType>Endpoint</con:targetType><con:targetStep>EntityPatientDiscoveryRequest</con:targetStep><con:targetPath/></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferChildNodes="false" useXQuery="false" ignoreEmpty="false" entitize="false" transferToAll="false"><con:name>LocalHCID</con:name><con:sourceType>LocalHCID</con:sourceType><con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep><con:targetType>Request</con:targetType><con:targetStep>EntityPatientDiscoveryRequest</con:targetStep><con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:sender[1]/urn:device[1]/urn:asAgent[1]/urn:representedOrganization[1]/urn:id[1]/@root</con:targetPath></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferChildNodes="false" transferToAll="false" ignoreEmpty="false" useXQuery="false" entitize="false"><con:name>ReceivingHCID</con:name><con:sourceType>PDRespondingHCID</con:sourceType><con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep><con:targetType>Request</con:targetType><con:targetStep>EntityPatientDiscoveryRequest</con:targetStep><con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:receiver[1]/urn:device[1]/urn:id[1]/@root</con:targetPath></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" transferToAll="false"><con:name>PDQueryRequestHCID</con:name><con:sourceType>LocalHCID</con:sourceType><con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep><con:targetType>Request</con:targetType><con:targetStep>EntityPatientDiscoveryRequest</con:targetStep><con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:sender[1]/urn:device[1]/urn:asAgent[1]/urn:representedOrganization[1]/urn:id[1]/@root</con:targetPath></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false"><con:name>PDQueryRequestSubjectGivenName</con:name><con:sourceType>SingleMatchGivenName</con:sourceType><con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep><con:targetType>Request</con:targetType><con:targetStep>EntityPatientDiscoveryRequest</con:targetStep><con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:controlActProcess[1]/urn:queryByParameter[1]/urn:parameterList[1]/urn:livingSubjectName[1]/urn:value[1]/urn:given[1]</con:targetPath></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" ignoreEmpty="false" transferToAll="false" useXQuery="false" transferChildNodes="false"><con:name>PDQueryRequestSubjectFamName</con:name><con:sourceType>SingleMatchFamilyName</con:sourceType><con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep><con:sourcePath xsi:nil="true"/><con:targetType>Request</con:targetType><con:targetStep>EntityPatientDiscoveryRequest</con:targetStep><con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:controlActProcess[1]/urn:queryByParameter[1]/urn:parameterList[1]/urn:livingSubjectName[1]/urn:value[1]/urn:family[1]</con:targetPath></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" transferToAll="false" ignoreEmpty="false" useXQuery="false" transferChildNodes="false"><con:name>PDQueryRequestSubjectBirthTime</con:name><con:sourceType>PDlivingSubjectBirthTime</con:sourceType><con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep><con:targetType>Request</con:targetType><con:targetStep>EntityPatientDiscoveryRequest</con:targetStep><con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:controlActProcess[1]/urn:queryByParameter[1]/urn:parameterList[1]/urn:livingSubjectBirthTime[1]/urn:value[1]/@value</con:targetPath></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" ignoreEmpty="false" transferToAll="false" useXQuery="false" transferChildNodes="false"><con:name>PDQueryRequestSubjectGender</con:name><con:sourceType>PDlivingSubjectAdministrativeGender</con:sourceType><con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep><con:sourcePath xsi:nil="true"/><con:targetType>Request</con:targetType><con:targetStep>EntityPatientDiscoveryRequest</con:targetStep><con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:controlActProcess[1]/urn:queryByParameter[1]/urn:parameterList[1]/urn:livingSubjectAdministrativeGender[1]/urn:value[1]/@code</con:targetPath></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferToAll="false" entitize="false" ignoreEmpty="false" useXQuery="false" transferChildNodes="false"><con:name>AssertionSSN</con:name><con:sourceType>PDSSN</con:sourceType><con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep><con:sourcePath xsi:nil="true"/><con:targetType>Request</con:targetType><con:targetStep>EntityPatientDiscoveryRequest</con:targetStep><con:targetPath>declare namespace urn1='urn:gov:hhs:fha:nhinc:common:nhinccommon';
declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:assertion[1]/urn1:SSN[1]</con:targetPath></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferToAll="false" entitize="false" ignoreEmpty="false" useXQuery="false" transferChildNodes="false"><con:name>AssertionUniquePatientID</con:name><con:sourceType>PDuniquePatientId</con:sourceType><con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep><con:sourcePath xsi:nil="true"/><con:targetType>Request</con:targetType><con:targetStep>EntityPatientDiscoveryRequest</con:targetStep><con:targetPath>declare namespace urn1='urn:gov:hhs:fha:nhinc:common:nhinccommon';
declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:assertion[1]/urn1:uniquePatientId[1]</con:targetPath></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>PDAssignAuthId</con:name><con:sourceType>PDAssignAuthID</con:sourceType><con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep><con:targetType>Request</con:targetType><con:targetStep>EntityPatientDiscoveryRequest</con:targetStep><con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:controlActProcess[1]/urn:authorOrPerformer[1]/urn:assignedDevice[1]/urn:id[1]/@root</con:targetPath></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>PDQueryReqSubjectAssignAuthID</con:name><con:sourceType>PDAssignAuthID</con:sourceType><con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep><con:targetType>Request</con:targetType><con:targetStep>EntityPatientDiscoveryRequest</con:targetStep><con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:controlActProcess[1]/urn:queryByParameter[1]/urn:parameterList[1]/urn:livingSubjectId[1]/urn:value[1]/@root</con:targetPath></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" useXQuery="false" transferChildNodes="false" transferToAll="false" ignoreEmpty="false"><con:name>PDQueryRequestSubjectID</con:name><con:sourceType>PDSubjectID</con:sourceType><con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep><con:targetType>Request</con:targetType><con:targetStep>EntityPatientDiscoveryRequest</con:targetStep><con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:controlActProcess[1]/urn:queryByParameter[1]/urn:parameterList[1]/urn:livingSubjectId[1]/urn:value[1]/@extension</con:targetPath></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferToAll="false" ignoreEmpty="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>AssertionHCID</con:name><con:sourceType>LocalHCID</con:sourceType><con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep><con:sourcePath xsi:nil="true"/><con:targetType>Request</con:targetType><con:targetStep>EntityPatientDiscoveryRequest</con:targetStep><con:targetPath>declare namespace urn1='urn:gov:hhs:fha:nhinc:common:nhinccommon';
declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:assertion[1]/urn1:homeCommunity[1]/urn1:homeCommunityId[1]</con:targetPath></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" transferToAll="false"><con:name>AssertionHCIDDesc</con:name><con:sourceType>LocalHCIDescription</con:sourceType><con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep><con:sourcePath xsi:nil="true"/><con:targetType>Request</con:targetType><con:targetStep>EntityPatientDiscoveryRequest</con:targetStep><con:targetPath>declare namespace urn1='urn:gov:hhs:fha:nhinc:common:nhinccommon';
declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:assertion[1]/urn1:homeCommunity[1]/urn1:description[1]</con:targetPath></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>AssertionHCIDname</con:name><con:sourceType>LocalHCIDName</con:sourceType><con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep><con:sourcePath xsi:nil="true"/><con:targetType>Request</con:targetType><con:targetStep>EntityPatientDiscoveryRequest</con:targetStep><con:targetPath>declare namespace urn1='urn:gov:hhs:fha:nhinc:common:nhinccommon';
declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:assertion[1]/urn1:homeCommunity[1]/urn1:name[1]</con:targetPath></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Intialize Configurations"><con:settings/><con:config><script>FileUtils.InitializeNHINCProperties(context, log);
</script></con:config></con:testStep><con:testStep type="groovy" name="Set Response Mode"><con:settings/><con:config><script>//def dataSource = testRunner.testCase.getTestStepByName( "EntityPatientDiscovery Test Case Properties" );
//def destDir = dataSource.getPropertyValue( "NHINGatewayConfigDir" );
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

def destConfigFileLocation = context.findProperty("NHINGatewayConfigDir");
FileUtils.UpdateProperty(destConfigFileLocation, 'gateway.properties', 'patientDiscoveryResponseMode', 'Verify',context,log)</script></con:config></con:testStep><con:testStep type="groovy" name="clear correlations table"><con:settings/><con:config><script>context.withSql('PatientCorrelationDB') { sql -> 
  sql.execute('delete from ' + context.findProperty('PatientCorrelationTable'))
}
</script></con:config></con:testStep><con:testStep type="groovy" name="ModifyInterrnalConnectionInfoForPC"><con:settings/><con:config><script>
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

//def destConfigFileLocation = context.findProperty("NHINGatewayConfigDir");
def destConfigFileLocation = System.env['NHINC_PROPERTIES_DIR'];
def NHINGatewayHost = context.findProperty("NHINGatewayHost");//**** Redbox (remove later)
//**** mockHost is localhost because Groovy script resides in local machine ****
def mockHost = context.findProperty("mockHost");
def mockPCURL = "http://" + mockHost + ":2345/MockPC";
def LocalHCID = context.findProperty( "LocalHCID" );

FileUtils.CreateOrUpdateConnection(destConfigFileLocation, LocalHCID, "patientcorrelation", mockPCURL, context, log)
</script></con:config></con:testStep><con:testStep type="request" name="EntityPatientDiscoveryRequest"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>EntityPatientDiscoveryBindingSoap</con:interface><con:operation>RespondingGateway_PRPA_IN201305UV02</con:operation><con:request name="EntityPatientDiscoveryRequest"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://localhost:8080/CONNECTGateway/EntityPatientDiscovery</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope" xmlns:urn="urn:hl7-org:v3" xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
   <soapenv:Header/>
   <soapenv:Body>
      <urn:RespondingGateway_PRPA_IN201305UV02Request>
         <urn:PRPA_IN201305UV02 ITSVersion="XML_1.0">
            <urn:id root="1.1" extension="-5a3e95b1:11d1fa33d45:-7f9b"/>
            <urn:creationTime value="20091116084800"/>
            <urn:interactionId root="2.16.840.1.113883.1.6" extension="PRPA_IN201305UV02"/>
            <urn:processingCode code="T"/>
            <urn:processingModeCode code="I"/>
            <urn:acceptAckCode code="AL"/>
            <urn:receiver typeCode="RCV">
               <urn:device classCode="DEV" determinerCode="INSTANCE">
                  <urn:id root="2.2"/>
                  <urn:asAgent classCode="AGNT">
                     <urn:representedOrganization classCode="ORG" determinerCode="INSTANCE">
                        <urn:id root="${#Project#PDRespondingHCID}"/>
                     </urn:representedOrganization>
                  </urn:asAgent>
               </urn:device>
            </urn:receiver>
            <urn:sender typeCode="SND">
               <urn:device classCode="DEV" determinerCode="INSTANCE">
                  <urn:id root="1.2.345.678.999"/>
                  <urn:asAgent classCode="AGNT">
                     <urn:representedOrganization classCode="ORG" determinerCode="INSTANCE">
                        <urn:id root="${#Project#LocalHCID}"/>
                     </urn:representedOrganization>
                  </urn:asAgent>
               </urn:device>
            </urn:sender>
            <urn:controlActProcess classCode="CACT" moodCode="EVN">
               <code code="PRPA_TE201305UV02" codeSystem="2.16.840.1.113883.1.6"/>
               <urn:authorOrPerformer typeCode="AUT">
                  <urn:assignedDevice>
                     <urn:id root="${#Project#PDAssignAuthID}"/>
                  </urn:assignedDevice>
               </urn:authorOrPerformer>
               <urn:queryByParameter>
                  <urn:queryId root="2.2" extension="-abd3453dcd24wkkks545"/>
                  <urn:statusCode code="new"/>
                  <urn:responseModalityCode code="R"/>
                  <urn:responsePriorityCode code="I"/>
                  <urn:parameterList>
                     <urn:livingSubjectAdministrativeGender>
                        <urn:value code="${#Project#PDChangedGender}"/>
                        <urn:semanticsText representation="TXT">LivingSubject.administrativeGender</urn:semanticsText>
                     </urn:livingSubjectAdministrativeGender>
                     <urn:livingSubjectBirthTime>
                        <urn:value value="${#Project#PDChangedDOB}" operator="I"/>
                        <urn:semanticsText representation="TXT">LivingSubject.birthTime</urn:semanticsText>
                     </urn:livingSubjectBirthTime>
                     <urn:livingSubjectName>
                        <urn:value>
                           <urn:family partType="FAM">${#Project#SingleMatchFamilyName}</urn:family>
                           <urn:given partType="GIV">${#Project#SingleMatchGivenName}</urn:given>
                        </urn:value>
                        <urn:semanticsText representation="TXT">LivingSubject.name</urn:semanticsText>
                     </urn:livingSubjectName>
                     <urn:livingSubjectId>
                        <urn:value extension="${#Project#PDChangedSSN}" root="2.16.840.1.113883.4.1"/>
                        <urn:semanticsText/>
                     </urn:livingSubjectId>
                     <urn:livingSubjectId>
                        <urn:value root="${#Project#PDAssignAuthID}" extension="${#Project#PDSubjectID}" assigningAuthorityName="?"/>
                        <urn:semanticsText representation="TXT"/>
                     </urn:livingSubjectId>
                  </urn:parameterList>
               </urn:queryByParameter>
            </urn:controlActProcess>
         </urn:PRPA_IN201305UV02>
         <urn:NhinTargetCommunities>
            <urn1:nhinTargetCommunity>
               <urn1:homeCommunity>
                  <urn1:description>desc</urn1:description>
                  <urn1:homeCommunityId>${#Project#PDRespondingHCID}</urn1:homeCommunityId>
                  <urn1:name>Name</urn1:name>
               </urn1:homeCommunity>
               <urn1:list>List</urn1:list>
               <urn1:region>Region</urn1:region>
            </urn1:nhinTargetCommunity>
         </urn:NhinTargetCommunities>
         <urn:assertion>
            <urn1:address>
               <urn1:addressType>
                  <urn1:code>W</urn1:code>
               </urn1:addressType>
               <urn1:city>Melbourne</urn1:city>
               <urn1:country>US</urn1:country>
               <urn1:state>FL</urn1:state>
               <urn1:streetAddress>123 Johnson Rd</urn1:streetAddress>
               <urn1:zipCode>12345</urn1:zipCode>
            </urn1:address>
            <urn1:dateOfBirth>19800516</urn1:dateOfBirth>
            <urn1:dateOfSignature>20080520</urn1:dateOfSignature>
            <urn1:expirationDate>20100520</urn1:expirationDate>
            <urn1:explanationNonClaimantSignature>NEEDED</urn1:explanationNonClaimantSignature>
            <urn1:haveSecondWitnessSignature>true</urn1:haveSecondWitnessSignature>
            <urn1:haveSignature>true</urn1:haveSignature>
            <urn1:haveWitnessSignature>true</urn1:haveWitnessSignature>
            <urn1:homeCommunity>
               <urn1:description>Test HCID1</urn1:description>
               <urn1:homeCommunityId>1.1</urn1:homeCommunityId>
               <urn1:name>HCID1</urn1:name>
            </urn1:homeCommunity>
            <urn1:personName>
               <urn1:familyName>Winslet</urn1:familyName>
               <urn1:givenName>Kate</urn1:givenName>
               <urn1:nameType>
                  <urn1:code>G</urn1:code>
               </urn1:nameType>
               <urn1:secondNameOrInitials>FJ</urn1:secondNameOrInitials>
               <urn1:fullName>Joe Smith</urn1:fullName>
               <urn1:prefix>Mr</urn1:prefix>
            </urn1:personName>
            <urn1:phoneNumber>
               <urn1:areaCode>123</urn1:areaCode>
               <urn1:countryCode>1</urn1:countryCode>
               <urn1:extension>1234</urn1:extension>
               <urn1:localNumber>3456789</urn1:localNumber>
               <urn1:phoneNumberType>
                  <urn1:code>W</urn1:code>
               </urn1:phoneNumberType>
            </urn1:phoneNumber>
            <urn1:purposeOfDisclosureCoded>
               <urn1:code>PUBLICHEALTH</urn1:code>
               <urn1:codeSystem>2.16.840.1.113883.3.18.7.1</urn1:codeSystem>
               <urn1:codeSystemName>nhin-purpose</urn1:codeSystemName>
               <urn1:codeSystemVersion>1.0</urn1:codeSystemVersion>
               <urn1:displayName>Use or disclosure of Psychotherapy Notes</urn1:displayName>
               <urn1:originalText>Use or disclosure of Psychotherapy Notes</urn1:originalText>
            </urn1:purposeOfDisclosureCoded>
            <urn1:secondWitnessAddress>
               <urn1:addressType>
                  <urn1:code>W</urn1:code>
               </urn1:addressType>
               <urn1:city>Melbourne</urn1:city>
               <urn1:country>US</urn1:country>
               <urn1:state>FL</urn1:state>
               <urn1:streetAddress>123 Johnson Rd</urn1:streetAddress>
               <urn1:zipCode>12345</urn1:zipCode>
            </urn1:secondWitnessAddress>
            <urn1:secondWitnessName>
               <urn1:familyName>Hughes</urn1:familyName>
               <urn1:givenName>Howie</urn1:givenName>
               <urn1:nameType>
                  <urn1:code>G</urn1:code>
               </urn1:nameType>
               <urn1:secondNameOrInitials>HH</urn1:secondNameOrInitials>
               <urn1:fullName>Howie Hughes</urn1:fullName>
               <urn1:prefix>Dr</urn1:prefix>
            </urn1:secondWitnessName>
            <urn1:secondWitnessPhone>
               <urn1:areaCode>123</urn1:areaCode>
               <urn1:countryCode>1</urn1:countryCode>
               <urn1:extension>1546</urn1:extension>
               <urn1:localNumber>4567892</urn1:localNumber>
               <urn1:phoneNumberType>
                  <urn1:code>W</urn1:code>
               </urn1:phoneNumberType>
            </urn1:secondWitnessPhone>
            <urn1:SSN>123456789</urn1:SSN>
            <!--1 or more repetitions:-->
            <urn1:uniquePatientId>1234^^^&amp;amp;1.1&amp;amp;ISO</urn1:uniquePatientId>
            <urn1:witnessAddress>
               <urn1:addressType>
                  <urn1:code>W</urn1:code>
               </urn1:addressType>
               <urn1:city>Frankfort</urn1:city>
               <urn1:country>US</urn1:country>
               <urn1:state>MN</urn1:state>
               <urn1:streetAddress>432 Jackson St</urn1:streetAddress>
               <urn1:zipCode>65498</urn1:zipCode>
            </urn1:witnessAddress>
            <urn1:witnessName>
               <urn1:familyName>Ugble</urn1:familyName>
               <urn1:givenName>Gary</urn1:givenName>
               <urn1:nameType>
                  <urn1:code>G</urn1:code>
               </urn1:nameType>
               <urn1:secondNameOrInitials>GU</urn1:secondNameOrInitials>
               <urn1:fullName>Gary Ugble</urn1:fullName>
               <urn1:prefix>Mr</urn1:prefix>
            </urn1:witnessName>
            <urn1:witnessPhone>
               <urn1:areaCode>987</urn1:areaCode>
               <urn1:countryCode>1</urn1:countryCode>
               <urn1:extension>6549</urn1:extension>
               <urn1:localNumber>2222222</urn1:localNumber>
               <urn1:phoneNumberType>
                  <urn1:code>H</urn1:code>
               </urn1:phoneNumberType>
            </urn1:witnessPhone>
            <urn1:userInfo>
               <urn1:personName>
                  <urn1:familyName>Anderson</urn1:familyName>
                  <urn1:givenName>Wilma</urn1:givenName>
                  <urn1:nameType>
                     <urn1:code>G</urn1:code>
                  </urn1:nameType>
                  <urn1:secondNameOrInitials>WA</urn1:secondNameOrInitials>
                  <urn1:fullName>Wilma Anderson</urn1:fullName>
                  <urn1:prefix>Mrs</urn1:prefix>
               </urn1:personName>
               <urn1:userName>wanderson</urn1:userName>
               <urn1:role>nuse</urn1:role>
               <urn1:org>
                  <urn1:description>Test HCID1</urn1:description>
                  <urn1:homeCommunityId>1.1</urn1:homeCommunityId>
                  <urn1:name>HCID1</urn1:name>
               </urn1:org>
               <!--Optional:-->
               <urn1:roleCoded>
                  <urn1:code>Code</urn1:code>
                  <urn1:codeSystem>CodeSystem</urn1:codeSystem>
                  <urn1:codeSystemName>CodeSystemName</urn1:codeSystemName>
                  <urn1:codeSystemVersion>codeSystemVersion</urn1:codeSystemVersion>
                  <urn1:displayName>displayName</urn1:displayName>
                  <urn1:originalText>originalText</urn1:originalText>
                  <!--Zero or more repetitions:-->
                  <urn1:translation/>
               </urn1:roleCoded>
            </urn1:userInfo>
            <urn1:authorized>authorized</urn1:authorized>
            <!--Optional:-->
            <urn1:claimFormRef>claimFormRef</urn1:claimFormRef>
            <!--Optional:-->
            <urn1:claimFormRaw>cid:610957193055</urn1:claimFormRaw>
            <!--Optional:-->
            <urn1:samlAuthnStatement>
               <!--Optional:-->
               <urn1:authInstant>authInstant</urn1:authInstant>
               <!--Optional:-->
               <urn1:sessionIndex>sessionIndex</urn1:sessionIndex>
               <!--Optional:-->
               <urn1:authContextClassRef>authContextClassRef</urn1:authContextClassRef>
               <!--Optional:-->
               <urn1:subjectLocalityAddress>subjectLocalityAddress</urn1:subjectLocalityAddress>
               <!--Optional:-->
               <urn1:subjectLocalityDNSName>subjectLocalityDNSName</urn1:subjectLocalityDNSName>
            </urn1:samlAuthnStatement>
            <!--Optional:-->
            <urn1:samlAuthzDecisionStatement>
               <!--Optional:-->
               <urn1:decision>decision</urn1:decision>
               <!--Optional:-->
               <urn1:resource>resource</urn1:resource>
               <!--Optional:-->
               <urn1:action>action</urn1:action>
               <!--Optional:-->
               <urn1:evidence>
                  <!--Optional:-->
                  <urn1:assertion>
                     <!--Optional:-->
                     <urn1:id>5555</urn1:id>
                     <!--Optional:-->
                     <urn1:issueInstant>issueInstant</urn1:issueInstant>
                     <!--Optional:-->
                     <urn1:version>version</urn1:version>
                     <!--Optional:-->
                     <urn1:issuer>issuer</urn1:issuer>
                     <!--Optional:-->
                     <urn1:issuerFormat>issuerFormat</urn1:issuerFormat>
                     <!--Optional:-->
                     <urn1:conditions>
                        <!--Optional:-->
                        <urn1:notBefore>notBefore</urn1:notBefore>
                        <!--Optional:-->
                        <urn1:notOnOrAfter>notOnOrAfter</urn1:notOnOrAfter>
                     </urn1:conditions>
                     <!--Optional:-->
                     <urn1:contentReference>contentReference</urn1:contentReference>
                     <!--Optional:-->
                     <urn1:contentType>contentType</urn1:contentType>
                     <!--Optional:-->
                     <urn1:content>cid:574777349023</urn1:content>
                  </urn1:assertion>
               </urn1:evidence>
            </urn1:samlAuthzDecisionStatement>
            <!--Optional:-->
            <urn1:samlSignature>
               <!--Optional:-->
               <urn1:keyInfo>
                  <!--Optional:-->
                  <urn1:rsaKeyValueModulus>cid:1157111506023</urn1:rsaKeyValueModulus>
                  <!--Optional:-->
                  <urn1:rsaKeyValueExponent>cid:136268302631</urn1:rsaKeyValueExponent>
               </urn1:keyInfo>
               <!--Optional:-->
               <urn1:signatureValue>cid:880867232879</urn1:signatureValue>
            </urn1:samlSignature>
         </urn:assertion>
      </urn:RespondingGateway_PRPA_IN201305UV02Request>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="Schema Compliance" disabled="true"><con:configuration/></con:assertion><con:assertion type="SOAP Fault Assertion"/><con:assertion type="XPath Match"><con:configuration/></con:assertion><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="mockresponse" name="PatientCorrelationMock"><con:settings/><con:config xsi:type="con:MockResponseStep" startStep="EntityPatientDiscoveryRequest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>PatientCorrelationBinding</con:interface><con:operation>AddPatientCorrelation</con:operation><con:path>/MockPC</con:path><con:port>2345</con:port><con:timeout>30000</con:timeout><con:response><con:settings/><con:responseContent><![CDATA[<S:Envelope xmlns:S="http://www.w3.org/2003/05/soap-envelope">
   <S:Body>
      <ns3:AddPatientCorrelationResponse xmlns="http://schemas.xmlsoap.org/ws/2004/08/addressing" xmlns:ns2="urn:gov:hhs:fha:nhinc:common:nhinccommon" xmlns:ns3="urn:hl7-org:v3" xmlns:ns4="urn:gov:hhs:fha:nhinc:common:patientcorrelationfacade">
         <ns3:MCCI_IN000002UV01 ITSVersion="XML_1.0">
            <ns3:id extension="-14ee051a:1295fd1287d:-7ec9" root="1.1"/>
            <ns3:creationTime value="201006173122010"/>
            <ns3:interactionId extension="MCCI_IN000002UV01" root="2.16.840.1.113883.1.6"/>
            <ns3:processingCode code="P"/>
            <ns3:processingModeCode code="R"/>
            <ns3:acceptAckCode code="NE"/>
            <ns3:receiver typeCode="RCV">
               <ns3:device determinerCode="INSTANCE" classCode="">
                  <ns3:id root="1.2.345.678.999"/>
               </ns3:device>
            </ns3:receiver>
            <ns3:sender typeCode="SND">
               <ns3:device determinerCode="INSTANCE" classCode="">
                  <ns3:id root="1.1"/>
               </ns3:device>
            </ns3:sender>
            <ns3:acknowledgement>
               <ns3:typeCode code="CA"/>
               <ns3:targetMessage>
                  <ns3:id extension="-14ee051a:1295fd1287d:-7eca" root="1.1.1"/>
               </ns3:targetMessage>
            </ns3:acknowledgement>
         </ns3:MCCI_IN000002UV01>
      </ns3:AddPatientCorrelationResponse>
   </S:Body>
</S:Envelope>]]></con:responseContent><con:wsaConfig mustUnderstand="NONE" version="200508"/></con:response><con:assertion type="GroovyScriptAssertion" name="ValidateGender"><con:configuration><scriptText>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

def FieldName='administrativeGenderCode';

def AssertionXpath='//ec:RespondingGateway_PRPA_IN201305UV02Request[1]/ec:PRPA_IN201305UV02[1]/ec:controlActProcess[1]/ec:queryByParameter[1]/ec:parameterList[1]/ec:livingSubjectAdministrativeGender[1]/ec:value[1]/@code'

def requestTestStep = context.getTestRunner().testCase.getTestStepByName("EntityPatientDiscoveryRequest");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:hl7-org:v3';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

//def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
//log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
//assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
if (AssertionValue[0..2] == '${#') AssertionValue = context.expand(AssertionValue);
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['ec'] = 'urn:hl7-org:v3';

def MockReqAssertionXpath= '//ec:AddPatientCorrelationRequest[1]/ec:PRPA_IN201301UV02[1]/ec:controlActProcess[1]/ec:subject[1]/ec:registrationEvent[1]/ec:subject1[1]/ec:patient[1]/ec:patientPerson[1]/ec:administrativeGenderCode[1]/@code';
def MockReqSubjectAttributeCount = mockRequestHolder["count(" + MockReqAssertionXpath + ")"];

log.info('MockReqSubjectAttributeCount(' + FieldName + ')='+MockReqSubjectAttributeCount);
assert(MockReqSubjectAttributeCount=="1");

def MockReqSubjectAttributeValue = mockRequestHolder[MockReqAssertionXpath];
log.info('MockReqSubjectAttributeValue(' + FieldName + ')=' + MockReqSubjectAttributeValue);

log.info('MockReqSubjectAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==MockReqSubjectAttributeValue));
assert (AssertionValue==MockReqSubjectAttributeValue);

log.debug('Finished checking ' + FieldName);</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="ValidateDOB"><con:configuration><scriptText>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

def FieldName='birthTime';

def AssertionXpath='//ec:RespondingGateway_PRPA_IN201305UV02Request[1]/ec:PRPA_IN201305UV02[1]/ec:controlActProcess[1]/ec:queryByParameter[1]/ec:parameterList[1]/ec:livingSubjectBirthTime[1]/ec:value[1]/@value'

def requestTestStep = context.getTestRunner().testCase.getTestStepByName("EntityPatientDiscoveryRequest");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:hl7-org:v3';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionValue = sourceRequestHolder[AssertionXpath];
if (AssertionValue[0..2] == '${#') AssertionValue = context.expand(AssertionValue);
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['ec'] = 'urn:hl7-org:v3';

def MockReqAssertionXpath= '//ec:AddPatientCorrelationRequest[1]/ec:PRPA_IN201301UV02[1]/ec:controlActProcess[1]/ec:subject[1]/ec:registrationEvent[1]/ec:subject1[1]/ec:patient[1]/ec:patientPerson[1]/ec:birthTime[1]/@value';
def MockReqSubjectAttributeCount = mockRequestHolder["count(" + MockReqAssertionXpath + ")"];

log.info('MockReqSubjectAttributeCount(' + FieldName + ')='+MockReqSubjectAttributeCount);
assert(MockReqSubjectAttributeCount=="1");

def MockReqSubjectAttributeValue = mockRequestHolder[MockReqAssertionXpath];
log.info('MockReqSubjectAttributeValue(' + FieldName + ')=' + MockReqSubjectAttributeValue);

log.info('MockReqSubjectAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==MockReqSubjectAttributeValue));
assert (AssertionValue==MockReqSubjectAttributeValue);

log.debug('Finished checking ' + FieldName);</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="ValidateSSN"><con:configuration><scriptText>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

def FieldName='asOtherIDs';

def AssertionXpath='//ec:RespondingGateway_PRPA_IN201305UV02Request[1]/ec:PRPA_IN201305UV02[1]/ec:controlActProcess[1]/ec:queryByParameter[1]/ec:parameterList[1]/ec:livingSubjectId[1]/ec:value[1]/@extension'

def requestTestStep = context.getTestRunner().testCase.getTestStepByName("EntityPatientDiscoveryRequest");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:hl7-org:v3';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionValue = sourceRequestHolder[AssertionXpath];
if (AssertionValue[0..2] == '${#') AssertionValue = context.expand(AssertionValue);
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['ec'] = 'urn:hl7-org:v3';

def MockReqAssertionXpath= 
'//ec:AddPatientCorrelationRequest[1]/ec:PRPA_IN201301UV02[1]/ec:controlActProcess[1]/ec:subject[1]/ec:registrationEvent[1]/ec:subject1[1]/ec:patient[1]/ec:patientPerson[1]/ec:asOtherIDs[1]/ec:id[1]/@extension';
def MockReqSubjectAttributeCount = mockRequestHolder["count(" + MockReqAssertionXpath + ")"];

log.info('MockReqSubjectAttributeCount(' + FieldName + ')='+MockReqSubjectAttributeCount);
assert(MockReqSubjectAttributeCount=="1");

def MockReqSubjectAttributeValue = mockRequestHolder[MockReqAssertionXpath];
log.info('MockReqSubjectAttributeValue(' + FieldName + ')=' + MockReqSubjectAttributeValue);

log.info('MockReqSubjectAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==MockReqSubjectAttributeValue));
assert (AssertionValue==MockReqSubjectAttributeValue);

log.debug('Finished checking ' + FieldName);</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="ResourceID"><con:configuration><scriptText>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

def FieldName='asOtherIDs';

def AssertionXpath='//ec:RespondingGateway_PRPA_IN201305UV02Request[1]/ec:PRPA_IN201305UV02[1]/ec:controlActProcess[1]/ec:queryByParameter[1]/ec:parameterList[1]/ec:livingSubjectId[2]/ec:value[1]/@extension'
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("EntityPatientDiscoveryRequest");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:hl7-org:v3';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionValue = sourceRequestHolder[AssertionXpath];
if (AssertionValue[0..2] == '${#') AssertionValue = context.expand(AssertionValue);
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['ec'] = 'urn:hl7-org:v3';

def MockReqAssertionXpath= 
'//ec:AddPatientCorrelationRequest[1]/ec:PRPA_IN201301UV02[1]/ec:controlActProcess[1]/ec:subject[1]/ec:registrationEvent[1]/ec:subject1[1]/ec:patient[1]/ec:id[1]/@extension';

def MockReqSubjectAttributeCount = mockRequestHolder["count(" + MockReqAssertionXpath + ")"];

log.info('MockReqSubjectAttributeCount(' + FieldName + ')='+MockReqSubjectAttributeCount);
assert(MockReqSubjectAttributeCount=="1");

def MockReqSubjectAttributeValue = mockRequestHolder[MockReqAssertionXpath];
log.info('MockReqSubjectAttributeValue(' + FieldName + ')=' + MockReqSubjectAttributeValue);

log.info('MockReqSubjectAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==MockReqSubjectAttributeValue));
assert (AssertionValue==MockReqSubjectAttributeValue);

log.debug('Finished checking ' + FieldName);</scriptText></con:configuration></con:assertion><con:host/></con:config></con:testStep><con:properties><con:property><con:name>startDate</con:name><con:value>2010-07-06T00:00:00Z</con:value></con:property><con:property><con:name>endDate</con:name><con:value>2010-07-06T18:03:02Z</con:value></con:property><con:property><con:name>sigDate</con:name><con:value>07/06/2010 00:00:00</con:value></con:property><con:property><con:name>expireDate</con:name><con:value>2010-08-05T00:00:00Z</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PatientDiscoveryNoSubjectIDTrustMode - Patch 209" searchProperties="true" id="bdf86bea-8a56-48f7-8f87-a782396f7223"><con:settings/><con:testStep type="properties" name="EntityPatientDiscovery Test Case Properties" disabled="true"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" createMissingOnLoad="true" discardValuesOnSave="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:source>C:/Projects/NHINC/Current/Product/SoapUI_Test/RegressionSuite/EntityPatientDiscovery.properties</con:source><con:target/><con:properties><con:property><con:name>LocalAA</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>LocalHCIDescription</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>LocalHCID</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PatientDiscoveryEndpoint</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDSubjectID</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDzipCode</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDRespondingAA</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDRespondingHCID</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDpurposeOfDisclosure</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDSSN</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDdOB</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDexpirationDate</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDuniquePatientId</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDstreetAddress</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDstate</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDCity</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDcountry</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDdateOfSignature</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDRespondingHCDesc</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDRespondingHCName</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDlivingSubjectAdministrativeGender</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDlivingSubjectBirthTime</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>LocalHCIDName</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDAssignAuthID</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>NHINGatewayConfigDir</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>NHINGatewayHost</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PEReceivingHCID</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>mockHost</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>SingleMatchPrefix</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>SingleMatchGivenName</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>SingleMatchFullName</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>SingleMatchFamilyName</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>SUT.PatientCorrelationHost</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>SUT.PatientCorrelationPort</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>SUT.PatientCorrelationDB</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>SUT.PatientCorrelationUser</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>SUT.PatientCorrelationPass</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>SUT.PatientCorrelationTable</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>NoMatchPrefix</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>NoMatchGivenName</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>NoMatchFullName</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>NoMatchFamilyName</con:name><con:value xsi:nil="true"/></con:property></con:properties></con:config></con:testStep><con:testStep type="transfer" name="EntityPatientDiscovery Property Transfer" disabled="true"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>PatientDiscoveryEndPoint</con:name><con:sourceType>PatientDiscoveryEndpoint</con:sourceType><con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep><con:targetType>Endpoint</con:targetType><con:targetStep>EntityPatientDiscoveryRequest</con:targetStep><con:targetPath/></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferChildNodes="false" useXQuery="false" ignoreEmpty="false" entitize="false" transferToAll="false"><con:name>LocalHCID</con:name><con:sourceType>LocalHCID</con:sourceType><con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep><con:targetType>Request</con:targetType><con:targetStep>EntityPatientDiscoveryRequest</con:targetStep><con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:sender[1]/urn:device[1]/urn:asAgent[1]/urn:representedOrganization[1]/urn:id[1]/@root</con:targetPath></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferChildNodes="false" transferToAll="false" ignoreEmpty="false" useXQuery="false" entitize="false"><con:name>ReceivingHCID</con:name><con:sourceType>PDRespondingHCID</con:sourceType><con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep><con:targetType>Request</con:targetType><con:targetStep>EntityPatientDiscoveryRequest</con:targetStep><con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:receiver[1]/urn:device[1]/urn:id[1]/@root</con:targetPath></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" transferToAll="false"><con:name>PDQueryRequestHCID</con:name><con:sourceType>LocalHCID</con:sourceType><con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep><con:targetType>Request</con:targetType><con:targetStep>EntityPatientDiscoveryRequest</con:targetStep><con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:sender[1]/urn:device[1]/urn:asAgent[1]/urn:representedOrganization[1]/urn:id[1]/@root</con:targetPath></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false"><con:name>PDQueryRequestSubjectGivenName</con:name><con:sourceType>SingleMatchGivenName</con:sourceType><con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep><con:targetType>Request</con:targetType><con:targetStep>EntityPatientDiscoveryRequest</con:targetStep><con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:controlActProcess[1]/urn:queryByParameter[1]/urn:parameterList[1]/urn:livingSubjectName[1]/urn:value[1]/urn:given[1]</con:targetPath></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" ignoreEmpty="false" transferToAll="false" useXQuery="false" transferChildNodes="false"><con:name>PDQueryRequestSubjectFamName</con:name><con:sourceType>SingleMatchFamilyName</con:sourceType><con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep><con:sourcePath xsi:nil="true"/><con:targetType>Request</con:targetType><con:targetStep>EntityPatientDiscoveryRequest</con:targetStep><con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:controlActProcess[1]/urn:queryByParameter[1]/urn:parameterList[1]/urn:livingSubjectName[1]/urn:value[1]/urn:family[1]</con:targetPath></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" transferToAll="false" ignoreEmpty="false" useXQuery="false" transferChildNodes="false"><con:name>PDQueryRequestSubjectBirthTime</con:name><con:sourceType>PDlivingSubjectBirthTime</con:sourceType><con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep><con:targetType>Request</con:targetType><con:targetStep>EntityPatientDiscoveryRequest</con:targetStep><con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:controlActProcess[1]/urn:queryByParameter[1]/urn:parameterList[1]/urn:livingSubjectBirthTime[1]/urn:value[1]/@value</con:targetPath></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" ignoreEmpty="false" transferToAll="false" useXQuery="false" transferChildNodes="false"><con:name>PDQueryRequestSubjectGender</con:name><con:sourceType>PDlivingSubjectAdministrativeGender</con:sourceType><con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep><con:sourcePath xsi:nil="true"/><con:targetType>Request</con:targetType><con:targetStep>EntityPatientDiscoveryRequest</con:targetStep><con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:controlActProcess[1]/urn:queryByParameter[1]/urn:parameterList[1]/urn:livingSubjectAdministrativeGender[1]/urn:value[1]/@code</con:targetPath></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferToAll="false" entitize="false" ignoreEmpty="false" useXQuery="false" transferChildNodes="false"><con:name>AssertionSSN</con:name><con:sourceType>PDSSN</con:sourceType><con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep><con:sourcePath xsi:nil="true"/><con:targetType>Request</con:targetType><con:targetStep>EntityPatientDiscoveryRequest</con:targetStep><con:targetPath>declare namespace urn1='urn:gov:hhs:fha:nhinc:common:nhinccommon';
declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:assertion[1]/urn1:SSN[1]</con:targetPath></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferToAll="false" entitize="false" ignoreEmpty="false" useXQuery="false" transferChildNodes="false"><con:name>AssertionUniquePatientID</con:name><con:sourceType>PDuniquePatientId</con:sourceType><con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep><con:sourcePath xsi:nil="true"/><con:targetType>Request</con:targetType><con:targetStep>EntityPatientDiscoveryRequest</con:targetStep><con:targetPath>declare namespace urn1='urn:gov:hhs:fha:nhinc:common:nhinccommon';
declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:assertion[1]/urn1:uniquePatientId[1]</con:targetPath></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>PDAssignAuthId</con:name><con:sourceType>PDAssignAuthID</con:sourceType><con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep><con:targetType>Request</con:targetType><con:targetStep>EntityPatientDiscoveryRequest</con:targetStep><con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:controlActProcess[1]/urn:authorOrPerformer[1]/urn:assignedDevice[1]/urn:id[1]/@root</con:targetPath></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>PDQueryReqSubjectAssignAuthID</con:name><con:sourceType>PDAssignAuthID</con:sourceType><con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep><con:targetType>Request</con:targetType><con:targetStep>EntityPatientDiscoveryRequest</con:targetStep><con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:controlActProcess[1]/urn:queryByParameter[1]/urn:parameterList[1]/urn:livingSubjectId[1]/urn:value[1]/@root</con:targetPath></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" useXQuery="false" transferChildNodes="false" transferToAll="false" ignoreEmpty="false"><con:name>PDQueryRequestSubjectID</con:name><con:sourceType>PDSubjectID</con:sourceType><con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep><con:targetType>Request</con:targetType><con:targetStep>EntityPatientDiscoveryRequest</con:targetStep><con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:controlActProcess[1]/urn:queryByParameter[1]/urn:parameterList[1]/urn:livingSubjectId[1]/urn:value[1]/@extension</con:targetPath></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferToAll="false" ignoreEmpty="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>AssertionHCID</con:name><con:sourceType>LocalHCID</con:sourceType><con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep><con:sourcePath xsi:nil="true"/><con:targetType>Request</con:targetType><con:targetStep>EntityPatientDiscoveryRequest</con:targetStep><con:targetPath>declare namespace urn1='urn:gov:hhs:fha:nhinc:common:nhinccommon';
declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:assertion[1]/urn1:homeCommunity[1]/urn1:homeCommunityId[1]</con:targetPath></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" transferToAll="false"><con:name>AssertionHCIDDesc</con:name><con:sourceType>LocalHCIDescription</con:sourceType><con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep><con:sourcePath xsi:nil="true"/><con:targetType>Request</con:targetType><con:targetStep>EntityPatientDiscoveryRequest</con:targetStep><con:targetPath>declare namespace urn1='urn:gov:hhs:fha:nhinc:common:nhinccommon';
declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:assertion[1]/urn1:homeCommunity[1]/urn1:description[1]</con:targetPath></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>AssertionHCIDname</con:name><con:sourceType>LocalHCIDName</con:sourceType><con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep><con:sourcePath xsi:nil="true"/><con:targetType>Request</con:targetType><con:targetStep>EntityPatientDiscoveryRequest</con:targetStep><con:targetPath>declare namespace urn1='urn:gov:hhs:fha:nhinc:common:nhinccommon';
declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:assertion[1]/urn1:homeCommunity[1]/urn1:name[1]</con:targetPath></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Intialize Configurations"><con:settings/><con:config><script>FileUtils.InitializeNHINCProperties(context, log);
</script></con:config></con:testStep><con:testStep type="groovy" name="Set Response Mode"><con:settings/><con:config><script>//def dataSource = testRunner.testCase.getTestStepByName( "EntityPatientDiscovery Test Case Properties" );
//def destDir = dataSource.getPropertyValue( "NHINGatewayConfigDir" );
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

def destConfigFileLocation = context.findProperty("NHINGatewayConfigDir");
FileUtils.UpdateProperty(destConfigFileLocation, 'gateway.properties', 'patientDiscoveryResponseMode', 'Trust',context,log)</script></con:config></con:testStep><con:testStep type="groovy" name="clear correlations table"><con:settings/><con:config><script>context.withSql('PatientCorrelationDB') { sql -> 
  sql.execute('delete from ' + context.findProperty('PatientCorrelationTable'))
}
</script></con:config></con:testStep><con:testStep type="groovy" name="clear AA Mapping table"><con:settings/><con:config><script>context.withSql('AAmappingDB') { sql -> 
  sql.execute('delete from ' + context.findProperty('AAmappingTable'))
}
</script></con:config></con:testStep><con:testStep type="groovy" name="ModifyInterrnalConnectionInfoForPE"><con:settings/><con:config><script>
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

//def destConfigFileLocation = context.findProperty("NHINGatewayConfigDir");
def destConfigFileLocation = System.env['NHINC_PROPERTIES_DIR'];
def NHINGatewayHost = context.findProperty("NHINGatewayHost");
def mockHost = context.findProperty("mockHost");
def mockPEURL = "http://" + mockHost + ":2200/mockPE";
def LocalHCID = context.findProperty( "LocalHCID" );

FileUtils.CreateOrUpdateConnection(destConfigFileLocation, LocalHCID, "policyengineservice", mockPEURL, context, log)</script></con:config></con:testStep><con:testStep type="groovy" name="ModifyInternalConnectionInfoUsingTestHelper" disabled="true"><con:settings/><con:config><script>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );
def destConfigFileLocation = System.env['NHINC_PROPERTIES_DIR'];
def NHINGatewayHost = context.findProperty("NHINGatewayHost");//**** Redbox (remove later)

def mockHost = context.findProperty("mockHost");
def patientdiscoveryURL = "https://" + NHINGatewayHost + ":8181/CONNECTGatewayTest/NhinPatientDiscoveryTestHelper";
def mockPatientDiscoveryURL = "http://" + mockHost + ":2222/EntityPatientDiscoveryMockResponse";
def LocalHCID = context.findProperty( "LocalHCID" );
def RemoteHCID = context.findProperty("PDRespondingHCID");

FileUtils.CreateOrUpdateConnection(destConfigFileLocation, RemoteHCID, "PatientDiscovery", patientdiscoveryURL, context, log)
FileUtils.CreateOrUpdateConnection(destConfigFileLocation, RemoteHCID, "mockpatientdiscovery", mockPatientDiscoveryURL, context, log)</script></con:config></con:testStep><con:testStep type="request" name="EntityPatientDiscoveryRequest"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>EntityPatientDiscoveryBindingSoap</con:interface><con:operation>RespondingGateway_PRPA_IN201305UV02</con:operation><con:request name="EntityPatientDiscoveryRequest"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://localhost:8080/CONNECTGateway/EntityPatientDiscovery</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope" xmlns:urn="urn:hl7-org:v3" xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
   <soapenv:Header/>
   <soapenv:Body>
      <urn:RespondingGateway_PRPA_IN201305UV02Request>
         <urn:PRPA_IN201305UV02 ITSVersion="XML_1.0">
            <urn:id root="1.1" extension="-5a3e95b1:11d1fa33d45:-7f9b"/>
            <urn:creationTime value="20091116084800"/>
            <urn:interactionId root="2.16.840.1.113883.1.6" extension="PRPA_IN201305UV02"/>
            <urn:processingCode code="T"/>
            <urn:processingModeCode code="I"/>
            <urn:acceptAckCode code="AL"/>
            <urn:receiver typeCode="RCV">
               <urn:device classCode="DEV" determinerCode="INSTANCE">
                  <urn:id root="${#Project#PDRespondingHCID}"/>
                  <urn:asAgent classCode="AGNT">
                     <urn:representedOrganization classCode="ORG" determinerCode="INSTANCE">
                        <urn:id root="${#Project#PDRespondingHCID}"/>
                     </urn:representedOrganization>
                  </urn:asAgent>
               </urn:device>
            </urn:receiver>
            <urn:sender typeCode="SND">
               <urn:device classCode="DEV" determinerCode="INSTANCE">
                  <urn:id root="1.2.345.678.999"/>
                  <urn:asAgent classCode="AGNT">
                     <urn:representedOrganization classCode="ORG" determinerCode="INSTANCE">
                        <urn:id root="${#Project#LocalHCID}"/>
                     </urn:representedOrganization>
                  </urn:asAgent>
               </urn:device>
            </urn:sender>
            <urn:controlActProcess classCode="CACT" moodCode="EVN">
               <code code="PRPA_TE201305UV02" codeSystem="2.16.840.1.113883.1.6"/>
               <urn:authorOrPerformer typeCode="AUT">
                  <urn:assignedDevice>
                     <urn:id root="${#Project#PDAssignAuthID}"/>
                  </urn:assignedDevice>
               </urn:authorOrPerformer>
               <urn:queryByParameter>
                  <urn:queryId root="2.2" extension="-abd3453dcd24wkkks545"/>
                  <urn:statusCode code="new"/>
                  <urn:responseModalityCode code="R"/>
                  <urn:responsePriorityCode code="I"/>
                  <urn:parameterList>
                     <urn:livingSubjectAdministrativeGender>
                        <urn:value code="${#Project#PDlivingSubjectAdministrativeGender}"/>
                        <urn:semanticsText representation="TXT">LivingSubject.administrativeGender</urn:semanticsText>
                     </urn:livingSubjectAdministrativeGender>
                     <urn:livingSubjectBirthTime>
                        <urn:value value="${#Project#PDlivingSubjectBirthTime}" operator="I"/>
                        <urn:semanticsText representation="TXT">LivingSubject.birthTime</urn:semanticsText>
                     </urn:livingSubjectBirthTime>
                     <urn:livingSubjectName>
                        <urn:value>
                           <urn:family partType="FAM">${#Project#SingleMatchFamilyName}</urn:family>
                           <urn:given partType="GIV">${#Project#SingleMatchGivenName}</urn:given>
                           <urn:given partType="GIV">${#Project#SingleMatchMiddleName}</urn:given>
                        </urn:value>
                        <urn:semanticsText representation="TXT">LivingSubject.name</urn:semanticsText>
                     </urn:livingSubjectName>
                     <urn:livingSubjectId>
                        <urn:value extension="123456789" root="2.16.840.1.113883.4.1"/>
                        <urn:semanticsText/>
                     </urn:livingSubjectId>
                  </urn:parameterList>
               </urn:queryByParameter>
            </urn:controlActProcess>
         </urn:PRPA_IN201305UV02>
         <urn:NhinTargetCommunities>
            <urn1:nhinTargetCommunity>
               <urn1:homeCommunity>
                  <urn1:description>desc</urn1:description>
                  <urn1:homeCommunityId>${#Project#PDRespondingHCID}</urn1:homeCommunityId>
                  <urn1:name>Name</urn1:name>
               </urn1:homeCommunity>
               <urn1:list>List</urn1:list>
               <urn1:region>Region</urn1:region>
            </urn1:nhinTargetCommunity>
         </urn:NhinTargetCommunities>
         <urn:assertion>
            <urn1:address>
               <urn1:addressType>
                  <urn1:code>W</urn1:code>
               </urn1:addressType>
               <urn1:city>Melbourne</urn1:city>
               <urn1:country>US</urn1:country>
               <urn1:state>FL</urn1:state>
               <urn1:streetAddress>123 Johnson Rd</urn1:streetAddress>
               <urn1:zipCode>12345</urn1:zipCode>
            </urn1:address>
            <urn1:dateOfBirth>19800516</urn1:dateOfBirth>
            <urn1:dateOfSignature>20080520</urn1:dateOfSignature>
            <urn1:expirationDate>20100520</urn1:expirationDate>
            <urn1:explanationNonClaimantSignature>NEEDED</urn1:explanationNonClaimantSignature>
            <urn1:haveSecondWitnessSignature>true</urn1:haveSecondWitnessSignature>
            <urn1:haveSignature>true</urn1:haveSignature>
            <urn1:haveWitnessSignature>true</urn1:haveWitnessSignature>
            <urn1:homeCommunity>
               <urn1:description>Test HCID1</urn1:description>
               <urn1:homeCommunityId>1.1</urn1:homeCommunityId>
               <urn1:name>HCID1</urn1:name>
            </urn1:homeCommunity>
            <urn1:personName>
               <urn1:familyName>Winslet</urn1:familyName>
               <urn1:givenName>Kate</urn1:givenName>
               <urn1:nameType>
                  <urn1:code>G</urn1:code>
               </urn1:nameType>
               <urn1:secondNameOrInitials>FJ</urn1:secondNameOrInitials>
               <urn1:fullName>Joe Smith</urn1:fullName>
               <urn1:prefix>Mr</urn1:prefix>
            </urn1:personName>
            <urn1:phoneNumber>
               <urn1:areaCode>123</urn1:areaCode>
               <urn1:countryCode>1</urn1:countryCode>
               <urn1:extension>1234</urn1:extension>
               <urn1:localNumber>3456789</urn1:localNumber>
               <urn1:phoneNumberType>
                  <urn1:code>W</urn1:code>
               </urn1:phoneNumberType>
            </urn1:phoneNumber>
            <urn1:purposeOfDisclosureCoded>
               <urn1:code>PUBLICHEALTH</urn1:code>
               <urn1:codeSystem>2.16.840.1.113883.3.18.7.1</urn1:codeSystem>
               <urn1:codeSystemName>nhin-purpose</urn1:codeSystemName>
               <urn1:codeSystemVersion>1.0</urn1:codeSystemVersion>
               <urn1:displayName>Use or disclosure of Psychotherapy Notes</urn1:displayName>
               <urn1:originalText>Use or disclosure of Psychotherapy Notes</urn1:originalText>
            </urn1:purposeOfDisclosureCoded>
            <urn1:secondWitnessAddress>
               <urn1:addressType>
                  <urn1:code>W</urn1:code>
               </urn1:addressType>
               <urn1:city>Melbourne</urn1:city>
               <urn1:country>US</urn1:country>
               <urn1:state>FL</urn1:state>
               <urn1:streetAddress>123 Johnson Rd</urn1:streetAddress>
               <urn1:zipCode>12345</urn1:zipCode>
            </urn1:secondWitnessAddress>
            <urn1:secondWitnessName>
               <urn1:familyName>Hughes</urn1:familyName>
               <urn1:givenName>Howie</urn1:givenName>
               <urn1:nameType>
                  <urn1:code>G</urn1:code>
               </urn1:nameType>
               <urn1:secondNameOrInitials>HH</urn1:secondNameOrInitials>
               <urn1:fullName>Howie Hughes</urn1:fullName>
               <urn1:prefix>Dr</urn1:prefix>
            </urn1:secondWitnessName>
            <urn1:secondWitnessPhone>
               <urn1:areaCode>123</urn1:areaCode>
               <urn1:countryCode>1</urn1:countryCode>
               <urn1:extension>1546</urn1:extension>
               <urn1:localNumber>4567892</urn1:localNumber>
               <urn1:phoneNumberType>
                  <urn1:code>W</urn1:code>
               </urn1:phoneNumberType>
            </urn1:secondWitnessPhone>
            <urn1:SSN>123456789</urn1:SSN>
            <!--1 or more repetitions:-->
            <urn1:uniquePatientId>1234^^^&amp;amp;1.1&amp;amp;ISO</urn1:uniquePatientId>
            <urn1:witnessAddress>
               <urn1:addressType>
                  <urn1:code>W</urn1:code>
               </urn1:addressType>
               <urn1:city>Frankfort</urn1:city>
               <urn1:country>US</urn1:country>
               <urn1:state>MN</urn1:state>
               <urn1:streetAddress>432 Jackson St</urn1:streetAddress>
               <urn1:zipCode>65498</urn1:zipCode>
            </urn1:witnessAddress>
            <urn1:witnessName>
               <urn1:familyName>Ugble</urn1:familyName>
               <urn1:givenName>Gary</urn1:givenName>
               <urn1:nameType>
                  <urn1:code>G</urn1:code>
               </urn1:nameType>
               <urn1:secondNameOrInitials>GU</urn1:secondNameOrInitials>
               <urn1:fullName>Gary Ugble</urn1:fullName>
               <urn1:prefix>Mr</urn1:prefix>
            </urn1:witnessName>
            <urn1:witnessPhone>
               <urn1:areaCode>987</urn1:areaCode>
               <urn1:countryCode>1</urn1:countryCode>
               <urn1:extension>6549</urn1:extension>
               <urn1:localNumber>2222222</urn1:localNumber>
               <urn1:phoneNumberType>
                  <urn1:code>H</urn1:code>
               </urn1:phoneNumberType>
            </urn1:witnessPhone>
            <urn1:userInfo>
               <urn1:personName>
                  <urn1:familyName>Anderson</urn1:familyName>
                  <urn1:givenName>Wilma</urn1:givenName>
                  <urn1:nameType>
                     <urn1:code>G</urn1:code>
                  </urn1:nameType>
                  <urn1:secondNameOrInitials>WA</urn1:secondNameOrInitials>
                  <urn1:fullName>Wilma Anderson</urn1:fullName>
                  <urn1:prefix>Mrs</urn1:prefix>
               </urn1:personName>
               <urn1:userName>wanderson</urn1:userName>
               <urn1:role>nuse</urn1:role>
               <urn1:org>
                  <urn1:description>Test HCID1</urn1:description>
                  <urn1:homeCommunityId>1.1</urn1:homeCommunityId>
                  <urn1:name>HCID1</urn1:name>
               </urn1:org>
               <!--Optional:-->
               <urn1:roleCoded>
                  <urn1:code>Code</urn1:code>
                  <urn1:codeSystem>CodeSystem</urn1:codeSystem>
                  <urn1:codeSystemName>CodeSystemName</urn1:codeSystemName>
                  <urn1:codeSystemVersion>codeSystemVersion</urn1:codeSystemVersion>
                  <urn1:displayName>displayName</urn1:displayName>
                  <urn1:originalText>originalText</urn1:originalText>
                  <!--Zero or more repetitions:-->
                  <urn1:translation/>
               </urn1:roleCoded>
            </urn1:userInfo>
            <urn1:authorized>authorized</urn1:authorized>
            <!--Optional:-->
            <urn1:claimFormRef>claimFormRef</urn1:claimFormRef>
            <!--Optional:-->
            <urn1:claimFormRaw>cid:610957193055</urn1:claimFormRaw>
            <!--Optional:-->
            <urn1:samlAuthnStatement>
               <!--Optional:-->
               <urn1:authInstant>authInstant</urn1:authInstant>
               <!--Optional:-->
               <urn1:sessionIndex>sessionIndex</urn1:sessionIndex>
               <!--Optional:-->
               <urn1:authContextClassRef>authContextClassRef</urn1:authContextClassRef>
               <!--Optional:-->
               <urn1:subjectLocalityAddress>subjectLocalityAddress</urn1:subjectLocalityAddress>
               <!--Optional:-->
               <urn1:subjectLocalityDNSName>subjectLocalityDNSName</urn1:subjectLocalityDNSName>
            </urn1:samlAuthnStatement>
            <!--Optional:-->
            <urn1:samlAuthzDecisionStatement>
               <!--Optional:-->
               <urn1:decision>decision</urn1:decision>
               <!--Optional:-->
               <urn1:resource>resource</urn1:resource>
               <!--Optional:-->
               <urn1:action>action</urn1:action>
               <!--Optional:-->
               <urn1:evidence>
                  <!--Optional:-->
                  <urn1:assertion>
                     <!--Optional:-->
                     <urn1:id>5555</urn1:id>
                     <!--Optional:-->
                     <urn1:issueInstant>issueInstant</urn1:issueInstant>
                     <!--Optional:-->
                     <urn1:version>version</urn1:version>
                     <!--Optional:-->
                     <urn1:issuer>issuer</urn1:issuer>
                     <!--Optional:-->
                     <urn1:issuerFormat>issuerFormat</urn1:issuerFormat>
                     <!--Optional:-->
                     <urn1:conditions>
                        <!--Optional:-->
                        <urn1:notBefore>notBefore</urn1:notBefore>
                        <!--Optional:-->
                        <urn1:notOnOrAfter>notOnOrAfter</urn1:notOnOrAfter>
                     </urn1:conditions>
                     <!--Optional:-->
                     <urn1:contentReference>contentReference</urn1:contentReference>
                     <!--Optional:-->
                     <urn1:contentType>contentType</urn1:contentType>
                     <!--Optional:-->
                     <urn1:content>cid:574777349023</urn1:content>
                  </urn1:assertion>
               </urn1:evidence>
            </urn1:samlAuthzDecisionStatement>
            <!--Optional:-->
            <urn1:samlSignature>
               <!--Optional:-->
               <urn1:keyInfo>
                  <!--Optional:-->
                  <urn1:rsaKeyValueModulus>cid:1157111506023</urn1:rsaKeyValueModulus>
                  <!--Optional:-->
                  <urn1:rsaKeyValueExponent>cid:136268302631</urn1:rsaKeyValueExponent>
               </urn1:keyInfo>
               <!--Optional:-->
               <urn1:signatureValue>cid:880867232879</urn1:signatureValue>
            </urn1:samlSignature>
         </urn:assertion>
      </urn:RespondingGateway_PRPA_IN201305UV02Request>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="Schema Compliance" disabled="true"><con:configuration/></con:assertion><con:assertion type="SOAP Fault Assertion"/><con:assertion type="XPath Match"><con:configuration/></con:assertion><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="mockresponse" name="NHINCProxyPatientDiscoveryMockResponse" disabled="true"><con:settings/><con:config xsi:type="con:MockResponseStep" startStep="EntityPatientDiscoveryRequest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>NhincProxyPatientDiscoveryBinding</con:interface><con:operation>Proxy_PRPA_IN201305UV</con:operation><con:path>/EntityPatientDiscoveryMockResponse</con:path><con:port>2222</con:port><con:timeout>40000</con:timeout><con:response><con:settings/><con:responseContent><![CDATA[<S:Envelope xmlns:S="http://www.w3.org/2003/05/soap-envelope">
   <S:Body>
      <ns3:PRPA_IN201306UV02 ITSVersion="XML_1.0" xmlns="http://schemas.xmlsoap.org/ws/2004/08/addressing" xmlns:ns2="urn:gov:hhs:fha:nhinc:common:nhinccommon" xmlns:ns3="urn:hl7-org:v3" xmlns:ns4="urn:gov:hhs:fha:nhinc:common:patientcorrelationfacade">
         <ns3:id extension="4191797c:1259356875e:-7c2d" root="1.1.1"/>
         <ns3:creationTime value="2009121522276"/>
         <ns3:interactionId extension="PRPA_IN201306UV" root="2.16.840.1.113883.1.6"/>
         <ns3:processingCode code="P"/>
         <ns3:processingModeCode code="R"/>
         <ns3:acceptAckCode code="AL"/>
         <ns3:receiver typeCode="RCV">
            <ns3:device determinerCode="INSTANCE" classCode="">
               <ns3:id root="1.2.345.678.999"/>
               <ns3:asAgent classCode="AGNT">
                  <ns3:representedOrganization determinerCode="INSTANCE" classCode="ORG">
                     <ns3:id/>
                  </ns3:representedOrganization>
               </ns3:asAgent>
            </ns3:device>
         </ns3:receiver>
         <ns3:sender typeCode="SND">
            <ns3:device determinerCode="INSTANCE" classCode="">
               <ns3:id root="1.2.345.678.999"/>
               <ns3:asAgent classCode="AGNT">
                  <ns3:representedOrganization determinerCode="INSTANCE" classCode="ORG">
                     <ns3:id/>
                  </ns3:representedOrganization>
               </ns3:asAgent>
            </ns3:device>
         </ns3:sender>
         <ns3:acknowledgement>
            <ns3:typeId extension="PRPA_IN201305UV02" root="2.16.840.1.113883.1.6"/>
            <ns3:typeCode code="AA"/>
            <ns3:targetMessage xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
         </ns3:acknowledgement>
         <ns3:controlActProcess moodCode="EVN" classCode="">
            <ns3:code codeSystem="2.16.840.1.113883.1.6" code="PRPA_TE201306UV"/>
            <ns3:subject typeCode="SUBJ">
               <ns3:registrationEvent moodCode="" classCode="">
                  <ns3:id nullFlavor="NA"/>
                  <ns3:statusCode code="active"/>
                  <ns3:subject1 typeCode="">
                     <ns3:patient classCode="PAT">
                        <ns3:id extension="1234" root="2.2.2"/>
                        <ns3:statusCode code="SD"/>
                        <ns3:patientPerson>
                           <ns3:name>
                              <ns3:family partType="FAM">Smith</ns3:family>
                              <ns3:given partType="GIV">Joe</ns3:given>
                           </ns3:name>
                           <ns3:administrativeGenderCode code="M"/>
                           <ns3:birthTime value="19560301"/>
                           <ns3:addr>
                              <ns3:city>Orlando</ns3:city>
                              <ns3:state>FL</ns3:state>
                              <ns3:postalCode>98765</ns3:postalCode>
                           </ns3:addr>
                        </ns3:patientPerson>
                        <ns3:providerOrganization determinerCode="" classCode="">
                           <ns3:id root="2.2.2"/>
                           <ns3:contactParty xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
                        </ns3:providerOrganization>
                        <ns3:subjectOf1>
                           <ns3:queryMatchObservation moodCode="" classCode="">
                              <ns3:code code="IHE_PDQ"/>
                              <ns3:value xsi:type="ns3:INT" value="100" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
                           </ns3:queryMatchObservation>
                        </ns3:subjectOf1>
                     </ns3:patient>
                  </ns3:subject1>
                  <ns3:custodian typeCode="">
                     <ns3:assignedEntity classCode="">
                        <ns3:id root="2.2.2"/>
                     </ns3:assignedEntity>
                  </ns3:custodian>
               </ns3:registrationEvent>
            </ns3:subject>
            <ns3:queryAck>
               <ns3:queryId extension="-abd3453dcd24wkkks545" root="1.1"/>
               <ns3:queryResponseCode code="OK"/>
               <ns3:resultTotalQuantity value="1"/>
               <ns3:resultCurrentQuantity value="1"/>
               <ns3:resultRemainingQuantity value="0"/>
            </ns3:queryAck>
            <ns3:queryByParameter xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
         </ns3:controlActProcess>
      </ns3:PRPA_IN201306UV02>
   </S:Body>
</S:Envelope>]]></con:responseContent><con:wsaConfig mustUnderstand="NONE" version="200508"/></con:response><con:assertion type="XPath Match" name="SingleMatchGivenName"><con:configuration><path>declare namespace ns3='urn:hl7-org:v3';
//ns3:Proxy_PRPA_IN201305UVProxyRequest[1]/ns3:PRPA_IN201305UV02[1]/ns3:controlActProcess[1]/ns3:queryByParameter[1]/ns3:parameterList[1]/ns3:livingSubjectName[1]/ns3:value[1]/ns3:given[1]</path><content>Joe</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:assertion type="XPath Match" name="SingleMatchFamilyName"><con:configuration><path>declare namespace ns3='urn:hl7-org:v3';
//ns3:Proxy_PRPA_IN201305UVProxyRequest[1]/ns3:PRPA_IN201305UV02[1]/ns3:controlActProcess[1]/ns3:queryByParameter[1]/ns3:parameterList[1]/ns3:livingSubjectName[1]/ns3:value[1]/ns3:family[1]</path><content>Smith</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:host/></con:config></con:testStep><con:testStep type="mockresponse" name="Policy Engine Mock">
				<con:settings/>
				<con:config xsi:type="con:MockResponseStep" startStep="EntityPatientDiscoveryRequest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:interface>AdapterPolicyEngineBindingSoap</con:interface>
					<con:operation>CheckPolicy</con:operation>
					<con:path>/mockPE</con:path>
					<con:port>2200</con:port>
					<con:timeout>30000</con:timeout>
					<con:response>
						<con:settings/>
						<con:responseContent><![CDATA[<S:Envelope xmlns:S="http://www.w3.org/2003/05/soap-envelope">
   <S:Body>
      <ns15:CheckPolicyResponse xmlns:ns2="urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0" xmlns:ns3="urn:oasis:names:tc:ebxml-regrep:xsd:rs:3.0" xmlns:ns4="urn:oasis:names:tc:ebxml-regrep:xsd:lcm:3.0" xmlns:ns5="urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0" xmlns:ns6="http://www.hhs.gov/healthit/nhin/cdc" xmlns:ns7="http://nhinc.services.com/schema/auditmessage" xmlns:ns8="http://www.w3.org/2005/08/addressing" xmlns:ns9="http://docs.oasis-open.org/wsn/b-2" xmlns:ns10="urn:ihe:iti:xds-b:2007" xmlns:ns11="urn:gov:hhs:fha:nhinc:common:subscriptionb2overridefordocuments" xmlns:ns12="http://docs.oasis-open.org/wsrf/bf-2" xmlns:ns13="http://docs.oasis-open.org/wsn/t-1" xmlns:ns14="urn:oasis:names:tc:xacml:2.0:policy:schema:os" xmlns:ns15="urn:gov:hhs:fha:nhinc:common:nhinccommonadapter" xmlns:ns16="urn:gov:hhs:fha:nhinc:common:nhinccommon" xmlns:ns17="urn:gov:hhs:fha:nhinc:common:subscriptionb2overrideforcdc" xmlns:ns18="urn:oasis:names:tc:xacml:2.0:context:schema:os" xmlns:ns19="http://schemas.xmlsoap.org/ws/2004/08/addressing">
         <ns15:response>
            <ns18:Result>
               <ns18:Decision>Permit</ns18:Decision>
            </ns18:Result>
         </ns15:response>
      </ns15:CheckPolicyResponse>
   </S:Body>
</S:Envelope>]]></con:responseContent>
						<con:wsaConfig mustUnderstand="NONE" version="200508"/>
					</con:response>
					<con:assertion type="GroovyScriptAssertion" name="AuthnStatementAuthnInstant ">
						<con:configuration><scriptText>def FieldName='authInstant';
def AssertionXpath='//ec:assertion/nc:samlAuthnStatement/nc:authInstant'
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authn-statement:auth-instant';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
</scriptText></con:configuration>
					</con:assertion>
					<con:assertion type="GroovyScriptAssertion" name="AuthnStatementSessionIndex">
						<con:configuration><scriptText>def FieldName='sessionIndex';
def AssertionXpath='//ec:assertion/nc:samlAuthnStatement/nc:sessionIndex';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authn-statement:session-index';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
</scriptText></con:configuration>
					</con:assertion>
					<con:assertion type="GroovyScriptAssertion" name="AuthnStatementAthnContextClassRef ">
						<con:configuration><scriptText>def FieldName='authContextClassRef';
def AssertionXpath='//ec:assertion/nc:samlAuthnStatement/nc:authContextClassRef';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authn-statement:auth-context-class-ref';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
</scriptText></con:configuration>
					</con:assertion>
					<con:assertion type="GroovyScriptAssertion" name="AuthnStatementSubjectLocalityAddress ">
						<con:configuration><scriptText>def FieldName='subjectLocalityAddress';
def AssertionXpath='//ec:assertion/nc:samlAuthnStatement/nc:subjectLocalityAddress';
def XacmlAttributeId='urn:oasis:names:tc:xacml:1.0:subject:authn-locality:ip-address';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
</scriptText></con:configuration>
					</con:assertion>
					<con:assertion type="GroovyScriptAssertion" name="AuthnStatementDNSName ">
						<con:configuration><scriptText>def FieldName='subjectLocalityDNSName';
def AssertionXpath='//ec:assertion/nc:samlAuthnStatement/nc:subjectLocalityDNSName';
def XacmlAttributeId='urn:oasis:names:tc:xacml:1.0:subject:authn-locality:dns-name';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
</scriptText></con:configuration>
					</con:assertion>
					<con:assertion type="GroovyScriptAssertion" name="UserPersonName">
						<con:configuration><scriptText>def FieldName='personname';
def AssertionXpath='//ec:assertion/nc:userInfo/nc:userName';
def XacmlAttributeId='urn:oasis:names:tc:xacml:1.0:subject:subject-id';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
</scriptText></con:configuration>
					</con:assertion>
					<con:assertion type="GroovyScriptAssertion" name="UserOrganizationName">
						<con:configuration><scriptText>def FieldName='user organization';
def AssertionXpath='//ec:assertion/nc:userInfo/nc:org/nc:name';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:user-organization-name';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
</scriptText></con:configuration>
					</con:assertion>
					<con:assertion type="GroovyScriptAssertion" name="UserRoleCode">
						<con:configuration><scriptText>def FieldName='user role coded';
def AssertionXpath='//ec:assertion/nc:userInfo/nc:roleCoded/nc:code';
//def XacmlAttributeId='urn:gov:hhs:fha:nhinc:user-role-code';
def XacmlAttributeId='urn:oasis:names:tc:xacml:2.0:subject:role';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
</scriptText></con:configuration>
					</con:assertion>
					<con:assertion type="GroovyScriptAssertion" name="UserRoleCodeSystem ">
						<con:configuration><scriptText>def FieldName='user role system';
def AssertionXpath='//ec:assertion/nc:userInfo/nc:roleCoded/nc:codeSystem';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:user-role-code-system';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
</scriptText></con:configuration>
					</con:assertion>
					<con:assertion type="GroovyScriptAssertion" name="UserRoleCodeSystemName ">
						<con:configuration><scriptText>def FieldName='user role system name';
def AssertionXpath='//ec:assertion/nc:userInfo/nc:roleCoded/nc:codeSystemName';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:user-role-code-system-name';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
</scriptText></con:configuration>
					</con:assertion>
					<con:assertion type="GroovyScriptAssertion" name="UserRoleCodeDiplayName ">
						<con:configuration><scriptText>def FieldName='user role display name';
def AssertionXpath='//ec:assertion/nc:userInfo/nc:roleCoded/nc:displayName';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:user-role-description';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
</scriptText></con:configuration>
					</con:assertion>
					<con:assertion type="GroovyScriptAssertion" name="PurposeForUseCode">
						<con:configuration><scriptText>def FieldName='PurposeForUseCode';
def AssertionXpath='//ec:assertion/nc:purposeOfDisclosureCoded/nc:code';
//def XacmlAttributeId='urn:gov:hhs:fha:nhinc:purpose-of-use-code';
def XacmlAttributeId='urn:oasis:names:tc:xspa:1.0:subject:purposeofuse';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
</scriptText></con:configuration>
					</con:assertion>
					<con:assertion type="GroovyScriptAssertion" name="PurposeForUseCodeSystem">
						<con:configuration><scriptText>def FieldName='PurposeForUseCodeSystem';
def AssertionXpath='//ec:assertion/nc:purposeOfDisclosureCoded/nc:codeSystem';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:purpose-of-use-code-system';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
</scriptText></con:configuration>
					</con:assertion>
					<con:assertion type="GroovyScriptAssertion" name="PurposeForUseCodeSystemName">
						<con:configuration><scriptText>def FieldName='PurposeForUseCodeSystemName';
def AssertionXpath='//ec:assertion/nc:purposeOfDisclosureCoded/nc:codeSystemName';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:purpose-of-use-code-system-name';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
</scriptText></con:configuration>
					</con:assertion>
					<con:assertion type="GroovyScriptAssertion" name="PurposeForUseCodeDisplayName">
						<con:configuration><scriptText>def FieldName='PurposeForUseCodeDisplayName';
def AssertionXpath='//ec:assertion/nc:purposeOfDisclosureCoded/nc:displayName';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:purpose-of-use-display-name';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
</scriptText></con:configuration>
					</con:assertion>
					<con:assertion type="GroovyScriptAssertion" name="AuthzDecisionStatementDecision">
						<con:configuration><scriptText>def FieldName='AuthzDecisionStatementDecision';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:decision';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-decision';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
</scriptText></con:configuration>
					</con:assertion>
					<con:assertion type="GroovyScriptAssertion" name="AuthzDecisionStatementResource">
						<con:configuration><scriptText>def FieldName='AuthzDecisionStatementResource';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:resource';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-resource';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
</scriptText></con:configuration>
					</con:assertion>
					<con:assertion type="GroovyScriptAssertion" name="AuthzDecisionStatementAction">
						<con:configuration><scriptText>def FieldName='AuthzDecisionStatementAction';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:action';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-action';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
//log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);
def ExpectedValue='action';
//log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (ExpectedValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
</scriptText></con:configuration>
					</con:assertion>
					<con:assertion type="GroovyScriptAssertion" name="AuthzDecisionStatementEvidenceAssertionID ">
						<con:configuration><scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionID';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:id';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-id';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
</scriptText></con:configuration>
					</con:assertion>
					<con:assertion type="GroovyScriptAssertion" name="AuthzDecisionStatementEvidenceAssertionIssueInstant">
						<con:configuration><scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionIssueInstant';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:issueInstant';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-issue-instant';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
</scriptText></con:configuration>
					</con:assertion>
					<con:assertion type="GroovyScriptAssertion" name="AuthzDecisionStatementEvidenceAssertionVersion">
						<con:configuration><scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionVersion';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:version';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-version';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
</scriptText></con:configuration>
					</con:assertion>
					<con:assertion type="GroovyScriptAssertion" name="AuthzDecisionStatementEvidenceAssertionIssuer">
						<con:configuration><scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionIssuer';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:issuer';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-issuer';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
</scriptText></con:configuration>
					</con:assertion>
					<con:assertion type="GroovyScriptAssertion" name="AuthzDecisionStatementEvidenceAssertionConditionsNotBefore" disabled="true">
						<con:configuration><scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionConditionsNotBefore';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:conditions/nc:notBefore';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-not-before';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
//assert (AssertionValue==XacmlValue);
assert (XacmlValue == '2001-01-01T06:00:00.000Z')

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#date';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
</scriptText></con:configuration>
					</con:assertion>
					<con:assertion type="GroovyScriptAssertion" name="AuthzDecisionStatementEvidenceAssertionConditionsNotOnOrAfter " disabled="true">
						<con:configuration><scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionConditionsNotOnOrAfter';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:conditions/nc:notOnOrAfter';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-not-on-or-after';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
//assert (AssertionValue==XacmlValue);
assert (XacmlValue == '2009-05-07T02:00:17.000Z')

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#date';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
</scriptText></con:configuration>
					</con:assertion>
					<con:assertion type="GroovyScriptAssertion" name="AuthzDecisionStatementEvidenceAssertionContentReference " disabled="true">
						<con:configuration><scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionContentReference';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:contentReference';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-content-reference';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
</scriptText></con:configuration>
					</con:assertion>
					<con:assertion type="GroovyScriptAssertion" name="AuthzDecisionStatementEvidenceAssertionContentType " disabled="true">
						<con:configuration><scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionContentType';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:contentType';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-content-type';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
</scriptText></con:configuration>
					</con:assertion>
					<con:assertion type="GroovyScriptAssertion" name="AuthzDecisionStatementEvidenceAssertionContent " disabled="true">
						<con:configuration><scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionContent';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:content';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-content';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
</scriptText></con:configuration>
					</con:assertion>
				<con:assertion type="GroovyScriptAssertion" name="HomeCommunityId" disabled="true"><con:configuration><scriptText>def FieldName='home-community-id';
def AssertionXpath='//ec:RespondingGateway_PRPA_IN201305UV02Request[1]/ec:PRPA_IN201305UV02[1]/ec:receiver[1]/ec:device[1]/ec:id[1]/@root';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:home-community-id';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("EntityPatientDiscoveryRequest");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:hl7-org:v3';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
if (AssertionValue[0..2] == '${#') AssertionValue = context.expand(AssertionValue);
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def MockXPath = "//xacml:Resource/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']";

def XacmlAttributeCount = mockRequestHolder["count(" + MockXPath + ")"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Resource/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Resource/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="OrganizationId"><con:configuration><scriptText>def FieldName='organizationid';
def AssertionXpath='//ec:assertion/nc:userInfo/nc:org/nc:homeCommunityId';
def XacmlAttributeId='urn:oasis:names:tc:xspa:1.0:subject:organization-id';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#anyURI';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="PatientId" disabled="true"><con:configuration><scriptText>def FieldName='PatientId';
def XacmlAttributeId='http://www.hhs.gov/healthit/nhin#subject-id';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';
mockRequestHolder.namespaces['hl7'] = 'urn:hl7-org:v3';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Resource/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValueExtension = mockRequestHolder["//xacml:Resource/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue/hl7:PatientId/@extension"]
def ExpectedExtension = '1234';
log.info('XacmlAttributeValue(' + FieldName + '@extension)=' + XacmlValueExtension);
//log.info('XacmlAttributeValue(' + FieldName + '@extension) == ' + 'AssertionValue(' + FieldName + '@extension) => ' + (AssertionValue==XacmlValueExtension));
assert(XacmlValueExtension==ExpectedExtension);

def XacmlValueRoot = mockRequestHolder["//xacml:Resource/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue/hl7:PatientId/@root"]
def ExpectedRoot = '2.2.2';
log.info('XacmlAttributeValue(' + FieldName + '@root)=' + XacmlValueRoot);
//log.info('XacmlAttributeValue(' + FieldName + '@extension) == ' + 'AssertionValue(' + FieldName + '@extension) => ' + (AssertionValue==XacmlValueExtension));
assert(XacmlValueRoot==ExpectedRoot);

def ActualDataType = mockRequestHolder["//xacml:Resource/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'urn:hl7-org:v3#II';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="AuthzDecisionStatementEvidenceAssertionAccessConsent" disabled="true"><con:configuration><scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionAccessConsent';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:accessConsentPolicy';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-access-consent';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#anyURI';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="AuthzDecisionStatementEvidenceAssertionInstanceAccessConsent" disabled="true"><con:configuration><scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionInstanceAccessConsent';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:instanceAccessConsentPolicy';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-instance-access-consent';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#anyURI';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" disabled="true"><con:configuration><path>declare namespace ns19='urn:oasis:names:tc:xacml:2.0:context:schema:os';
declare namespace ns18='urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
//ns18:CheckPolicyRequest[1]/ns18:request[1]/ns19:Subject[2]/ns19:Attribute[1]/@AttributeId</path><content>urn:gov:hhs:fha:nhinc:home-community-id</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:assertion type="XPath Match" name="local patient id"><con:configuration><path>declare namespace ns14='urn:oasis:names:tc:xacml:2.0:context:schema:os';
declare namespace hl7='urn:hl7-org:v3';
declare namespace ns19='urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
//ns19:CheckPolicyRequest[1]/ns19:request[1]/ns14:Resource[1]/ns14:Attribute[1]/ns14:AttributeValue[1]/hl7:PatientId[1]/@extension</path><content>1234</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="ResourceID" disabled="true"><con:configuration><scriptText>def FieldName='resource:resource-id';
def AssertionXpath='//ec:RespondingGateway_PRPA_IN201305UV02Request[1]/ec:PRPA_IN201305UV02[1]/ec:controlActProcess[1]/ec:queryByParameter[1]/ec:parameterList[1]/ec:livingSubjectId[2]/ec:value[1]/@extension';
				
def XacmlAttributeId='urn:oasis:names:tc:xacml:1.0:resource:resource-id';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("EntityPatientDiscoveryRequest");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:hl7-org:v3';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
if (AssertionValue[0..2] == '${#') AssertionValue = context.expand(AssertionValue);
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Resource/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Resource/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Resource/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="AssigningAuthority" disabled="true"><con:configuration><scriptText>def FieldName='assigning-authority-id';
//def AssertionXpath='//ec:RespondingGateway_PRPA_IN201305UV02Request[1]/ec:PRPA_IN201305UV02[1]/ec:controlActProcess[1]/ec:authorOrPerformer[1]/ec:assignedDevice[1]/ec:id[1]/@root';
def AssertionXpath='//ec:RespondingGateway_PRPA_IN201305UV02Request[1]/ec:PRPA_IN201305UV02[1]/ec:controlActProcess[1]/ec:queryByParameter[1]/ec:parameterList[1]/ec:livingSubjectId[2]/ec:value[1]/@root';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:assigning-authority-id';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("EntityPatientDiscoveryRequest");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:hl7-org:v3';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
if (AssertionValue[0..2] == '${#') AssertionValue = context.expand(AssertionValue);

log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Resource/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Resource/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Resource/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText></con:configuration></con:assertion></con:config>
			</con:testStep><con:testStep type="groovy" name="count correlations (0)"><con:settings/><con:config><script>
def patId = context.findProperty('PDSubjectID')
context.withSql('PatientCorrelationDB') { sql -> 
  assert 0 == sql.firstRow("select count(*) from " + context.findProperty('PatientCorrelationTable') + " where PatientId = '" + patId + "'")[0]
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Count AA Mapping (2)"><con:settings/><con:config><script>context.withSql('AAmappingDB') { sql -> 
  assert 2 == sql.firstRow("select count(*) from " + context.findProperty('AAmappingTable'))[0]
}
</script></con:config></con:testStep><con:properties><con:property><con:name>startDate</con:name><con:value>2010-07-06T00:00:00Z</con:value></con:property><con:property><con:name>endDate</con:name><con:value>2010-07-06T18:03:09Z</con:value></con:property><con:property><con:name>sigDate</con:name><con:value>07/06/2010 00:00:00</con:value></con:property><con:property><con:name>expireDate</con:name><con:value>2010-08-05T00:00:00Z</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PatientDiscoveryNoSubjectIDVerifyMode - Patch 209" searchProperties="true" id="692d9273-71e4-4f46-9735-f6105fc3ff3e"><con:settings/><con:testStep type="properties" name="EntityPatientDiscovery Test Case Properties" disabled="true"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" createMissingOnLoad="true" discardValuesOnSave="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:source>C:/Projects/NHINC/Current/Product/SoapUI_Test/RegressionSuite/EntityPatientDiscovery.properties</con:source><con:target/><con:properties><con:property><con:name>LocalAA</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>LocalHCIDescription</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>LocalHCID</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PatientDiscoveryEndpoint</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDSubjectID</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDzipCode</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDRespondingAA</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDRespondingHCID</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDpurposeOfDisclosure</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDSSN</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDdOB</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDexpirationDate</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDuniquePatientId</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDstreetAddress</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDstate</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDCity</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDcountry</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDdateOfSignature</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDRespondingHCDesc</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDRespondingHCName</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDlivingSubjectAdministrativeGender</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDlivingSubjectBirthTime</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>LocalHCIDName</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDAssignAuthID</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>NHINGatewayConfigDir</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>NHINGatewayHost</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PEReceivingHCID</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>mockHost</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>SingleMatchPrefix</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>SingleMatchGivenName</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>SingleMatchFullName</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>SingleMatchFamilyName</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>SUT.PatientCorrelationHost</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>SUT.PatientCorrelationPort</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>SUT.PatientCorrelationDB</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>SUT.PatientCorrelationUser</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>SUT.PatientCorrelationPass</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>SUT.PatientCorrelationTable</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>NoMatchPrefix</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>NoMatchGivenName</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>NoMatchFullName</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>NoMatchFamilyName</con:name><con:value xsi:nil="true"/></con:property></con:properties></con:config></con:testStep><con:testStep type="transfer" name="EntityPatientDiscovery Property Transfer" disabled="true"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>PatientDiscoveryEndPoint</con:name><con:sourceType>PatientDiscoveryEndpoint</con:sourceType><con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep><con:targetType>Endpoint</con:targetType><con:targetStep>EntityPatientDiscoveryRequest</con:targetStep><con:targetPath/></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferChildNodes="false" useXQuery="false" ignoreEmpty="false" entitize="false" transferToAll="false"><con:name>LocalHCID</con:name><con:sourceType>LocalHCID</con:sourceType><con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep><con:targetType>Request</con:targetType><con:targetStep>EntityPatientDiscoveryRequest</con:targetStep><con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:sender[1]/urn:device[1]/urn:asAgent[1]/urn:representedOrganization[1]/urn:id[1]/@root</con:targetPath></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferChildNodes="false" transferToAll="false" ignoreEmpty="false" useXQuery="false" entitize="false"><con:name>ReceivingHCID</con:name><con:sourceType>PDRespondingHCID</con:sourceType><con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep><con:targetType>Request</con:targetType><con:targetStep>EntityPatientDiscoveryRequest</con:targetStep><con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:receiver[1]/urn:device[1]/urn:id[1]/@root</con:targetPath></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" transferToAll="false"><con:name>PDQueryRequestHCID</con:name><con:sourceType>LocalHCID</con:sourceType><con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep><con:targetType>Request</con:targetType><con:targetStep>EntityPatientDiscoveryRequest</con:targetStep><con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:sender[1]/urn:device[1]/urn:asAgent[1]/urn:representedOrganization[1]/urn:id[1]/@root</con:targetPath></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false"><con:name>PDQueryRequestSubjectGivenName</con:name><con:sourceType>SingleMatchGivenName</con:sourceType><con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep><con:targetType>Request</con:targetType><con:targetStep>EntityPatientDiscoveryRequest</con:targetStep><con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:controlActProcess[1]/urn:queryByParameter[1]/urn:parameterList[1]/urn:livingSubjectName[1]/urn:value[1]/urn:given[1]</con:targetPath></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" ignoreEmpty="false" transferToAll="false" useXQuery="false" transferChildNodes="false"><con:name>PDQueryRequestSubjectFamName</con:name><con:sourceType>SingleMatchFamilyName</con:sourceType><con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep><con:sourcePath xsi:nil="true"/><con:targetType>Request</con:targetType><con:targetStep>EntityPatientDiscoveryRequest</con:targetStep><con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:controlActProcess[1]/urn:queryByParameter[1]/urn:parameterList[1]/urn:livingSubjectName[1]/urn:value[1]/urn:family[1]</con:targetPath></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" transferToAll="false" ignoreEmpty="false" useXQuery="false" transferChildNodes="false"><con:name>PDQueryRequestSubjectBirthTime</con:name><con:sourceType>PDlivingSubjectBirthTime</con:sourceType><con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep><con:targetType>Request</con:targetType><con:targetStep>EntityPatientDiscoveryRequest</con:targetStep><con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:controlActProcess[1]/urn:queryByParameter[1]/urn:parameterList[1]/urn:livingSubjectBirthTime[1]/urn:value[1]/@value</con:targetPath></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" ignoreEmpty="false" transferToAll="false" useXQuery="false" transferChildNodes="false"><con:name>PDQueryRequestSubjectGender</con:name><con:sourceType>PDlivingSubjectAdministrativeGender</con:sourceType><con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep><con:sourcePath xsi:nil="true"/><con:targetType>Request</con:targetType><con:targetStep>EntityPatientDiscoveryRequest</con:targetStep><con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:controlActProcess[1]/urn:queryByParameter[1]/urn:parameterList[1]/urn:livingSubjectAdministrativeGender[1]/urn:value[1]/@code</con:targetPath></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferToAll="false" entitize="false" ignoreEmpty="false" useXQuery="false" transferChildNodes="false"><con:name>AssertionSSN</con:name><con:sourceType>PDSSN</con:sourceType><con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep><con:sourcePath xsi:nil="true"/><con:targetType>Request</con:targetType><con:targetStep>EntityPatientDiscoveryRequest</con:targetStep><con:targetPath>declare namespace urn1='urn:gov:hhs:fha:nhinc:common:nhinccommon';
declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:assertion[1]/urn1:SSN[1]</con:targetPath></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferToAll="false" entitize="false" ignoreEmpty="false" useXQuery="false" transferChildNodes="false"><con:name>AssertionUniquePatientID</con:name><con:sourceType>PDuniquePatientId</con:sourceType><con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep><con:sourcePath xsi:nil="true"/><con:targetType>Request</con:targetType><con:targetStep>EntityPatientDiscoveryRequest</con:targetStep><con:targetPath>declare namespace urn1='urn:gov:hhs:fha:nhinc:common:nhinccommon';
declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:assertion[1]/urn1:uniquePatientId[1]</con:targetPath></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>PDAssignAuthId</con:name><con:sourceType>PDAssignAuthID</con:sourceType><con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep><con:targetType>Request</con:targetType><con:targetStep>EntityPatientDiscoveryRequest</con:targetStep><con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:controlActProcess[1]/urn:authorOrPerformer[1]/urn:assignedDevice[1]/urn:id[1]/@root</con:targetPath></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>PDQueryReqSubjectAssignAuthID</con:name><con:sourceType>PDAssignAuthID</con:sourceType><con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep><con:targetType>Request</con:targetType><con:targetStep>EntityPatientDiscoveryRequest</con:targetStep><con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:controlActProcess[1]/urn:queryByParameter[1]/urn:parameterList[1]/urn:livingSubjectId[1]/urn:value[1]/@root</con:targetPath></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" useXQuery="false" transferChildNodes="false" transferToAll="false" ignoreEmpty="false"><con:name>PDQueryRequestSubjectID</con:name><con:sourceType>PDSubjectID</con:sourceType><con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep><con:targetType>Request</con:targetType><con:targetStep>EntityPatientDiscoveryRequest</con:targetStep><con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:controlActProcess[1]/urn:queryByParameter[1]/urn:parameterList[1]/urn:livingSubjectId[1]/urn:value[1]/@extension</con:targetPath></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferToAll="false" ignoreEmpty="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>AssertionHCID</con:name><con:sourceType>LocalHCID</con:sourceType><con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep><con:sourcePath xsi:nil="true"/><con:targetType>Request</con:targetType><con:targetStep>EntityPatientDiscoveryRequest</con:targetStep><con:targetPath>declare namespace urn1='urn:gov:hhs:fha:nhinc:common:nhinccommon';
declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:assertion[1]/urn1:homeCommunity[1]/urn1:homeCommunityId[1]</con:targetPath></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" transferToAll="false"><con:name>AssertionHCIDDesc</con:name><con:sourceType>LocalHCIDescription</con:sourceType><con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep><con:sourcePath xsi:nil="true"/><con:targetType>Request</con:targetType><con:targetStep>EntityPatientDiscoveryRequest</con:targetStep><con:targetPath>declare namespace urn1='urn:gov:hhs:fha:nhinc:common:nhinccommon';
declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:assertion[1]/urn1:homeCommunity[1]/urn1:description[1]</con:targetPath></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>AssertionHCIDname</con:name><con:sourceType>LocalHCIDName</con:sourceType><con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep><con:sourcePath xsi:nil="true"/><con:targetType>Request</con:targetType><con:targetStep>EntityPatientDiscoveryRequest</con:targetStep><con:targetPath>declare namespace urn1='urn:gov:hhs:fha:nhinc:common:nhinccommon';
declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:assertion[1]/urn1:homeCommunity[1]/urn1:name[1]</con:targetPath></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Intialize Configurations"><con:settings/><con:config><script>FileUtils.InitializeNHINCProperties(context, log);
</script></con:config></con:testStep><con:testStep type="groovy" name="Set Response Mode"><con:settings/><con:config><script>//def dataSource = testRunner.testCase.getTestStepByName( "EntityPatientDiscovery Test Case Properties" );
//def destDir = dataSource.getPropertyValue( "NHINGatewayConfigDir" );
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

def destConfigFileLocation = context.findProperty("NHINGatewayConfigDir");
FileUtils.UpdateProperty(destConfigFileLocation, 'gateway.properties', 'patientDiscoveryResponseMode', 'verify',context,log)</script></con:config></con:testStep><con:testStep type="groovy" name="clear correlations table"><con:settings/><con:config><script>context.withSql('PatientCorrelationDB') { sql -> 
  sql.execute('delete from ' + context.findProperty('PatientCorrelationTable'))
}
</script></con:config></con:testStep><con:testStep type="groovy" name="clear AA Mapping table"><con:settings/><con:config><script>context.withSql('AAmappingDB') { sql -> 
  sql.execute('delete from ' + context.findProperty('AAmappingTable'))
}
</script></con:config></con:testStep><con:testStep type="groovy" name="ModifyInterrnalConnectionInfoForPE"><con:settings/><con:config><script>
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

//def destConfigFileLocation = context.findProperty("NHINGatewayConfigDir");
def destConfigFileLocation = System.env['NHINC_PROPERTIES_DIR'];
def NHINGatewayHost = context.findProperty("NHINGatewayHost");
def mockHost = context.findProperty("mockHost");
def mockPEURL = "http://" + mockHost + ":2200/mockPE";
def LocalHCID = context.findProperty( "LocalHCID" );

FileUtils.CreateOrUpdateConnection(destConfigFileLocation, LocalHCID, "policyengineservice", mockPEURL, context, log)</script></con:config></con:testStep><con:testStep type="groovy" name="ModifyInternalConnectionInfoUsingTestHelper" disabled="true"><con:settings/><con:config><script>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );
def destConfigFileLocation = System.env['NHINC_PROPERTIES_DIR'];
def NHINGatewayHost = context.findProperty("NHINGatewayHost");//**** Redbox (remove later)

def mockHost = context.findProperty("mockHost");
def patientdiscoveryURL = "https://" + NHINGatewayHost + ":8181/CONNECTGatewayTest/NhinPatientDiscoveryTestHelper";
def mockPatientDiscoveryURL = "http://" + mockHost + ":2222/EntityPatientDiscoveryMockResponse";
def LocalHCID = context.findProperty( "LocalHCID" );
def RemoteHCID = context.findProperty("PDRespondingHCID");

FileUtils.CreateOrUpdateConnection(destConfigFileLocation, RemoteHCID, "PatientDiscovery", patientdiscoveryURL, context, log)
FileUtils.CreateOrUpdateConnection(destConfigFileLocation, RemoteHCID, "mockpatientdiscovery", mockPatientDiscoveryURL, context, log)</script></con:config></con:testStep><con:testStep type="request" name="EntityPatientDiscoveryRequest"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>EntityPatientDiscoveryBindingSoap</con:interface><con:operation>RespondingGateway_PRPA_IN201305UV02</con:operation><con:request name="EntityPatientDiscoveryRequest"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://localhost:8080/CONNECTGateway/EntityPatientDiscovery</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope" xmlns:urn="urn:hl7-org:v3" xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
   <soapenv:Header/>
   <soapenv:Body>
      <urn:RespondingGateway_PRPA_IN201305UV02Request>
         <urn:PRPA_IN201305UV02 ITSVersion="XML_1.0">
            <urn:id root="1.1" extension="-5a3e95b1:11d1fa33d45:-7f9b"/>
            <urn:creationTime value="20091116084800"/>
            <urn:interactionId root="2.16.840.1.113883.1.6" extension="PRPA_IN201305UV02"/>
            <urn:processingCode code="T"/>
            <urn:processingModeCode code="I"/>
            <urn:acceptAckCode code="AL"/>
            <urn:receiver typeCode="RCV">
               <urn:device classCode="DEV" determinerCode="INSTANCE">
                  <urn:id root="${#Project#PDRespondingHCID}"/>
                  <urn:asAgent classCode="AGNT">
                     <urn:representedOrganization classCode="ORG" determinerCode="INSTANCE">
                        <urn:id root="${#Project#PDRespondingHCID}"/>
                     </urn:representedOrganization>
                  </urn:asAgent>
               </urn:device>
            </urn:receiver>
            <urn:sender typeCode="SND">
               <urn:device classCode="DEV" determinerCode="INSTANCE">
                  <urn:id root="1.2.345.678.999"/>
                  <urn:asAgent classCode="AGNT">
                     <urn:representedOrganization classCode="ORG" determinerCode="INSTANCE">
                        <urn:id root="${#Project#LocalHCID}"/>
                     </urn:representedOrganization>
                  </urn:asAgent>
               </urn:device>
            </urn:sender>
            <urn:controlActProcess classCode="CACT" moodCode="EVN">
               <code code="PRPA_TE201305UV02" codeSystem="2.16.840.1.113883.1.6"/>
               <urn:authorOrPerformer typeCode="AUT">
                  <urn:assignedDevice>
                     <urn:id root="${#Project#PDAssignAuthID}"/>
                  </urn:assignedDevice>
               </urn:authorOrPerformer>
               <urn:queryByParameter>
                  <urn:queryId root="2.2" extension="-abd3453dcd24wkkks545"/>
                  <urn:statusCode code="new"/>
                  <urn:responseModalityCode code="R"/>
                  <urn:responsePriorityCode code="I"/>
                  <urn:parameterList>
                     <urn:livingSubjectAdministrativeGender>
                        <urn:value code="${#Project#PDlivingSubjectAdministrativeGender}"/>
                        <urn:semanticsText representation="TXT">LivingSubject.administrativeGender</urn:semanticsText>
                     </urn:livingSubjectAdministrativeGender>
                     <urn:livingSubjectBirthTime>
                        <urn:value value="${#Project#PDlivingSubjectBirthTime}" operator="I"/>
                        <urn:semanticsText representation="TXT">LivingSubject.birthTime</urn:semanticsText>
                     </urn:livingSubjectBirthTime>
                     <urn:livingSubjectName>
                        <urn:value>
                           <urn:family partType="FAM">${#Project#SingleMatchFamilyName}</urn:family>
                           <urn:given partType="GIV">${#Project#SingleMatchGivenName}</urn:given>
                           <urn:given partType="GIV">${#Project#SingleMatchMiddleName}</urn:given>
                        </urn:value>
                        <urn:semanticsText representation="TXT">LivingSubject.name</urn:semanticsText>
                     </urn:livingSubjectName>
                     <urn:livingSubjectId>
                        <urn:value extension="123456789" root="2.16.840.1.113883.4.1"/>
                        <urn:semanticsText/>
                     </urn:livingSubjectId>
                  </urn:parameterList>
               </urn:queryByParameter>
            </urn:controlActProcess>
         </urn:PRPA_IN201305UV02>
         <urn:NhinTargetCommunities>
            <urn1:nhinTargetCommunity>
               <urn1:homeCommunity>
                  <urn1:description>desc</urn1:description>
                  <urn1:homeCommunityId>${#Project#PDRespondingHCID}</urn1:homeCommunityId>
                  <urn1:name>Name</urn1:name>
               </urn1:homeCommunity>
               <urn1:list>List</urn1:list>
               <urn1:region>Region</urn1:region>
            </urn1:nhinTargetCommunity>
         </urn:NhinTargetCommunities>
         <urn:assertion>
            <urn1:address>
               <urn1:addressType>
                  <urn1:code>W</urn1:code>
               </urn1:addressType>
               <urn1:city>Melbourne</urn1:city>
               <urn1:country>US</urn1:country>
               <urn1:state>FL</urn1:state>
               <urn1:streetAddress>123 Johnson Rd</urn1:streetAddress>
               <urn1:zipCode>12345</urn1:zipCode>
            </urn1:address>
            <urn1:dateOfBirth>19800516</urn1:dateOfBirth>
            <urn1:dateOfSignature>20080520</urn1:dateOfSignature>
            <urn1:expirationDate>20100520</urn1:expirationDate>
            <urn1:explanationNonClaimantSignature>NEEDED</urn1:explanationNonClaimantSignature>
            <urn1:haveSecondWitnessSignature>true</urn1:haveSecondWitnessSignature>
            <urn1:haveSignature>true</urn1:haveSignature>
            <urn1:haveWitnessSignature>true</urn1:haveWitnessSignature>
            <urn1:homeCommunity>
               <urn1:description>Test HCID1</urn1:description>
               <urn1:homeCommunityId>1.1</urn1:homeCommunityId>
               <urn1:name>HCID1</urn1:name>
            </urn1:homeCommunity>
            <urn1:personName>
               <urn1:familyName>Winslet</urn1:familyName>
               <urn1:givenName>Kate</urn1:givenName>
               <urn1:nameType>
                  <urn1:code>G</urn1:code>
               </urn1:nameType>
               <urn1:secondNameOrInitials>FJ</urn1:secondNameOrInitials>
               <urn1:fullName>Joe Smith</urn1:fullName>
               <urn1:prefix>Mr</urn1:prefix>
            </urn1:personName>
            <urn1:phoneNumber>
               <urn1:areaCode>123</urn1:areaCode>
               <urn1:countryCode>1</urn1:countryCode>
               <urn1:extension>1234</urn1:extension>
               <urn1:localNumber>3456789</urn1:localNumber>
               <urn1:phoneNumberType>
                  <urn1:code>W</urn1:code>
               </urn1:phoneNumberType>
            </urn1:phoneNumber>
            <urn1:purposeOfDisclosureCoded>
               <urn1:code>PUBLICHEALTH</urn1:code>
               <urn1:codeSystem>2.16.840.1.113883.3.18.7.1</urn1:codeSystem>
               <urn1:codeSystemName>nhin-purpose</urn1:codeSystemName>
               <urn1:codeSystemVersion>1.0</urn1:codeSystemVersion>
               <urn1:displayName>Use or disclosure of Psychotherapy Notes</urn1:displayName>
               <urn1:originalText>Use or disclosure of Psychotherapy Notes</urn1:originalText>
            </urn1:purposeOfDisclosureCoded>
            <urn1:secondWitnessAddress>
               <urn1:addressType>
                  <urn1:code>W</urn1:code>
               </urn1:addressType>
               <urn1:city>Melbourne</urn1:city>
               <urn1:country>US</urn1:country>
               <urn1:state>FL</urn1:state>
               <urn1:streetAddress>123 Johnson Rd</urn1:streetAddress>
               <urn1:zipCode>12345</urn1:zipCode>
            </urn1:secondWitnessAddress>
            <urn1:secondWitnessName>
               <urn1:familyName>Hughes</urn1:familyName>
               <urn1:givenName>Howie</urn1:givenName>
               <urn1:nameType>
                  <urn1:code>G</urn1:code>
               </urn1:nameType>
               <urn1:secondNameOrInitials>HH</urn1:secondNameOrInitials>
               <urn1:fullName>Howie Hughes</urn1:fullName>
               <urn1:prefix>Dr</urn1:prefix>
            </urn1:secondWitnessName>
            <urn1:secondWitnessPhone>
               <urn1:areaCode>123</urn1:areaCode>
               <urn1:countryCode>1</urn1:countryCode>
               <urn1:extension>1546</urn1:extension>
               <urn1:localNumber>4567892</urn1:localNumber>
               <urn1:phoneNumberType>
                  <urn1:code>W</urn1:code>
               </urn1:phoneNumberType>
            </urn1:secondWitnessPhone>
            <urn1:SSN>123456789</urn1:SSN>
            <!--1 or more repetitions:-->
            <urn1:uniquePatientId>1234^^^&amp;amp;1.1&amp;amp;ISO</urn1:uniquePatientId>
            <urn1:witnessAddress>
               <urn1:addressType>
                  <urn1:code>W</urn1:code>
               </urn1:addressType>
               <urn1:city>Frankfort</urn1:city>
               <urn1:country>US</urn1:country>
               <urn1:state>MN</urn1:state>
               <urn1:streetAddress>432 Jackson St</urn1:streetAddress>
               <urn1:zipCode>65498</urn1:zipCode>
            </urn1:witnessAddress>
            <urn1:witnessName>
               <urn1:familyName>Ugble</urn1:familyName>
               <urn1:givenName>Gary</urn1:givenName>
               <urn1:nameType>
                  <urn1:code>G</urn1:code>
               </urn1:nameType>
               <urn1:secondNameOrInitials>GU</urn1:secondNameOrInitials>
               <urn1:fullName>Gary Ugble</urn1:fullName>
               <urn1:prefix>Mr</urn1:prefix>
            </urn1:witnessName>
            <urn1:witnessPhone>
               <urn1:areaCode>987</urn1:areaCode>
               <urn1:countryCode>1</urn1:countryCode>
               <urn1:extension>6549</urn1:extension>
               <urn1:localNumber>2222222</urn1:localNumber>
               <urn1:phoneNumberType>
                  <urn1:code>H</urn1:code>
               </urn1:phoneNumberType>
            </urn1:witnessPhone>
            <urn1:userInfo>
               <urn1:personName>
                  <urn1:familyName>Anderson</urn1:familyName>
                  <urn1:givenName>Wilma</urn1:givenName>
                  <urn1:nameType>
                     <urn1:code>G</urn1:code>
                  </urn1:nameType>
                  <urn1:secondNameOrInitials>WA</urn1:secondNameOrInitials>
                  <urn1:fullName>Wilma Anderson</urn1:fullName>
                  <urn1:prefix>Mrs</urn1:prefix>
               </urn1:personName>
               <urn1:userName>wanderson</urn1:userName>
               <urn1:role>nuse</urn1:role>
               <urn1:org>
                  <urn1:description>Test HCID1</urn1:description>
                  <urn1:homeCommunityId>1.1</urn1:homeCommunityId>
                  <urn1:name>HCID1</urn1:name>
               </urn1:org>
               <!--Optional:-->
               <urn1:roleCoded>
                  <urn1:code>Code</urn1:code>
                  <urn1:codeSystem>CodeSystem</urn1:codeSystem>
                  <urn1:codeSystemName>CodeSystemName</urn1:codeSystemName>
                  <urn1:codeSystemVersion>codeSystemVersion</urn1:codeSystemVersion>
                  <urn1:displayName>displayName</urn1:displayName>
                  <urn1:originalText>originalText</urn1:originalText>
                  <!--Zero or more repetitions:-->
                  <urn1:translation/>
               </urn1:roleCoded>
            </urn1:userInfo>
            <urn1:authorized>authorized</urn1:authorized>
            <!--Optional:-->
            <urn1:claimFormRef>claimFormRef</urn1:claimFormRef>
            <!--Optional:-->
            <urn1:claimFormRaw>cid:610957193055</urn1:claimFormRaw>
            <!--Optional:-->
            <urn1:samlAuthnStatement>
               <!--Optional:-->
               <urn1:authInstant>authInstant</urn1:authInstant>
               <!--Optional:-->
               <urn1:sessionIndex>sessionIndex</urn1:sessionIndex>
               <!--Optional:-->
               <urn1:authContextClassRef>authContextClassRef</urn1:authContextClassRef>
               <!--Optional:-->
               <urn1:subjectLocalityAddress>subjectLocalityAddress</urn1:subjectLocalityAddress>
               <!--Optional:-->
               <urn1:subjectLocalityDNSName>subjectLocalityDNSName</urn1:subjectLocalityDNSName>
            </urn1:samlAuthnStatement>
            <!--Optional:-->
            <urn1:samlAuthzDecisionStatement>
               <!--Optional:-->
               <urn1:decision>decision</urn1:decision>
               <!--Optional:-->
               <urn1:resource>resource</urn1:resource>
               <!--Optional:-->
               <urn1:action>action</urn1:action>
               <!--Optional:-->
               <urn1:evidence>
                  <!--Optional:-->
                  <urn1:assertion>
                     <!--Optional:-->
                     <urn1:id>5555</urn1:id>
                     <!--Optional:-->
                     <urn1:issueInstant>issueInstant</urn1:issueInstant>
                     <!--Optional:-->
                     <urn1:version>version</urn1:version>
                     <!--Optional:-->
                     <urn1:issuer>issuer</urn1:issuer>
                     <!--Optional:-->
                     <urn1:issuerFormat>issuerFormat</urn1:issuerFormat>
                     <!--Optional:-->
                     <urn1:conditions>
                        <!--Optional:-->
                        <urn1:notBefore>notBefore</urn1:notBefore>
                        <!--Optional:-->
                        <urn1:notOnOrAfter>notOnOrAfter</urn1:notOnOrAfter>
                     </urn1:conditions>
                     <!--Optional:-->
                     <urn1:contentReference>contentReference</urn1:contentReference>
                     <!--Optional:-->
                     <urn1:contentType>contentType</urn1:contentType>
                     <!--Optional:-->
                     <urn1:content>cid:574777349023</urn1:content>
                  </urn1:assertion>
               </urn1:evidence>
            </urn1:samlAuthzDecisionStatement>
            <!--Optional:-->
            <urn1:samlSignature>
               <!--Optional:-->
               <urn1:keyInfo>
                  <!--Optional:-->
                  <urn1:rsaKeyValueModulus>cid:1157111506023</urn1:rsaKeyValueModulus>
                  <!--Optional:-->
                  <urn1:rsaKeyValueExponent>cid:136268302631</urn1:rsaKeyValueExponent>
               </urn1:keyInfo>
               <!--Optional:-->
               <urn1:signatureValue>cid:880867232879</urn1:signatureValue>
            </urn1:samlSignature>
         </urn:assertion>
      </urn:RespondingGateway_PRPA_IN201305UV02Request>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="Schema Compliance" disabled="true"><con:configuration/></con:assertion><con:assertion type="SOAP Fault Assertion"/><con:assertion type="XPath Match"><con:configuration/></con:assertion><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="mockresponse" name="NHINCProxyPatientDiscoveryMockResponse" disabled="true"><con:settings/><con:config xsi:type="con:MockResponseStep" startStep="EntityPatientDiscoveryRequest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>NhincProxyPatientDiscoveryBinding</con:interface><con:operation>Proxy_PRPA_IN201305UV</con:operation><con:path>/EntityPatientDiscoveryMockResponse</con:path><con:port>2222</con:port><con:timeout>40000</con:timeout><con:response><con:settings/><con:responseContent><![CDATA[<S:Envelope xmlns:S="http://www.w3.org/2003/05/soap-envelope">
   <S:Body>
      <ns3:PRPA_IN201306UV02 ITSVersion="XML_1.0" xmlns="http://schemas.xmlsoap.org/ws/2004/08/addressing" xmlns:ns2="urn:gov:hhs:fha:nhinc:common:nhinccommon" xmlns:ns3="urn:hl7-org:v3" xmlns:ns4="urn:gov:hhs:fha:nhinc:common:patientcorrelationfacade">
         <ns3:id extension="4191797c:1259356875e:-7c2d" root="1.1.1"/>
         <ns3:creationTime value="2009121522276"/>
         <ns3:interactionId extension="PRPA_IN201306UV" root="2.16.840.1.113883.1.6"/>
         <ns3:processingCode code="P"/>
         <ns3:processingModeCode code="R"/>
         <ns3:acceptAckCode code="AL"/>
         <ns3:receiver typeCode="RCV">
            <ns3:device determinerCode="INSTANCE" classCode="">
               <ns3:id root="1.2.345.678.999"/>
               <ns3:asAgent classCode="AGNT">
                  <ns3:representedOrganization determinerCode="INSTANCE" classCode="ORG">
                     <ns3:id/>
                  </ns3:representedOrganization>
               </ns3:asAgent>
            </ns3:device>
         </ns3:receiver>
         <ns3:sender typeCode="SND">
            <ns3:device determinerCode="INSTANCE" classCode="">
               <ns3:id root="1.2.345.678.999"/>
               <ns3:asAgent classCode="AGNT">
                  <ns3:representedOrganization determinerCode="INSTANCE" classCode="ORG">
                     <ns3:id/>
                  </ns3:representedOrganization>
               </ns3:asAgent>
            </ns3:device>
         </ns3:sender>
         <ns3:acknowledgement>
            <ns3:typeId extension="PRPA_IN201305UV02" root="2.16.840.1.113883.1.6"/>
            <ns3:typeCode code="AA"/>
            <ns3:targetMessage xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
         </ns3:acknowledgement>
         <ns3:controlActProcess moodCode="EVN" classCode="">
            <ns3:code codeSystem="2.16.840.1.113883.1.6" code="PRPA_TE201306UV"/>
            <ns3:subject typeCode="SUBJ">
               <ns3:registrationEvent moodCode="" classCode="">
                  <ns3:id nullFlavor="NA"/>
                  <ns3:statusCode code="active"/>
                  <ns3:subject1 typeCode="">
                     <ns3:patient classCode="PAT">
                        <ns3:id extension="1234" root="2.2.2"/>
                        <ns3:statusCode code="SD"/>
                        <ns3:patientPerson>
                           <ns3:name>
                              <ns3:family partType="FAM">Smith</ns3:family>
                              <ns3:given partType="GIV">Joe</ns3:given>
                           </ns3:name>
                           <ns3:administrativeGenderCode code="M"/>
                           <ns3:birthTime value="19560301"/>
                           <ns3:addr>
                              <ns3:city>Orlando</ns3:city>
                              <ns3:state>FL</ns3:state>
                              <ns3:postalCode>98765</ns3:postalCode>
                           </ns3:addr>
                        </ns3:patientPerson>
                        <ns3:providerOrganization determinerCode="" classCode="">
                           <ns3:id root="2.2.2"/>
                           <ns3:contactParty xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
                        </ns3:providerOrganization>
                        <ns3:subjectOf1>
                           <ns3:queryMatchObservation moodCode="" classCode="">
                              <ns3:code code="IHE_PDQ"/>
                              <ns3:value xsi:type="ns3:INT" value="100" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
                           </ns3:queryMatchObservation>
                        </ns3:subjectOf1>
                     </ns3:patient>
                  </ns3:subject1>
                  <ns3:custodian typeCode="">
                     <ns3:assignedEntity classCode="">
                        <ns3:id root="2.2.2"/>
                     </ns3:assignedEntity>
                  </ns3:custodian>
               </ns3:registrationEvent>
            </ns3:subject>
            <ns3:queryAck>
               <ns3:queryId extension="-abd3453dcd24wkkks545" root="1.1"/>
               <ns3:queryResponseCode code="OK"/>
               <ns3:resultTotalQuantity value="1"/>
               <ns3:resultCurrentQuantity value="1"/>
               <ns3:resultRemainingQuantity value="0"/>
            </ns3:queryAck>
            <ns3:queryByParameter xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
         </ns3:controlActProcess>
      </ns3:PRPA_IN201306UV02>
   </S:Body>
</S:Envelope>]]></con:responseContent><con:wsaConfig mustUnderstand="NONE" version="200508"/></con:response><con:assertion type="XPath Match" name="SingleMatchGivenName"><con:configuration><path>declare namespace ns3='urn:hl7-org:v3';
//ns3:Proxy_PRPA_IN201305UVProxyRequest[1]/ns3:PRPA_IN201305UV02[1]/ns3:controlActProcess[1]/ns3:queryByParameter[1]/ns3:parameterList[1]/ns3:livingSubjectName[1]/ns3:value[1]/ns3:given[1]</path><content>Joe</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:assertion type="XPath Match" name="SingleMatchFamilyName"><con:configuration><path>declare namespace ns3='urn:hl7-org:v3';
//ns3:Proxy_PRPA_IN201305UVProxyRequest[1]/ns3:PRPA_IN201305UV02[1]/ns3:controlActProcess[1]/ns3:queryByParameter[1]/ns3:parameterList[1]/ns3:livingSubjectName[1]/ns3:value[1]/ns3:family[1]</path><content>Smith</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:host/></con:config></con:testStep><con:testStep type="mockresponse" name="Policy Engine Mock">
				<con:settings/>
				<con:config xsi:type="con:MockResponseStep" startStep="EntityPatientDiscoveryRequest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:interface>AdapterPolicyEngineBindingSoap</con:interface>
					<con:operation>CheckPolicy</con:operation>
					<con:path>/mockPE</con:path>
					<con:port>2200</con:port>
					<con:timeout>30000</con:timeout>
					<con:response>
						<con:settings/>
						<con:responseContent><![CDATA[<S:Envelope xmlns:S="http://www.w3.org/2003/05/soap-envelope">
   <S:Body>
      <ns19:CheckPolicyResponse xmlns:ns2="http://www.w3.org/2005/08/addressing" xmlns:ns3="http://docs.oasis-open.org/wsn/b-2" xmlns:ns4="http://docs.oasis-open.org/wsrf/bf-2" xmlns:ns5="http://docs.oasis-open.org/wsn/t-1" xmlns:ns6="http://www.hhs.gov/healthit/nhin/cdc" xmlns:ns7="urn:gov:hhs:fha:nhinc:common:subscriptionb2overrideforcdc" xmlns:ns8="http://schemas.xmlsoap.org/ws/2004/08/addressing" xmlns:ns9="urn:oasis:names:tc:ebxml-regrep:xsd:rs:3.0" xmlns:ns10="urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0" xmlns:ns11="urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0" xmlns:ns12="urn:oasis:names:tc:ebxml-regrep:xsd:lcm:3.0" xmlns:ns13="urn:ihe:iti:xds-b:2007" xmlns:ns14="urn:gov:hhs:fha:nhinc:common:subscriptionb2overridefordocuments" xmlns:ns15="http://nhinc.services.com/schema/auditmessage" xmlns:ns16="urn:gov:hhs:fha:nhinc:gateway:samltokendata" xmlns:ns17="urn:oasis:names:tc:xacml:2.0:policy:schema:os" xmlns:ns18="urn:oasis:names:tc:xacml:2.0:context:schema:os" xmlns:ns19="urn:gov:hhs:fha:nhinc:common:nhinccommonadapter" xmlns:ns20="urn:gov:hhs:fha:nhinc:common:nhinccommon">
         <ns19:response>
            <ns18:Result>
               <ns18:Decision>Permit</ns18:Decision>
            </ns18:Result>
         </ns19:response>
      </ns19:CheckPolicyResponse>
   </S:Body>
</S:Envelope>]]></con:responseContent>
						<con:wsaConfig mustUnderstand="NONE" version="200508"/>
					</con:response>
					<con:assertion type="GroovyScriptAssertion" name="AuthnStatementAuthnInstant ">
						<con:configuration><scriptText>def FieldName='authInstant';
def AssertionXpath='//ec:assertion/nc:samlAuthnStatement/nc:authInstant'
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authn-statement:auth-instant';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
</scriptText></con:configuration>
					</con:assertion>
					<con:assertion type="GroovyScriptAssertion" name="AuthnStatementSessionIndex">
						<con:configuration><scriptText>def FieldName='sessionIndex';
def AssertionXpath='//ec:assertion/nc:samlAuthnStatement/nc:sessionIndex';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authn-statement:session-index';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
</scriptText></con:configuration>
					</con:assertion>
					<con:assertion type="GroovyScriptAssertion" name="AuthnStatementAthnContextClassRef ">
						<con:configuration><scriptText>def FieldName='authContextClassRef';
def AssertionXpath='//ec:assertion/nc:samlAuthnStatement/nc:authContextClassRef';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authn-statement:auth-context-class-ref';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
</scriptText></con:configuration>
					</con:assertion>
					<con:assertion type="GroovyScriptAssertion" name="AuthnStatementSubjectLocalityAddress ">
						<con:configuration><scriptText>def FieldName='subjectLocalityAddress';
def AssertionXpath='//ec:assertion/nc:samlAuthnStatement/nc:subjectLocalityAddress';
def XacmlAttributeId='urn:oasis:names:tc:xacml:1.0:subject:authn-locality:ip-address';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
</scriptText></con:configuration>
					</con:assertion>
					<con:assertion type="GroovyScriptAssertion" name="AuthnStatementDNSName ">
						<con:configuration><scriptText>def FieldName='subjectLocalityDNSName';
def AssertionXpath='//ec:assertion/nc:samlAuthnStatement/nc:subjectLocalityDNSName';
def XacmlAttributeId='urn:oasis:names:tc:xacml:1.0:subject:authn-locality:dns-name';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
</scriptText></con:configuration>
					</con:assertion>
					<con:assertion type="GroovyScriptAssertion" name="UserPersonName">
						<con:configuration><scriptText>def FieldName='personname';
def AssertionXpath='//ec:assertion/nc:userInfo/nc:userName';
def XacmlAttributeId='urn:oasis:names:tc:xacml:1.0:subject:subject-id';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
</scriptText></con:configuration>
					</con:assertion>
					<con:assertion type="GroovyScriptAssertion" name="UserOrganizationName">
						<con:configuration><scriptText>def FieldName='user organization';
def AssertionXpath='//ec:assertion/nc:userInfo/nc:org/nc:name';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:user-organization-name';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
</scriptText></con:configuration>
					</con:assertion>
					<con:assertion type="GroovyScriptAssertion" name="UserRoleCode">
						<con:configuration><scriptText>def FieldName='user role coded';
def AssertionXpath='//ec:assertion/nc:userInfo/nc:roleCoded/nc:code';
//def XacmlAttributeId='urn:gov:hhs:fha:nhinc:user-role-code';
def XacmlAttributeId='urn:oasis:names:tc:xacml:2.0:subject:role';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
</scriptText></con:configuration>
					</con:assertion>
					<con:assertion type="GroovyScriptAssertion" name="UserRoleCodeSystem ">
						<con:configuration><scriptText>def FieldName='user role system';
def AssertionXpath='//ec:assertion/nc:userInfo/nc:roleCoded/nc:codeSystem';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:user-role-code-system';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
</scriptText></con:configuration>
					</con:assertion>
					<con:assertion type="GroovyScriptAssertion" name="UserRoleCodeSystemName ">
						<con:configuration><scriptText>def FieldName='user role system name';
def AssertionXpath='//ec:assertion/nc:userInfo/nc:roleCoded/nc:codeSystemName';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:user-role-code-system-name';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
</scriptText></con:configuration>
					</con:assertion>
					<con:assertion type="GroovyScriptAssertion" name="UserRoleCodeDiplayName ">
						<con:configuration><scriptText>def FieldName='user role display name';
def AssertionXpath='//ec:assertion/nc:userInfo/nc:roleCoded/nc:displayName';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:user-role-description';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
</scriptText></con:configuration>
					</con:assertion>
					<con:assertion type="GroovyScriptAssertion" name="PurposeForUseCode">
						<con:configuration><scriptText>def FieldName='PurposeForUseCode';
def AssertionXpath='//ec:assertion/nc:purposeOfDisclosureCoded/nc:code';
//def XacmlAttributeId='urn:gov:hhs:fha:nhinc:purpose-of-use-code';
def XacmlAttributeId='urn:oasis:names:tc:xspa:1.0:subject:purposeofuse';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
</scriptText></con:configuration>
					</con:assertion>
					<con:assertion type="GroovyScriptAssertion" name="PurposeForUseCodeSystem">
						<con:configuration><scriptText>def FieldName='PurposeForUseCodeSystem';
def AssertionXpath='//ec:assertion/nc:purposeOfDisclosureCoded/nc:codeSystem';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:purpose-of-use-code-system';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
</scriptText></con:configuration>
					</con:assertion>
					<con:assertion type="GroovyScriptAssertion" name="PurposeForUseCodeSystemName">
						<con:configuration><scriptText>def FieldName='PurposeForUseCodeSystemName';
def AssertionXpath='//ec:assertion/nc:purposeOfDisclosureCoded/nc:codeSystemName';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:purpose-of-use-code-system-name';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
</scriptText></con:configuration>
					</con:assertion>
					<con:assertion type="GroovyScriptAssertion" name="PurposeForUseCodeDisplayName">
						<con:configuration><scriptText>def FieldName='PurposeForUseCodeDisplayName';
def AssertionXpath='//ec:assertion/nc:purposeOfDisclosureCoded/nc:displayName';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:purpose-of-use-display-name';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
</scriptText></con:configuration>
					</con:assertion>
					<con:assertion type="GroovyScriptAssertion" name="AuthzDecisionStatementDecision">
						<con:configuration><scriptText>def FieldName='AuthzDecisionStatementDecision';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:decision';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-decision';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
</scriptText></con:configuration>
					</con:assertion>
					<con:assertion type="GroovyScriptAssertion" name="AuthzDecisionStatementResource">
						<con:configuration><scriptText>def FieldName='AuthzDecisionStatementResource';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:resource';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-resource';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
</scriptText></con:configuration>
					</con:assertion>
					<con:assertion type="GroovyScriptAssertion" name="AuthzDecisionStatementAction">
						<con:configuration><scriptText>def FieldName='AuthzDecisionStatementAction';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:action';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-action';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
//log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);
def ExpectedValue='action';
//log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (ExpectedValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
</scriptText></con:configuration>
					</con:assertion>
					<con:assertion type="GroovyScriptAssertion" name="AuthzDecisionStatementEvidenceAssertionID ">
						<con:configuration><scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionID';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:id';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-id';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
</scriptText></con:configuration>
					</con:assertion>
					<con:assertion type="GroovyScriptAssertion" name="AuthzDecisionStatementEvidenceAssertionIssueInstant">
						<con:configuration><scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionIssueInstant';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:issueInstant';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-issue-instant';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
</scriptText></con:configuration>
					</con:assertion>
					<con:assertion type="GroovyScriptAssertion" name="AuthzDecisionStatementEvidenceAssertionVersion">
						<con:configuration><scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionVersion';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:version';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-version';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
</scriptText></con:configuration>
					</con:assertion>
					<con:assertion type="GroovyScriptAssertion" name="AuthzDecisionStatementEvidenceAssertionIssuer">
						<con:configuration><scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionIssuer';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:issuer';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-issuer';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
</scriptText></con:configuration>
					</con:assertion>
					<con:assertion type="GroovyScriptAssertion" name="AuthzDecisionStatementEvidenceAssertionConditionsNotBefore" disabled="true">
						<con:configuration><scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionConditionsNotBefore';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:conditions/nc:notBefore';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-not-before';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
//assert (AssertionValue==XacmlValue);
assert (XacmlValue == '2001-01-01T06:00:00.000Z')

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#date';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
</scriptText></con:configuration>
					</con:assertion>
					<con:assertion type="GroovyScriptAssertion" name="AuthzDecisionStatementEvidenceAssertionConditionsNotOnOrAfter " disabled="true">
						<con:configuration><scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionConditionsNotOnOrAfter';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:conditions/nc:notOnOrAfter';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-not-on-or-after';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
//assert (AssertionValue==XacmlValue);
assert (XacmlValue == '2009-05-07T02:00:17.000Z')

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#date';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
</scriptText></con:configuration>
					</con:assertion>
					<con:assertion type="GroovyScriptAssertion" name="AuthzDecisionStatementEvidenceAssertionContentReference " disabled="true">
						<con:configuration><scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionContentReference';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:contentReference';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-content-reference';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
</scriptText></con:configuration>
					</con:assertion>
					<con:assertion type="GroovyScriptAssertion" name="AuthzDecisionStatementEvidenceAssertionContentType " disabled="true">
						<con:configuration><scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionContentType';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:contentType';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-content-type';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
</scriptText></con:configuration>
					</con:assertion>
					<con:assertion type="GroovyScriptAssertion" name="AuthzDecisionStatementEvidenceAssertionContent " disabled="true">
						<con:configuration><scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionContent';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:content';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-content';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
</scriptText></con:configuration>
					</con:assertion>
				<con:assertion type="GroovyScriptAssertion" name="HomeCommunityId" disabled="true"><con:configuration><scriptText>def FieldName='home-community-id';
def AssertionXpath='//ec:RespondingGateway_PRPA_IN201305UV02Request[1]/ec:PRPA_IN201305UV02[1]/ec:receiver[1]/ec:device[1]/ec:id[1]/@root';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:home-community-id';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("EntityPatientDiscoveryRequest");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:hl7-org:v3';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
if (AssertionValue[0..2] == '${#') AssertionValue = context.expand(AssertionValue);
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def MockXPath = "//xacml:Resource/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']";

def XacmlAttributeCount = mockRequestHolder["count(" + MockXPath + ")"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Resource/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Resource/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="OrganizationId"><con:configuration><scriptText>def FieldName='organizationid';
def AssertionXpath='//ec:assertion/nc:userInfo/nc:org/nc:homeCommunityId';
def XacmlAttributeId='urn:oasis:names:tc:xspa:1.0:subject:organization-id';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#anyURI';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="PatientId" disabled="true"><con:configuration><scriptText>def FieldName='PatientId';
def XacmlAttributeId='http://www.hhs.gov/healthit/nhin#subject-id';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';
mockRequestHolder.namespaces['hl7'] = 'urn:hl7-org:v3';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Resource/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValueExtension = mockRequestHolder["//xacml:Resource/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue/hl7:PatientId/@extension"]
def ExpectedExtension = '1234';
log.info('XacmlAttributeValue(' + FieldName + '@extension)=' + XacmlValueExtension);
//log.info('XacmlAttributeValue(' + FieldName + '@extension) == ' + 'AssertionValue(' + FieldName + '@extension) => ' + (AssertionValue==XacmlValueExtension));
assert(XacmlValueExtension==ExpectedExtension);

def XacmlValueRoot = mockRequestHolder["//xacml:Resource/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue/hl7:PatientId/@root"]
def ExpectedRoot = '2.2.2';
log.info('XacmlAttributeValue(' + FieldName + '@root)=' + XacmlValueRoot);
//log.info('XacmlAttributeValue(' + FieldName + '@extension) == ' + 'AssertionValue(' + FieldName + '@extension) => ' + (AssertionValue==XacmlValueExtension));
assert(XacmlValueRoot==ExpectedRoot);

def ActualDataType = mockRequestHolder["//xacml:Resource/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'urn:hl7-org:v3#II';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="AuthzDecisionStatementEvidenceAssertionAccessConsent" disabled="true"><con:configuration><scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionAccessConsent';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:accessConsentPolicy';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-access-consent';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#anyURI';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="AuthzDecisionStatementEvidenceAssertionInstanceAccessConsent" disabled="true"><con:configuration><scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionInstanceAccessConsent';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:instanceAccessConsentPolicy';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-instance-access-consent';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#anyURI';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" disabled="true"><con:configuration><path>declare namespace ns19='urn:oasis:names:tc:xacml:2.0:context:schema:os';
declare namespace ns18='urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
//ns18:CheckPolicyRequest[1]/ns18:request[1]/ns19:Subject[2]/ns19:Attribute[1]/@AttributeId</path><content>urn:gov:hhs:fha:nhinc:home-community-id</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:assertion type="XPath Match" name="local patient id"><con:configuration><path>declare namespace ns14='urn:oasis:names:tc:xacml:2.0:context:schema:os';
declare namespace hl7='urn:hl7-org:v3';
declare namespace ns19='urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
//ns19:CheckPolicyRequest[1]/ns19:request[1]/ns14:Resource[1]/ns14:Attribute[1]/ns14:AttributeValue[1]/hl7:PatientId[1]/@extension</path><content>1234</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="ResourceID" disabled="true"><con:configuration><scriptText>def FieldName='resource:resource-id';
def AssertionXpath='//ec:RespondingGateway_PRPA_IN201305UV02Request[1]/ec:PRPA_IN201305UV02[1]/ec:controlActProcess[1]/ec:queryByParameter[1]/ec:parameterList[1]/ec:livingSubjectId[2]/ec:value[1]/@extension';
				
def XacmlAttributeId='urn:oasis:names:tc:xacml:1.0:resource:resource-id';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("EntityPatientDiscoveryRequest");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:hl7-org:v3';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
if (AssertionValue[0..2] == '${#') AssertionValue = context.expand(AssertionValue);
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Resource/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Resource/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Resource/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="AssigningAuthority" disabled="true"><con:configuration><scriptText>def FieldName='assigning-authority-id';
//def AssertionXpath='//ec:RespondingGateway_PRPA_IN201305UV02Request[1]/ec:PRPA_IN201305UV02[1]/ec:controlActProcess[1]/ec:authorOrPerformer[1]/ec:assignedDevice[1]/ec:id[1]/@root';
def AssertionXpath='//ec:RespondingGateway_PRPA_IN201305UV02Request[1]/ec:PRPA_IN201305UV02[1]/ec:controlActProcess[1]/ec:queryByParameter[1]/ec:parameterList[1]/ec:livingSubjectId[2]/ec:value[1]/@root';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:assigning-authority-id';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("EntityPatientDiscoveryRequest");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:hl7-org:v3';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
if (AssertionValue[0..2] == '${#') AssertionValue = context.expand(AssertionValue);

log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Resource/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Resource/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Resource/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText></con:configuration></con:assertion></con:config>
			</con:testStep><con:testStep type="groovy" name="count correlations (0)"><con:settings/><con:config><script>
def patId = context.findProperty('PDSubjectID')
context.withSql('PatientCorrelationDB') { sql -> 
  assert 0 == sql.firstRow("select count(*) from " + context.findProperty('PatientCorrelationTable') + " where PatientId = '" + patId + "'")[0]
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Count AA Mapping (2)"><con:settings/><con:config><script>context.withSql('AAmappingDB') { sql -> 
  assert 2 == sql.firstRow("select count(*) from " + context.findProperty('AAmappingTable'))[0]
}
</script></con:config></con:testStep><con:properties><con:property><con:name>startDate</con:name><con:value>2010-07-06T00:00:00Z</con:value></con:property><con:property><con:name>endDate</con:name><con:value>2010-07-06T18:03:24Z</con:value></con:property><con:property><con:name>sigDate</con:name><con:value>07/06/2010 00:00:00</con:value></con:property><con:property><con:name>expireDate</con:name><con:value>2010-08-05T00:00:00Z</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PatientDiscoverySingleMatchPolicyCheckTest - Patch 229 and 205" searchProperties="true" id="625921b7-88b9-4ea1-aaec-8f6a57946add"><con:settings/><con:testStep type="properties" name="EntityPatientDiscovery Test Case Properties" disabled="true"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" createMissingOnLoad="true" discardValuesOnSave="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:source>C:/Projects/NHINC/Current/Product/SoapUI_Test/RegressionSuite/EntityPatientDiscovery.properties</con:source><con:target/><con:properties><con:property><con:name>LocalAA</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>LocalHCIDescription</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>LocalHCID</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PatientDiscoveryEndpoint</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDSubjectID</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDzipCode</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDRespondingAA</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDRespondingHCID</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDpurposeOfDisclosure</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDSSN</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDdOB</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDexpirationDate</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDuniquePatientId</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDstreetAddress</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDstate</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDCity</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDcountry</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDdateOfSignature</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDRespondingHCDesc</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDRespondingHCName</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDlivingSubjectAdministrativeGender</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDlivingSubjectBirthTime</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>LocalHCIDName</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDAssignAuthID</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>NHINGatewayConfigDir</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>NHINGatewayHost</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PEReceivingHCID</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>mockHost</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>SingleMatchPrefix</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>SingleMatchGivenName</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>SingleMatchFullName</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>SingleMatchFamilyName</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>SUT.PatientCorrelationHost</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>SUT.PatientCorrelationPort</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>SUT.PatientCorrelationDB</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>SUT.PatientCorrelationUser</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>SUT.PatientCorrelationPass</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>SUT.PatientCorrelationTable</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>NoMatchPrefix</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>NoMatchGivenName</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>NoMatchFullName</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>NoMatchFamilyName</con:name><con:value xsi:nil="true"/></con:property></con:properties></con:config></con:testStep><con:testStep type="transfer" name="EntityPatientDiscovery Property Transfer" disabled="true"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>PatientDiscoveryEndPoint</con:name><con:sourceType>PatientDiscoveryEndpoint</con:sourceType><con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep><con:targetType>Endpoint</con:targetType><con:targetStep>EntityPatientDiscoveryRequest</con:targetStep><con:targetPath/></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferChildNodes="false" useXQuery="false" ignoreEmpty="false" entitize="false" transferToAll="false"><con:name>LocalHCID</con:name><con:sourceType>LocalHCID</con:sourceType><con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep><con:targetType>Request</con:targetType><con:targetStep>EntityPatientDiscoveryRequest</con:targetStep><con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:sender[1]/urn:device[1]/urn:asAgent[1]/urn:representedOrganization[1]/urn:id[1]/@root</con:targetPath></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferChildNodes="false" transferToAll="false" ignoreEmpty="false" useXQuery="false" entitize="false"><con:name>ReceivingHCID</con:name><con:sourceType>PDRespondingHCID</con:sourceType><con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep><con:targetType>Request</con:targetType><con:targetStep>EntityPatientDiscoveryRequest</con:targetStep><con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:receiver[1]/urn:device[1]/urn:id[1]/@root</con:targetPath></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" transferToAll="false"><con:name>PDQueryRequestHCID</con:name><con:sourceType>LocalHCID</con:sourceType><con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep><con:targetType>Request</con:targetType><con:targetStep>EntityPatientDiscoveryRequest</con:targetStep><con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:sender[1]/urn:device[1]/urn:asAgent[1]/urn:representedOrganization[1]/urn:id[1]/@root</con:targetPath></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false"><con:name>PDQueryRequestSubjectGivenName</con:name><con:sourceType>SingleMatchGivenName</con:sourceType><con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep><con:targetType>Request</con:targetType><con:targetStep>EntityPatientDiscoveryRequest</con:targetStep><con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:controlActProcess[1]/urn:queryByParameter[1]/urn:parameterList[1]/urn:livingSubjectName[1]/urn:value[1]/urn:given[1]</con:targetPath></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" ignoreEmpty="false" transferToAll="false" useXQuery="false" transferChildNodes="false"><con:name>PDQueryRequestSubjectFamName</con:name><con:sourceType>SingleMatchFamilyName</con:sourceType><con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep><con:sourcePath xsi:nil="true"/><con:targetType>Request</con:targetType><con:targetStep>EntityPatientDiscoveryRequest</con:targetStep><con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:controlActProcess[1]/urn:queryByParameter[1]/urn:parameterList[1]/urn:livingSubjectName[1]/urn:value[1]/urn:family[1]</con:targetPath></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" transferToAll="false" ignoreEmpty="false" useXQuery="false" transferChildNodes="false"><con:name>PDQueryRequestSubjectBirthTime</con:name><con:sourceType>PDlivingSubjectBirthTime</con:sourceType><con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep><con:targetType>Request</con:targetType><con:targetStep>EntityPatientDiscoveryRequest</con:targetStep><con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:controlActProcess[1]/urn:queryByParameter[1]/urn:parameterList[1]/urn:livingSubjectBirthTime[1]/urn:value[1]/@value</con:targetPath></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" ignoreEmpty="false" transferToAll="false" useXQuery="false" transferChildNodes="false"><con:name>PDQueryRequestSubjectGender</con:name><con:sourceType>PDlivingSubjectAdministrativeGender</con:sourceType><con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep><con:sourcePath xsi:nil="true"/><con:targetType>Request</con:targetType><con:targetStep>EntityPatientDiscoveryRequest</con:targetStep><con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:controlActProcess[1]/urn:queryByParameter[1]/urn:parameterList[1]/urn:livingSubjectAdministrativeGender[1]/urn:value[1]/@code</con:targetPath></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferToAll="false" entitize="false" ignoreEmpty="false" useXQuery="false" transferChildNodes="false"><con:name>AssertionSSN</con:name><con:sourceType>PDSSN</con:sourceType><con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep><con:sourcePath xsi:nil="true"/><con:targetType>Request</con:targetType><con:targetStep>EntityPatientDiscoveryRequest</con:targetStep><con:targetPath>declare namespace urn1='urn:gov:hhs:fha:nhinc:common:nhinccommon';
declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:assertion[1]/urn1:SSN[1]</con:targetPath></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferToAll="false" entitize="false" ignoreEmpty="false" useXQuery="false" transferChildNodes="false"><con:name>AssertionUniquePatientID</con:name><con:sourceType>PDuniquePatientId</con:sourceType><con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep><con:sourcePath xsi:nil="true"/><con:targetType>Request</con:targetType><con:targetStep>EntityPatientDiscoveryRequest</con:targetStep><con:targetPath>declare namespace urn1='urn:gov:hhs:fha:nhinc:common:nhinccommon';
declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:assertion[1]/urn1:uniquePatientId[1]</con:targetPath></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>PDAssignAuthId</con:name><con:sourceType>PDAssignAuthID</con:sourceType><con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep><con:targetType>Request</con:targetType><con:targetStep>EntityPatientDiscoveryRequest</con:targetStep><con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:controlActProcess[1]/urn:authorOrPerformer[1]/urn:assignedDevice[1]/urn:id[1]/@root</con:targetPath></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>PDQueryReqSubjectAssignAuthID</con:name><con:sourceType>PDAssignAuthID</con:sourceType><con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep><con:targetType>Request</con:targetType><con:targetStep>EntityPatientDiscoveryRequest</con:targetStep><con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:controlActProcess[1]/urn:queryByParameter[1]/urn:parameterList[1]/urn:livingSubjectId[1]/urn:value[1]/@root</con:targetPath></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" useXQuery="false" transferChildNodes="false" transferToAll="false" ignoreEmpty="false"><con:name>PDQueryRequestSubjectID</con:name><con:sourceType>PDSubjectID</con:sourceType><con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep><con:targetType>Request</con:targetType><con:targetStep>EntityPatientDiscoveryRequest</con:targetStep><con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:controlActProcess[1]/urn:queryByParameter[1]/urn:parameterList[1]/urn:livingSubjectId[1]/urn:value[1]/@extension</con:targetPath></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferToAll="false" ignoreEmpty="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>AssertionHCID</con:name><con:sourceType>LocalHCID</con:sourceType><con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep><con:sourcePath xsi:nil="true"/><con:targetType>Request</con:targetType><con:targetStep>EntityPatientDiscoveryRequest</con:targetStep><con:targetPath>declare namespace urn1='urn:gov:hhs:fha:nhinc:common:nhinccommon';
declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:assertion[1]/urn1:homeCommunity[1]/urn1:homeCommunityId[1]</con:targetPath></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" transferToAll="false"><con:name>AssertionHCIDDesc</con:name><con:sourceType>LocalHCIDescription</con:sourceType><con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep><con:sourcePath xsi:nil="true"/><con:targetType>Request</con:targetType><con:targetStep>EntityPatientDiscoveryRequest</con:targetStep><con:targetPath>declare namespace urn1='urn:gov:hhs:fha:nhinc:common:nhinccommon';
declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:assertion[1]/urn1:homeCommunity[1]/urn1:description[1]</con:targetPath></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>AssertionHCIDname</con:name><con:sourceType>LocalHCIDName</con:sourceType><con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep><con:sourcePath xsi:nil="true"/><con:targetType>Request</con:targetType><con:targetStep>EntityPatientDiscoveryRequest</con:targetStep><con:targetPath>declare namespace urn1='urn:gov:hhs:fha:nhinc:common:nhinccommon';
declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:assertion[1]/urn1:homeCommunity[1]/urn1:name[1]</con:targetPath></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Intialize Configurations"><con:settings/><con:config><script>FileUtils.InitializeNHINCProperties(context, log);
</script></con:config></con:testStep><con:testStep type="groovy" name="Set Response Mode"><con:settings/><con:config><script>//def dataSource = testRunner.testCase.getTestStepByName( "EntityPatientDiscovery Test Case Properties" );
//def destDir = dataSource.getPropertyValue( "NHINGatewayConfigDir" );
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

def destConfigFileLocation = context.findProperty("NHINGatewayConfigDir");
FileUtils.UpdateProperty(destConfigFileLocation, 'gateway.properties', 'patientDiscoveryResponseMode', 'Trust',context,log)</script></con:config></con:testStep><con:testStep type="groovy" name="clear correlations table"><con:settings/><con:config><script>context.withSql('PatientCorrelationDB') { sql -> 
  sql.execute('delete from ' + context.findProperty('PatientCorrelationTable'))
}
</script></con:config></con:testStep><con:testStep type="groovy" name="clear AA Mapping table"><con:settings/><con:config><script>context.withSql('AAmappingDB') { sql -> 
  sql.execute('delete from ' + context.findProperty('AAmappingTable'))
}
</script></con:config></con:testStep><con:testStep type="groovy" name="ModifyInterrnalConnectionInfoForPE"><con:settings/><con:config><script>
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

//def destConfigFileLocation = context.findProperty("NHINGatewayConfigDir");
def destConfigFileLocation = System.env['NHINC_PROPERTIES_DIR'];
def NHINGatewayHost = context.findProperty("NHINGatewayHost");
def mockHost = context.findProperty("mockHost");
def mockPEURL = "http://" + mockHost + ":2200/mockPE";
def LocalHCID = context.findProperty( "LocalHCID" );

FileUtils.CreateOrUpdateConnection(destConfigFileLocation, LocalHCID, "policyengineservice", mockPEURL, context, log)</script></con:config></con:testStep><con:testStep type="groovy" name="ModifyInternalConnectionInfoUsingTestHelper" disabled="true"><con:settings/><con:config><script>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );
def destConfigFileLocation = System.env['NHINC_PROPERTIES_DIR'];
def NHINGatewayHost = context.findProperty("NHINGatewayHost");//**** Redbox (remove later)

def mockHost = context.findProperty("mockHost");
def patientdiscoveryURL = "https://" + NHINGatewayHost + ":8181/CONNECTGatewayTest/NhinPatientDiscoveryTestHelper";
def mockPatientDiscoveryURL = "http://" + mockHost + ":2222/EntityPatientDiscoveryMockResponse";
def LocalHCID = context.findProperty( "LocalHCID" );
def RemoteHCID = context.findProperty("PDRespondingHCID");

FileUtils.CreateOrUpdateConnection(destConfigFileLocation, RemoteHCID, "PatientDiscovery", patientdiscoveryURL, context, log)
FileUtils.CreateOrUpdateConnection(destConfigFileLocation, RemoteHCID, "mockpatientdiscovery", mockPatientDiscoveryURL, context, log)</script></con:config></con:testStep><con:testStep type="request" name="EntityPatientDiscoveryRequest"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>EntityPatientDiscoveryBindingSoap</con:interface><con:operation>RespondingGateway_PRPA_IN201305UV02</con:operation><con:request name="EntityPatientDiscoveryRequest"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://localhost:8080/CONNECTGateway/EntityPatientDiscovery</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope" xmlns:urn="urn:hl7-org:v3" xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
   <soapenv:Header/>
   <soapenv:Body>
      <urn:RespondingGateway_PRPA_IN201305UV02Request>
         <urn:PRPA_IN201305UV02 ITSVersion="XML_1.0">
            <urn:id root="1.1" extension="-5a3e95b1:11d1fa33d45:-7f9b"/>
            <urn:creationTime value="20091116084800"/>
            <urn:interactionId root="2.16.840.1.113883.1.6" extension="PRPA_IN201305UV02"/>
            <urn:processingCode code="T"/>
            <urn:processingModeCode code="I"/>
            <urn:acceptAckCode code="AL"/>
            <urn:receiver typeCode="RCV">
               <urn:device classCode="DEV" determinerCode="INSTANCE">
                  <urn:id root="${#Project#PDRespondingHCID}"/>
                  <urn:asAgent classCode="AGNT">
                     <urn:representedOrganization classCode="ORG" determinerCode="INSTANCE">
                        <urn:id root="${#Project#PDRespondingHCID}"/>
                     </urn:representedOrganization>
                  </urn:asAgent>
               </urn:device>
            </urn:receiver>
            <urn:sender typeCode="SND">
               <urn:device classCode="DEV" determinerCode="INSTANCE">
                  <urn:id root="1.2.345.678.999"/>
                  <urn:asAgent classCode="AGNT">
                     <urn:representedOrganization classCode="ORG" determinerCode="INSTANCE">
                        <urn:id root="${#Project#LocalHCID}"/>
                     </urn:representedOrganization>
                  </urn:asAgent>
               </urn:device>
            </urn:sender>
            <urn:controlActProcess classCode="CACT" moodCode="EVN">
               <code code="PRPA_TE201305UV02" codeSystem="2.16.840.1.113883.1.6"/>
               <urn:authorOrPerformer typeCode="AUT">
                  <urn:assignedDevice>
                     <urn:id root="${#Project#PDAssignAuthID}"/>
                  </urn:assignedDevice>
               </urn:authorOrPerformer>
               <urn:queryByParameter>
                  <urn:queryId root="2.2" extension="-abd3453dcd24wkkks545"/>
                  <urn:statusCode code="new"/>
                  <urn:responseModalityCode code="R"/>
                  <urn:responsePriorityCode code="I"/>
                  <urn:parameterList>
                     <urn:livingSubjectAdministrativeGender>
                        <urn:value code="${#Project#PDlivingSubjectAdministrativeGender}"/>
                        <urn:semanticsText representation="TXT">LivingSubject.administrativeGender</urn:semanticsText>
                     </urn:livingSubjectAdministrativeGender>
                     <urn:livingSubjectBirthTime>
                        <urn:value value="${#Project#PDlivingSubjectBirthTime}" operator="I"/>
                        <urn:semanticsText representation="TXT">LivingSubject.birthTime</urn:semanticsText>
                     </urn:livingSubjectBirthTime>
                     <urn:livingSubjectName>
                        <urn:value>
                           <urn:family partType="FAM">${#Project#SingleMatchFamilyName}</urn:family>
                           <urn:given partType="GIV">${#Project#SingleMatchGivenName}</urn:given>
                           <urn:given partType="GIV">${#Project#SingleMatchMiddleName}</urn:given>
                        </urn:value>
                        <urn:semanticsText representation="TXT">LivingSubject.name</urn:semanticsText>
                     </urn:livingSubjectName>
                     <urn:livingSubjectId>
                        <urn:value extension="123456789" root="2.16.840.1.113883.4.1"/>
                        <urn:semanticsText/>
                     </urn:livingSubjectId>
                     <urn:livingSubjectId>
                        <urn:value root="${#Project#PDAssignAuthID}" extension="${#Project#PDSubjectID}" assigningAuthorityName="?"/>
                        <urn:semanticsText representation="TXT"/>
                     </urn:livingSubjectId>
                  </urn:parameterList>
               </urn:queryByParameter>
            </urn:controlActProcess>
         </urn:PRPA_IN201305UV02>
         <urn:NhinTargetCommunities>
            <urn1:nhinTargetCommunity>
               <urn1:homeCommunity>
                  <urn1:description>desc</urn1:description>
                  <urn1:homeCommunityId>${#Project#PDRespondingHCID}</urn1:homeCommunityId>
                  <urn1:name>Name</urn1:name>
               </urn1:homeCommunity>
               <urn1:list>List</urn1:list>
               <urn1:region>Region</urn1:region>
            </urn1:nhinTargetCommunity>
         </urn:NhinTargetCommunities>
         <urn:assertion>
            <urn1:address>
               <urn1:addressType>
                  <urn1:code>W</urn1:code>
               </urn1:addressType>
               <urn1:city>Melbourne</urn1:city>
               <urn1:country>US</urn1:country>
               <urn1:state>FL</urn1:state>
               <urn1:streetAddress>123 Johnson Rd</urn1:streetAddress>
               <urn1:zipCode>12345</urn1:zipCode>
            </urn1:address>
            <urn1:dateOfBirth>19800516</urn1:dateOfBirth>
            <urn1:dateOfSignature>20080520</urn1:dateOfSignature>
            <urn1:expirationDate>20100520</urn1:expirationDate>
            <urn1:explanationNonClaimantSignature>NEEDED</urn1:explanationNonClaimantSignature>
            <urn1:haveSecondWitnessSignature>true</urn1:haveSecondWitnessSignature>
            <urn1:haveSignature>true</urn1:haveSignature>
            <urn1:haveWitnessSignature>true</urn1:haveWitnessSignature>
            <urn1:homeCommunity>
               <urn1:description>Test HCID1</urn1:description>
               <urn1:homeCommunityId>1.1</urn1:homeCommunityId>
               <urn1:name>HCID1</urn1:name>
            </urn1:homeCommunity>
            <urn1:personName>
               <urn1:familyName>Winslet</urn1:familyName>
               <urn1:givenName>Kate</urn1:givenName>
               <urn1:nameType>
                  <urn1:code>G</urn1:code>
               </urn1:nameType>
               <urn1:secondNameOrInitials>FJ</urn1:secondNameOrInitials>
               <urn1:fullName>Joe Smith</urn1:fullName>
               <urn1:prefix>Mr</urn1:prefix>
            </urn1:personName>
            <urn1:phoneNumber>
               <urn1:areaCode>123</urn1:areaCode>
               <urn1:countryCode>1</urn1:countryCode>
               <urn1:extension>1234</urn1:extension>
               <urn1:localNumber>3456789</urn1:localNumber>
               <urn1:phoneNumberType>
                  <urn1:code>W</urn1:code>
               </urn1:phoneNumberType>
            </urn1:phoneNumber>
            <urn1:purposeOfDisclosureCoded>
               <urn1:code>PUBLICHEALTH</urn1:code>
               <urn1:codeSystem>2.16.840.1.113883.3.18.7.1</urn1:codeSystem>
               <urn1:codeSystemName>nhin-purpose</urn1:codeSystemName>
               <urn1:codeSystemVersion>1.0</urn1:codeSystemVersion>
               <urn1:displayName>Use or disclosure of Psychotherapy Notes</urn1:displayName>
               <urn1:originalText>Use or disclosure of Psychotherapy Notes</urn1:originalText>
            </urn1:purposeOfDisclosureCoded>
            <urn1:secondWitnessAddress>
               <urn1:addressType>
                  <urn1:code>W</urn1:code>
               </urn1:addressType>
               <urn1:city>Melbourne</urn1:city>
               <urn1:country>US</urn1:country>
               <urn1:state>FL</urn1:state>
               <urn1:streetAddress>123 Johnson Rd</urn1:streetAddress>
               <urn1:zipCode>12345</urn1:zipCode>
            </urn1:secondWitnessAddress>
            <urn1:secondWitnessName>
               <urn1:familyName>Hughes</urn1:familyName>
               <urn1:givenName>Howie</urn1:givenName>
               <urn1:nameType>
                  <urn1:code>G</urn1:code>
               </urn1:nameType>
               <urn1:secondNameOrInitials>HH</urn1:secondNameOrInitials>
               <urn1:fullName>Howie Hughes</urn1:fullName>
               <urn1:prefix>Dr</urn1:prefix>
            </urn1:secondWitnessName>
            <urn1:secondWitnessPhone>
               <urn1:areaCode>123</urn1:areaCode>
               <urn1:countryCode>1</urn1:countryCode>
               <urn1:extension>1546</urn1:extension>
               <urn1:localNumber>4567892</urn1:localNumber>
               <urn1:phoneNumberType>
                  <urn1:code>W</urn1:code>
               </urn1:phoneNumberType>
            </urn1:secondWitnessPhone>
            <urn1:SSN>123456789</urn1:SSN>
            <!--1 or more repetitions:-->
            <urn1:uniquePatientId>1234^^^&amp;amp;1.1&amp;amp;ISO</urn1:uniquePatientId>
            <urn1:witnessAddress>
               <urn1:addressType>
                  <urn1:code>W</urn1:code>
               </urn1:addressType>
               <urn1:city>Frankfort</urn1:city>
               <urn1:country>US</urn1:country>
               <urn1:state>MN</urn1:state>
               <urn1:streetAddress>432 Jackson St</urn1:streetAddress>
               <urn1:zipCode>65498</urn1:zipCode>
            </urn1:witnessAddress>
            <urn1:witnessName>
               <urn1:familyName>Ugble</urn1:familyName>
               <urn1:givenName>Gary</urn1:givenName>
               <urn1:nameType>
                  <urn1:code>G</urn1:code>
               </urn1:nameType>
               <urn1:secondNameOrInitials>GU</urn1:secondNameOrInitials>
               <urn1:fullName>Gary Ugble</urn1:fullName>
               <urn1:prefix>Mr</urn1:prefix>
            </urn1:witnessName>
            <urn1:witnessPhone>
               <urn1:areaCode>987</urn1:areaCode>
               <urn1:countryCode>1</urn1:countryCode>
               <urn1:extension>6549</urn1:extension>
               <urn1:localNumber>2222222</urn1:localNumber>
               <urn1:phoneNumberType>
                  <urn1:code>H</urn1:code>
               </urn1:phoneNumberType>
            </urn1:witnessPhone>
            <urn1:userInfo>
               <urn1:personName>
                  <urn1:familyName>Anderson</urn1:familyName>
                  <urn1:givenName>Wilma</urn1:givenName>
                  <urn1:nameType>
                     <urn1:code>G</urn1:code>
                  </urn1:nameType>
                  <urn1:secondNameOrInitials>WA</urn1:secondNameOrInitials>
                  <urn1:fullName>Wilma Anderson</urn1:fullName>
                  <urn1:prefix>Mrs</urn1:prefix>
               </urn1:personName>
               <urn1:userName>wanderson</urn1:userName>
               <urn1:role>nuse</urn1:role>
               <urn1:org>
                  <urn1:description>Test HCID1</urn1:description>
                  <urn1:homeCommunityId>1.1</urn1:homeCommunityId>
                  <urn1:name>HCID1</urn1:name>
               </urn1:org>
               <!--Optional:-->
               <urn1:roleCoded>
                  <urn1:code>Code</urn1:code>
                  <urn1:codeSystem>CodeSystem</urn1:codeSystem>
                  <urn1:codeSystemName>CodeSystemName</urn1:codeSystemName>
                  <urn1:codeSystemVersion>codeSystemVersion</urn1:codeSystemVersion>
                  <urn1:displayName>displayName</urn1:displayName>
                  <urn1:originalText>originalText</urn1:originalText>
                  <!--Zero or more repetitions:-->
                  <urn1:translation/>
               </urn1:roleCoded>
            </urn1:userInfo>
            <urn1:authorized>authorized</urn1:authorized>
            <!--Optional:-->
            <urn1:claimFormRef>claimFormRef</urn1:claimFormRef>
            <!--Optional:-->
            <urn1:claimFormRaw>cid:610957193055</urn1:claimFormRaw>
            <!--Optional:-->
            <urn1:samlAuthnStatement>
               <!--Optional:-->
               <urn1:authInstant>authInstant</urn1:authInstant>
               <!--Optional:-->
               <urn1:sessionIndex>sessionIndex</urn1:sessionIndex>
               <!--Optional:-->
               <urn1:authContextClassRef>authContextClassRef</urn1:authContextClassRef>
               <!--Optional:-->
               <urn1:subjectLocalityAddress>subjectLocalityAddress</urn1:subjectLocalityAddress>
               <!--Optional:-->
               <urn1:subjectLocalityDNSName>subjectLocalityDNSName</urn1:subjectLocalityDNSName>
            </urn1:samlAuthnStatement>
            <!--Optional:-->
            <urn1:samlAuthzDecisionStatement>
               <!--Optional:-->
               <urn1:decision>decision</urn1:decision>
               <!--Optional:-->
               <urn1:resource>resource</urn1:resource>
               <!--Optional:-->
               <urn1:action>action</urn1:action>
               <!--Optional:-->
               <urn1:evidence>
                  <!--Optional:-->
                  <urn1:assertion>
                     <!--Optional:-->
                     <urn1:id>5555</urn1:id>
                     <!--Optional:-->
                     <urn1:issueInstant>issueInstant</urn1:issueInstant>
                     <!--Optional:-->
                     <urn1:version>version</urn1:version>
                     <!--Optional:-->
                     <urn1:issuer>issuer</urn1:issuer>
                     <!--Optional:-->
                     <urn1:issuerFormat>issuerFormat</urn1:issuerFormat>
                     <!--Optional:-->
                     <urn1:conditions>
                        <!--Optional:-->
                        <urn1:notBefore>notBefore</urn1:notBefore>
                        <!--Optional:-->
                        <urn1:notOnOrAfter>notOnOrAfter</urn1:notOnOrAfter>
                     </urn1:conditions>
                     <!--Optional:-->
                     <urn1:contentReference>contentReference</urn1:contentReference>
                     <!--Optional:-->
                     <urn1:contentType>contentType</urn1:contentType>
                     <!--Optional:-->
                     <urn1:content>cid:574777349023</urn1:content>
                  </urn1:assertion>
               </urn1:evidence>
            </urn1:samlAuthzDecisionStatement>
            <!--Optional:-->
            <urn1:samlSignature>
               <!--Optional:-->
               <urn1:keyInfo>
                  <!--Optional:-->
                  <urn1:rsaKeyValueModulus>cid:1157111506023</urn1:rsaKeyValueModulus>
                  <!--Optional:-->
                  <urn1:rsaKeyValueExponent>cid:136268302631</urn1:rsaKeyValueExponent>
               </urn1:keyInfo>
               <!--Optional:-->
               <urn1:signatureValue>cid:880867232879</urn1:signatureValue>
            </urn1:samlSignature>
         </urn:assertion>
      </urn:RespondingGateway_PRPA_IN201305UV02Request>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="Schema Compliance" disabled="true"><con:configuration/></con:assertion><con:assertion type="SOAP Fault Assertion"/><con:assertion type="XPath Match"><con:configuration/></con:assertion><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="mockresponse" name="NHINCProxyPatientDiscoveryMockResponse" disabled="true"><con:settings/><con:config xsi:type="con:MockResponseStep" startStep="EntityPatientDiscoveryRequest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>NhincProxyPatientDiscoveryBinding</con:interface><con:operation>Proxy_PRPA_IN201305UV</con:operation><con:path>/EntityPatientDiscoveryMockResponse</con:path><con:port>2222</con:port><con:timeout>40000</con:timeout><con:response><con:settings/><con:responseContent><![CDATA[<S:Envelope xmlns:S="http://www.w3.org/2003/05/soap-envelope">
   <S:Body>
      <ns3:PRPA_IN201306UV02 ITSVersion="XML_1.0" xmlns="http://schemas.xmlsoap.org/ws/2004/08/addressing" xmlns:ns2="urn:gov:hhs:fha:nhinc:common:nhinccommon" xmlns:ns3="urn:hl7-org:v3" xmlns:ns4="urn:gov:hhs:fha:nhinc:common:patientcorrelationfacade">
         <ns3:id extension="4191797c:1259356875e:-7c2d" root="1.1.1"/>
         <ns3:creationTime value="2009121522276"/>
         <ns3:interactionId extension="PRPA_IN201306UV" root="2.16.840.1.113883.1.6"/>
         <ns3:processingCode code="P"/>
         <ns3:processingModeCode code="R"/>
         <ns3:acceptAckCode code="AL"/>
         <ns3:receiver typeCode="RCV">
            <ns3:device determinerCode="INSTANCE" classCode="">
               <ns3:id root="1.2.345.678.999"/>
               <ns3:asAgent classCode="AGNT">
                  <ns3:representedOrganization determinerCode="INSTANCE" classCode="ORG">
                     <ns3:id/>
                  </ns3:representedOrganization>
               </ns3:asAgent>
            </ns3:device>
         </ns3:receiver>
         <ns3:sender typeCode="SND">
            <ns3:device determinerCode="INSTANCE" classCode="">
               <ns3:id root="1.2.345.678.999"/>
               <ns3:asAgent classCode="AGNT">
                  <ns3:representedOrganization determinerCode="INSTANCE" classCode="ORG">
                     <ns3:id/>
                  </ns3:representedOrganization>
               </ns3:asAgent>
            </ns3:device>
         </ns3:sender>
         <ns3:acknowledgement>
            <ns3:typeId extension="PRPA_IN201305UV02" root="2.16.840.1.113883.1.6"/>
            <ns3:typeCode code="AA"/>
            <ns3:targetMessage xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
         </ns3:acknowledgement>
         <ns3:controlActProcess moodCode="EVN" classCode="">
            <ns3:code codeSystem="2.16.840.1.113883.1.6" code="PRPA_TE201306UV"/>
            <ns3:subject typeCode="SUBJ">
               <ns3:registrationEvent moodCode="" classCode="">
                  <ns3:id nullFlavor="NA"/>
                  <ns3:statusCode code="active"/>
                  <ns3:subject1 typeCode="">
                     <ns3:patient classCode="PAT">
                        <ns3:id extension="1234" root="2.2.2"/>
                        <ns3:statusCode code="SD"/>
                        <ns3:patientPerson>
                           <ns3:name>
                              <ns3:family partType="FAM">Smith</ns3:family>
                              <ns3:given partType="GIV">Joe</ns3:given>
                           </ns3:name>
                           <ns3:administrativeGenderCode code="M"/>
                           <ns3:birthTime value="19560301"/>
                           <ns3:addr>
                              <ns3:city>Orlando</ns3:city>
                              <ns3:state>FL</ns3:state>
                              <ns3:postalCode>98765</ns3:postalCode>
                           </ns3:addr>
                        </ns3:patientPerson>
                        <ns3:providerOrganization determinerCode="" classCode="">
                           <ns3:id root="2.2.2"/>
                           <ns3:contactParty xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
                        </ns3:providerOrganization>
                        <ns3:subjectOf1>
                           <ns3:queryMatchObservation moodCode="" classCode="">
                              <ns3:code code="IHE_PDQ"/>
                              <ns3:value xsi:type="ns3:INT" value="100" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
                           </ns3:queryMatchObservation>
                        </ns3:subjectOf1>
                     </ns3:patient>
                  </ns3:subject1>
                  <ns3:custodian typeCode="">
                     <ns3:assignedEntity classCode="">
                        <ns3:id root="2.2.2"/>
                     </ns3:assignedEntity>
                  </ns3:custodian>
               </ns3:registrationEvent>
            </ns3:subject>
            <ns3:queryAck>
               <ns3:queryId extension="-abd3453dcd24wkkks545" root="1.1"/>
               <ns3:queryResponseCode code="OK"/>
               <ns3:resultTotalQuantity value="1"/>
               <ns3:resultCurrentQuantity value="1"/>
               <ns3:resultRemainingQuantity value="0"/>
            </ns3:queryAck>
            <ns3:queryByParameter xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
         </ns3:controlActProcess>
      </ns3:PRPA_IN201306UV02>
   </S:Body>
</S:Envelope>]]></con:responseContent><con:wsaConfig mustUnderstand="NONE" version="200508"/></con:response><con:assertion type="XPath Match" name="SingleMatchGivenName"><con:configuration><path>declare namespace ns3='urn:hl7-org:v3';
//ns3:Proxy_PRPA_IN201305UVProxyRequest[1]/ns3:PRPA_IN201305UV02[1]/ns3:controlActProcess[1]/ns3:queryByParameter[1]/ns3:parameterList[1]/ns3:livingSubjectName[1]/ns3:value[1]/ns3:given[1]</path><content>Joe</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:assertion type="XPath Match" name="SingleMatchFamilyName"><con:configuration><path>declare namespace ns3='urn:hl7-org:v3';
//ns3:Proxy_PRPA_IN201305UVProxyRequest[1]/ns3:PRPA_IN201305UV02[1]/ns3:controlActProcess[1]/ns3:queryByParameter[1]/ns3:parameterList[1]/ns3:livingSubjectName[1]/ns3:value[1]/ns3:family[1]</path><content>Smith</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:host/></con:config></con:testStep><con:testStep type="mockresponse" name="Policy Engine Mock">
				<con:settings/>
				<con:config xsi:type="con:MockResponseStep" startStep="EntityPatientDiscoveryRequest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:interface>AdapterPolicyEngineBindingSoap</con:interface>
					<con:operation>CheckPolicy</con:operation>
					<con:path>/mockPE</con:path>
					<con:port>2200</con:port>
					<con:timeout>30000</con:timeout>
					<con:response>
						<con:settings/>
						<con:responseContent><![CDATA[<S:Envelope xmlns:S="http://www.w3.org/2003/05/soap-envelope">
   <S:Body>
      <ns15:CheckPolicyResponse xmlns:ns2="urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0" xmlns:ns3="urn:oasis:names:tc:ebxml-regrep:xsd:rs:3.0" xmlns:ns4="urn:oasis:names:tc:ebxml-regrep:xsd:lcm:3.0" xmlns:ns5="urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0" xmlns:ns6="http://www.hhs.gov/healthit/nhin/cdc" xmlns:ns7="http://nhinc.services.com/schema/auditmessage" xmlns:ns8="http://www.w3.org/2005/08/addressing" xmlns:ns9="http://docs.oasis-open.org/wsn/b-2" xmlns:ns10="urn:ihe:iti:xds-b:2007" xmlns:ns11="urn:gov:hhs:fha:nhinc:common:subscriptionb2overridefordocuments" xmlns:ns12="http://docs.oasis-open.org/wsrf/bf-2" xmlns:ns13="http://docs.oasis-open.org/wsn/t-1" xmlns:ns14="urn:oasis:names:tc:xacml:2.0:policy:schema:os" xmlns:ns15="urn:gov:hhs:fha:nhinc:common:nhinccommonadapter" xmlns:ns16="urn:gov:hhs:fha:nhinc:common:nhinccommon" xmlns:ns17="urn:gov:hhs:fha:nhinc:common:subscriptionb2overrideforcdc" xmlns:ns18="urn:oasis:names:tc:xacml:2.0:context:schema:os" xmlns:ns19="http://schemas.xmlsoap.org/ws/2004/08/addressing">
         <ns15:response>
            <ns18:Result>
               <ns18:Decision>Permit</ns18:Decision>
            </ns18:Result>
         </ns15:response>
      </ns15:CheckPolicyResponse>
   </S:Body>
</S:Envelope>]]></con:responseContent>
						<con:wsaConfig mustUnderstand="NONE" version="200508"/>
					</con:response>
					<con:assertion type="GroovyScriptAssertion" name="AuthnStatementAuthnInstant ">
						<con:configuration><scriptText>def FieldName='authInstant';
def AssertionXpath='//ec:assertion/nc:samlAuthnStatement/nc:authInstant'
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authn-statement:auth-instant';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
</scriptText></con:configuration>
					</con:assertion>
					<con:assertion type="GroovyScriptAssertion" name="AuthnStatementSessionIndex">
						<con:configuration><scriptText>def FieldName='sessionIndex';
def AssertionXpath='//ec:assertion/nc:samlAuthnStatement/nc:sessionIndex';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authn-statement:session-index';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
</scriptText></con:configuration>
					</con:assertion>
					<con:assertion type="GroovyScriptAssertion" name="AuthnStatementAthnContextClassRef ">
						<con:configuration><scriptText>def FieldName='authContextClassRef';
def AssertionXpath='//ec:assertion/nc:samlAuthnStatement/nc:authContextClassRef';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authn-statement:auth-context-class-ref';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
</scriptText></con:configuration>
					</con:assertion>
					<con:assertion type="GroovyScriptAssertion" name="AuthnStatementSubjectLocalityAddress ">
						<con:configuration><scriptText>def FieldName='subjectLocalityAddress';
def AssertionXpath='//ec:assertion/nc:samlAuthnStatement/nc:subjectLocalityAddress';
def XacmlAttributeId='urn:oasis:names:tc:xacml:1.0:subject:authn-locality:ip-address';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
</scriptText></con:configuration>
					</con:assertion>
					<con:assertion type="GroovyScriptAssertion" name="AuthnStatementDNSName ">
						<con:configuration><scriptText>def FieldName='subjectLocalityDNSName';
def AssertionXpath='//ec:assertion/nc:samlAuthnStatement/nc:subjectLocalityDNSName';
def XacmlAttributeId='urn:oasis:names:tc:xacml:1.0:subject:authn-locality:dns-name';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
</scriptText></con:configuration>
					</con:assertion>
					<con:assertion type="GroovyScriptAssertion" name="UserPersonName">
						<con:configuration><scriptText>def FieldName='personname';
def AssertionXpath='//ec:assertion/nc:userInfo/nc:userName';
def XacmlAttributeId='urn:oasis:names:tc:xacml:1.0:subject:subject-id';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
</scriptText></con:configuration>
					</con:assertion>
					<con:assertion type="GroovyScriptAssertion" name="UserOrganizationName">
						<con:configuration><scriptText>def FieldName='user organization';
def AssertionXpath='//ec:assertion/nc:userInfo/nc:org/nc:name';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:user-organization-name';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
</scriptText></con:configuration>
					</con:assertion>
					<con:assertion type="GroovyScriptAssertion" name="UserRoleCode">
						<con:configuration><scriptText>def FieldName='user role coded';
def AssertionXpath='//ec:assertion/nc:userInfo/nc:roleCoded/nc:code';
//def XacmlAttributeId='urn:gov:hhs:fha:nhinc:user-role-code';
def XacmlAttributeId='urn:oasis:names:tc:xacml:2.0:subject:role';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
</scriptText></con:configuration>
					</con:assertion>
					<con:assertion type="GroovyScriptAssertion" name="UserRoleCodeSystem ">
						<con:configuration><scriptText>def FieldName='user role system';
def AssertionXpath='//ec:assertion/nc:userInfo/nc:roleCoded/nc:codeSystem';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:user-role-code-system';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
</scriptText></con:configuration>
					</con:assertion>
					<con:assertion type="GroovyScriptAssertion" name="UserRoleCodeSystemName ">
						<con:configuration><scriptText>def FieldName='user role system name';
def AssertionXpath='//ec:assertion/nc:userInfo/nc:roleCoded/nc:codeSystemName';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:user-role-code-system-name';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
</scriptText></con:configuration>
					</con:assertion>
					<con:assertion type="GroovyScriptAssertion" name="UserRoleCodeDiplayName ">
						<con:configuration><scriptText>def FieldName='user role display name';
def AssertionXpath='//ec:assertion/nc:userInfo/nc:roleCoded/nc:displayName';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:user-role-description';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
</scriptText></con:configuration>
					</con:assertion>
					<con:assertion type="GroovyScriptAssertion" name="PurposeForUseCode">
						<con:configuration><scriptText>def FieldName='PurposeForUseCode';
def AssertionXpath='//ec:assertion/nc:purposeOfDisclosureCoded/nc:code';
//def XacmlAttributeId='urn:gov:hhs:fha:nhinc:purpose-of-use-code';
def XacmlAttributeId='urn:oasis:names:tc:xspa:1.0:subject:purposeofuse';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
</scriptText></con:configuration>
					</con:assertion>
					<con:assertion type="GroovyScriptAssertion" name="PurposeForUseCodeSystem">
						<con:configuration><scriptText>def FieldName='PurposeForUseCodeSystem';
def AssertionXpath='//ec:assertion/nc:purposeOfDisclosureCoded/nc:codeSystem';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:purpose-of-use-code-system';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
</scriptText></con:configuration>
					</con:assertion>
					<con:assertion type="GroovyScriptAssertion" name="PurposeForUseCodeSystemName">
						<con:configuration><scriptText>def FieldName='PurposeForUseCodeSystemName';
def AssertionXpath='//ec:assertion/nc:purposeOfDisclosureCoded/nc:codeSystemName';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:purpose-of-use-code-system-name';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
</scriptText></con:configuration>
					</con:assertion>
					<con:assertion type="GroovyScriptAssertion" name="PurposeForUseCodeDisplayName">
						<con:configuration><scriptText>def FieldName='PurposeForUseCodeDisplayName';
def AssertionXpath='//ec:assertion/nc:purposeOfDisclosureCoded/nc:displayName';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:purpose-of-use-display-name';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
</scriptText></con:configuration>
					</con:assertion>
					<con:assertion type="GroovyScriptAssertion" name="AuthzDecisionStatementDecision">
						<con:configuration><scriptText>def FieldName='AuthzDecisionStatementDecision';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:decision';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-decision';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
</scriptText></con:configuration>
					</con:assertion>
					<con:assertion type="GroovyScriptAssertion" name="AuthzDecisionStatementResource">
						<con:configuration><scriptText>def FieldName='AuthzDecisionStatementResource';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:resource';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-resource';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
</scriptText></con:configuration>
					</con:assertion>
					<con:assertion type="GroovyScriptAssertion" name="AuthzDecisionStatementAction">
						<con:configuration><scriptText>def FieldName='AuthzDecisionStatementAction';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:action';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-action';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
//log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);
def ExpectedValue='action';
//log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (ExpectedValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
</scriptText></con:configuration>
					</con:assertion>
					<con:assertion type="GroovyScriptAssertion" name="AuthzDecisionStatementEvidenceAssertionID ">
						<con:configuration><scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionID';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:id';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-id';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
</scriptText></con:configuration>
					</con:assertion>
					<con:assertion type="GroovyScriptAssertion" name="AuthzDecisionStatementEvidenceAssertionIssueInstant">
						<con:configuration><scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionIssueInstant';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:issueInstant';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-issue-instant';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
</scriptText></con:configuration>
					</con:assertion>
					<con:assertion type="GroovyScriptAssertion" name="AuthzDecisionStatementEvidenceAssertionVersion">
						<con:configuration><scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionVersion';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:version';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-version';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
</scriptText></con:configuration>
					</con:assertion>
					<con:assertion type="GroovyScriptAssertion" name="AuthzDecisionStatementEvidenceAssertionIssuer">
						<con:configuration><scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionIssuer';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:issuer';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-issuer';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
</scriptText></con:configuration>
					</con:assertion>
					<con:assertion type="GroovyScriptAssertion" name="AuthzDecisionStatementEvidenceAssertionConditionsNotBefore" disabled="true">
						<con:configuration><scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionConditionsNotBefore';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:conditions/nc:notBefore';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-not-before';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
//assert (AssertionValue==XacmlValue);
assert (XacmlValue == '2001-01-01T06:00:00.000Z')

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#date';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
</scriptText></con:configuration>
					</con:assertion>
					<con:assertion type="GroovyScriptAssertion" name="AuthzDecisionStatementEvidenceAssertionConditionsNotOnOrAfter " disabled="true">
						<con:configuration><scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionConditionsNotOnOrAfter';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:conditions/nc:notOnOrAfter';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-not-on-or-after';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
//assert (AssertionValue==XacmlValue);
assert (XacmlValue == '2009-05-07T02:00:17.000Z')

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#date';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
</scriptText></con:configuration>
					</con:assertion>
					<con:assertion type="GroovyScriptAssertion" name="AuthzDecisionStatementEvidenceAssertionContentReference " disabled="true">
						<con:configuration><scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionContentReference';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:contentReference';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-content-reference';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
</scriptText></con:configuration>
					</con:assertion>
					<con:assertion type="GroovyScriptAssertion" name="AuthzDecisionStatementEvidenceAssertionContentType " disabled="true">
						<con:configuration><scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionContentType';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:contentType';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-content-type';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
</scriptText></con:configuration>
					</con:assertion>
					<con:assertion type="GroovyScriptAssertion" name="AuthzDecisionStatementEvidenceAssertionContent " disabled="true">
						<con:configuration><scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionContent';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:content';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-content';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
</scriptText></con:configuration>
					</con:assertion>
				<con:assertion type="GroovyScriptAssertion" name="HomeCommunityId"><con:configuration><scriptText>def FieldName='home-community-id';
def AssertionXpath='//ec:RespondingGateway_PRPA_IN201305UV02Request[1]/ec:PRPA_IN201305UV02[1]/ec:receiver[1]/ec:device[1]/ec:id[1]/@root';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:home-community-id';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("EntityPatientDiscoveryRequest");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:hl7-org:v3';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
if (AssertionValue[0..2] == '${#') AssertionValue = context.expand(AssertionValue);
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def MockXPath = "//xacml:Resource/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']";

def XacmlAttributeCount = mockRequestHolder["count(" + MockXPath + ")"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Resource/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Resource/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="OrganizationId"><con:configuration><scriptText>def FieldName='organizationid';
def AssertionXpath='//ec:assertion/nc:userInfo/nc:org/nc:homeCommunityId';
def XacmlAttributeId='urn:oasis:names:tc:xspa:1.0:subject:organization-id';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#anyURI';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="PatientId" disabled="true"><con:configuration><scriptText>def FieldName='PatientId';
def XacmlAttributeId='http://www.hhs.gov/healthit/nhin#subject-id';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';
mockRequestHolder.namespaces['hl7'] = 'urn:hl7-org:v3';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Resource/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValueExtension = mockRequestHolder["//xacml:Resource/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue/hl7:PatientId/@extension"]
def ExpectedExtension = '1234';
log.info('XacmlAttributeValue(' + FieldName + '@extension)=' + XacmlValueExtension);
//log.info('XacmlAttributeValue(' + FieldName + '@extension) == ' + 'AssertionValue(' + FieldName + '@extension) => ' + (AssertionValue==XacmlValueExtension));
assert(XacmlValueExtension==ExpectedExtension);

def XacmlValueRoot = mockRequestHolder["//xacml:Resource/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue/hl7:PatientId/@root"]
def ExpectedRoot = '2.2.2';
log.info('XacmlAttributeValue(' + FieldName + '@root)=' + XacmlValueRoot);
//log.info('XacmlAttributeValue(' + FieldName + '@extension) == ' + 'AssertionValue(' + FieldName + '@extension) => ' + (AssertionValue==XacmlValueExtension));
assert(XacmlValueRoot==ExpectedRoot);

def ActualDataType = mockRequestHolder["//xacml:Resource/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'urn:hl7-org:v3#II';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="AuthzDecisionStatementEvidenceAssertionAccessConsent" disabled="true"><con:configuration><scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionAccessConsent';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:accessConsentPolicy';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-access-consent';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#anyURI';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="AuthzDecisionStatementEvidenceAssertionInstanceAccessConsent" disabled="true"><con:configuration><scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionInstanceAccessConsent';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:instanceAccessConsentPolicy';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-instance-access-consent';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#anyURI';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" disabled="true"><con:configuration><path>declare namespace ns19='urn:oasis:names:tc:xacml:2.0:context:schema:os';
declare namespace ns18='urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
//ns18:CheckPolicyRequest[1]/ns18:request[1]/ns19:Subject[2]/ns19:Attribute[1]/@AttributeId</path><content>urn:gov:hhs:fha:nhinc:home-community-id</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:assertion type="XPath Match" name="local patient id"><con:configuration><path>declare namespace xacml='urn:oasis:names:tc:xacml:2.0:context:schema:os';
declare namespace adapter='urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
//xacml:Resource/xacml:Attribute[@AttributeId='urn:oasis:names:tc:xacml:1.0:resource:resource-id']/xacml:AttributeValue</path><content>1234</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="ResourceID"><con:configuration><scriptText>def FieldName='resource:resource-id';
def AssertionXpath='//ec:RespondingGateway_PRPA_IN201305UV02Request[1]/ec:PRPA_IN201305UV02[1]/ec:controlActProcess[1]/ec:queryByParameter[1]/ec:parameterList[1]/ec:livingSubjectId[2]/ec:value[1]/@extension';
				
def XacmlAttributeId='urn:oasis:names:tc:xacml:1.0:resource:resource-id';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("EntityPatientDiscoveryRequest");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:hl7-org:v3';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
if (AssertionValue[0..2] == '${#') AssertionValue = context.expand(AssertionValue);
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Resource/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Resource/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Resource/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="AssigningAuthority"><con:configuration><scriptText>def FieldName='assigning-authority-id';
//def AssertionXpath='//ec:RespondingGateway_PRPA_IN201305UV02Request[1]/ec:PRPA_IN201305UV02[1]/ec:controlActProcess[1]/ec:authorOrPerformer[1]/ec:assignedDevice[1]/ec:id[1]/@root';
def AssertionXpath='//ec:RespondingGateway_PRPA_IN201305UV02Request[1]/ec:PRPA_IN201305UV02[1]/ec:controlActProcess[1]/ec:queryByParameter[1]/ec:parameterList[1]/ec:livingSubjectId[2]/ec:value[1]/@root';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:assigning-authority-id';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("EntityPatientDiscoveryRequest");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:hl7-org:v3';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
if (AssertionValue[0..2] == '${#') AssertionValue = context.expand(AssertionValue);

log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Resource/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Resource/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Resource/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText></con:configuration></con:assertion></con:config>
			</con:testStep><con:testStep type="groovy" name="count correlations (1)"><con:settings/><con:config><script>
def patId = context.findProperty('PDSubjectID')
context.withSql('PatientCorrelationDB') { sql -> 
  assert 1 == sql.firstRow("select count(*) from " + context.findProperty('PatientCorrelationTable') + " where PatientId = '" + patId + "'")[0]
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Count AA Mapping (2)"><con:settings/><con:config><script>context.withSql('AAmappingDB') { sql -> 
  assert 2 == sql.firstRow("select count(*) from " + context.findProperty('AAmappingTable'))[0]
}
</script></con:config></con:testStep><con:properties><con:property><con:name>startDate</con:name><con:value>2010-07-06T00:00:00Z</con:value></con:property><con:property><con:name>endDate</con:name><con:value>2010-07-06T18:03:30Z</con:value></con:property><con:property><con:name>sigDate</con:name><con:value>07/06/2010 00:00:00</con:value></con:property><con:property><con:name>expireDate</con:name><con:value>2010-08-05T00:00:00Z</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PatientDiscoveryWithSSNVerifyMode - Patch 219" searchProperties="true" disabled="true"><con:settings/><con:testStep type="properties" name="EntityPatientDiscovery Test Case Properties" disabled="true"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" createMissingOnLoad="true" discardValuesOnSave="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:source>C:/Projects/NHINC/Current/Product/SoapUI_Test/RegressionSuite/EntityPatientDiscovery.properties</con:source><con:target/><con:properties><con:property><con:name>LocalAA</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>LocalHCIDescription</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>LocalHCID</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PatientDiscoveryEndpoint</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDSubjectID</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDzipCode</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDRespondingAA</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDRespondingHCID</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDpurposeOfDisclosure</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDSSN</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDdOB</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDexpirationDate</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDuniquePatientId</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDstreetAddress</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDstate</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDCity</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDcountry</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDdateOfSignature</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDRespondingHCDesc</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDRespondingHCName</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDlivingSubjectAdministrativeGender</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDlivingSubjectBirthTime</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>LocalHCIDName</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PDAssignAuthID</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>NHINGatewayConfigDir</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>NHINGatewayHost</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>PEReceivingHCID</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>mockHost</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>SingleMatchPrefix</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>SingleMatchGivenName</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>SingleMatchFullName</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>SingleMatchFamilyName</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>SUT.PatientCorrelationHost</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>SUT.PatientCorrelationPort</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>SUT.PatientCorrelationDB</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>SUT.PatientCorrelationUser</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>SUT.PatientCorrelationPass</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>SUT.PatientCorrelationTable</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>NoMatchPrefix</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>NoMatchGivenName</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>NoMatchFullName</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>NoMatchFamilyName</con:name><con:value xsi:nil="true"/></con:property></con:properties></con:config></con:testStep><con:testStep type="transfer" name="EntityPatientDiscovery Property Transfer" disabled="true"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>PatientDiscoveryEndPoint</con:name><con:sourceType>PatientDiscoveryEndpoint</con:sourceType><con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep><con:targetType>Endpoint</con:targetType><con:targetStep>EntityPatientDiscoveryRequest</con:targetStep><con:targetPath/></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferChildNodes="false" useXQuery="false" ignoreEmpty="false" entitize="false" transferToAll="false"><con:name>LocalHCID</con:name><con:sourceType>LocalHCID</con:sourceType><con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep><con:targetType>Request</con:targetType><con:targetStep>EntityPatientDiscoveryRequest</con:targetStep><con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:sender[1]/urn:device[1]/urn:asAgent[1]/urn:representedOrganization[1]/urn:id[1]/@root</con:targetPath></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferChildNodes="false" transferToAll="false" ignoreEmpty="false" useXQuery="false" entitize="false"><con:name>ReceivingHCID</con:name><con:sourceType>PDRespondingHCID</con:sourceType><con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep><con:targetType>Request</con:targetType><con:targetStep>EntityPatientDiscoveryRequest</con:targetStep><con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:receiver[1]/urn:device[1]/urn:id[1]/@root</con:targetPath></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" transferToAll="false"><con:name>PDQueryRequestHCID</con:name><con:sourceType>LocalHCID</con:sourceType><con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep><con:targetType>Request</con:targetType><con:targetStep>EntityPatientDiscoveryRequest</con:targetStep><con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:sender[1]/urn:device[1]/urn:asAgent[1]/urn:representedOrganization[1]/urn:id[1]/@root</con:targetPath></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false"><con:name>PDQueryRequestSubjectGivenName</con:name><con:sourceType>SingleMatchGivenName</con:sourceType><con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep><con:targetType>Request</con:targetType><con:targetStep>EntityPatientDiscoveryRequest</con:targetStep><con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:controlActProcess[1]/urn:queryByParameter[1]/urn:parameterList[1]/urn:livingSubjectName[1]/urn:value[1]/urn:given[1]</con:targetPath></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" ignoreEmpty="false" transferToAll="false" useXQuery="false" transferChildNodes="false"><con:name>PDQueryRequestSubjectFamName</con:name><con:sourceType>SingleMatchFamilyName</con:sourceType><con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep><con:sourcePath xsi:nil="true"/><con:targetType>Request</con:targetType><con:targetStep>EntityPatientDiscoveryRequest</con:targetStep><con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:controlActProcess[1]/urn:queryByParameter[1]/urn:parameterList[1]/urn:livingSubjectName[1]/urn:value[1]/urn:family[1]</con:targetPath></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" transferToAll="false" ignoreEmpty="false" useXQuery="false" transferChildNodes="false"><con:name>PDQueryRequestSubjectBirthTime</con:name><con:sourceType>PDlivingSubjectBirthTime</con:sourceType><con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep><con:targetType>Request</con:targetType><con:targetStep>EntityPatientDiscoveryRequest</con:targetStep><con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:controlActProcess[1]/urn:queryByParameter[1]/urn:parameterList[1]/urn:livingSubjectBirthTime[1]/urn:value[1]/@value</con:targetPath></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" ignoreEmpty="false" transferToAll="false" useXQuery="false" transferChildNodes="false"><con:name>PDQueryRequestSubjectGender</con:name><con:sourceType>PDlivingSubjectAdministrativeGender</con:sourceType><con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep><con:sourcePath xsi:nil="true"/><con:targetType>Request</con:targetType><con:targetStep>EntityPatientDiscoveryRequest</con:targetStep><con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:controlActProcess[1]/urn:queryByParameter[1]/urn:parameterList[1]/urn:livingSubjectAdministrativeGender[1]/urn:value[1]/@code</con:targetPath></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferToAll="false" entitize="false" ignoreEmpty="false" useXQuery="false" transferChildNodes="false"><con:name>AssertionSSN</con:name><con:sourceType>PDSSN</con:sourceType><con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep><con:sourcePath xsi:nil="true"/><con:targetType>Request</con:targetType><con:targetStep>EntityPatientDiscoveryRequest</con:targetStep><con:targetPath>declare namespace urn1='urn:gov:hhs:fha:nhinc:common:nhinccommon';
declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:assertion[1]/urn1:SSN[1]</con:targetPath></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferToAll="false" entitize="false" ignoreEmpty="false" useXQuery="false" transferChildNodes="false"><con:name>AssertionUniquePatientID</con:name><con:sourceType>PDuniquePatientId</con:sourceType><con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep><con:sourcePath xsi:nil="true"/><con:targetType>Request</con:targetType><con:targetStep>EntityPatientDiscoveryRequest</con:targetStep><con:targetPath>declare namespace urn1='urn:gov:hhs:fha:nhinc:common:nhinccommon';
declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:assertion[1]/urn1:uniquePatientId[1]</con:targetPath></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>PDAssignAuthId</con:name><con:sourceType>PDAssignAuthID</con:sourceType><con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep><con:targetType>Request</con:targetType><con:targetStep>EntityPatientDiscoveryRequest</con:targetStep><con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:controlActProcess[1]/urn:authorOrPerformer[1]/urn:assignedDevice[1]/urn:id[1]/@root</con:targetPath></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>PDQueryReqSubjectAssignAuthID</con:name><con:sourceType>PDAssignAuthID</con:sourceType><con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep><con:targetType>Request</con:targetType><con:targetStep>EntityPatientDiscoveryRequest</con:targetStep><con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:controlActProcess[1]/urn:queryByParameter[1]/urn:parameterList[1]/urn:livingSubjectId[1]/urn:value[1]/@root</con:targetPath></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" useXQuery="false" transferChildNodes="false" transferToAll="false" ignoreEmpty="false"><con:name>PDQueryRequestSubjectID</con:name><con:sourceType>PDSubjectID</con:sourceType><con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep><con:targetType>Request</con:targetType><con:targetStep>EntityPatientDiscoveryRequest</con:targetStep><con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:controlActProcess[1]/urn:queryByParameter[1]/urn:parameterList[1]/urn:livingSubjectId[1]/urn:value[1]/@extension</con:targetPath></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferToAll="false" ignoreEmpty="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>AssertionHCID</con:name><con:sourceType>LocalHCID</con:sourceType><con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep><con:sourcePath xsi:nil="true"/><con:targetType>Request</con:targetType><con:targetStep>EntityPatientDiscoveryRequest</con:targetStep><con:targetPath>declare namespace urn1='urn:gov:hhs:fha:nhinc:common:nhinccommon';
declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:assertion[1]/urn1:homeCommunity[1]/urn1:homeCommunityId[1]</con:targetPath></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" transferToAll="false"><con:name>AssertionHCIDDesc</con:name><con:sourceType>LocalHCIDescription</con:sourceType><con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep><con:sourcePath xsi:nil="true"/><con:targetType>Request</con:targetType><con:targetStep>EntityPatientDiscoveryRequest</con:targetStep><con:targetPath>declare namespace urn1='urn:gov:hhs:fha:nhinc:common:nhinccommon';
declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:assertion[1]/urn1:homeCommunity[1]/urn1:description[1]</con:targetPath></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>AssertionHCIDname</con:name><con:sourceType>LocalHCIDName</con:sourceType><con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep><con:sourcePath xsi:nil="true"/><con:targetType>Request</con:targetType><con:targetStep>EntityPatientDiscoveryRequest</con:targetStep><con:targetPath>declare namespace urn1='urn:gov:hhs:fha:nhinc:common:nhinccommon';
declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:assertion[1]/urn1:homeCommunity[1]/urn1:name[1]</con:targetPath></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Intialize Configurations"><con:settings/><con:config><script>FileUtils.InitializeNHINCProperties(context, log);
</script></con:config></con:testStep><con:testStep type="groovy" name="Set Response Mode"><con:settings/><con:config><script>//def dataSource = testRunner.testCase.getTestStepByName( "EntityPatientDiscovery Test Case Properties" );
//def destDir = dataSource.getPropertyValue( "NHINGatewayConfigDir" );
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

def destConfigFileLocation = context.findProperty("NHINGatewayConfigDir");
FileUtils.UpdateProperty(destConfigFileLocation, 'gateway.properties', 'patientDiscoveryResponseMode', 'Verify',context,log)</script></con:config></con:testStep><con:testStep type="groovy" name="clear correlations table"><con:settings/><con:config><script>context.withSql('PatientCorrelationDB') { sql -> 
  sql.execute('delete from ' + context.findProperty('PatientCorrelationTable'))
}
</script></con:config></con:testStep><con:testStep type="groovy" name="ModifyInternalConnectionInfoUsingTestHelper"><con:settings/><con:config><script>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );
def destConfigFileLocation = System.env['NHINC_PROPERTIES_DIR'];
def NHINGatewayHost = context.findProperty("NHINGatewayHost");//**** Redbox (remove later)

def mockHost = context.findProperty("mockHost");
def patientdiscoveryURL = "https://" + NHINGatewayHost + ":8181/CONNECTGatewayTest/NhinPatientDiscoveryTestHelper";
def mockPatientDiscoveryURL = "http://" + mockHost + ":2222/EntityPatientDiscoveryMockResponse";
def LocalHCID = context.findProperty( "LocalHCID" );
def RemoteHCID = context.findProperty("PDRespondingHCID");

FileUtils.CreateOrUpdateConnection(destConfigFileLocation, RemoteHCID, "PatientDiscovery", patientdiscoveryURL, context, log)
FileUtils.CreateOrUpdateConnection(destConfigFileLocation, RemoteHCID, "mockpatientdiscovery", mockPatientDiscoveryURL, context, log)</script></con:config></con:testStep><con:testStep type="request" name="EntityPatientDiscoveryRequest"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>EntityPatientDiscoveryBindingSoap</con:interface><con:operation>RespondingGateway_PRPA_IN201305UV02</con:operation><con:request name="EntityPatientDiscoveryRequest"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://localhost:8080/CONNECTGateway/EntityPatientDiscovery</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope" xmlns:urn="urn:hl7-org:v3" xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
   <soapenv:Header/>
   <soapenv:Body>
      <urn:RespondingGateway_PRPA_IN201305UV02Request>
         <urn:PRPA_IN201305UV02 ITSVersion="XML_1.0">
            <urn:id root="1.1" extension="-5a3e95b1:11d1fa33d45:-7f9b"/>
            <urn:creationTime value="20091116084800"/>
            <urn:interactionId root="2.16.840.1.113883.1.6" extension="PRPA_IN201305UV02"/>
            <urn:processingCode code="T"/>
            <urn:processingModeCode code="I"/>
            <urn:acceptAckCode code="AL"/>
            <urn:receiver typeCode="RCV">
               <urn:device classCode="DEV" determinerCode="INSTANCE">
                  <urn:id root="2.2"/>
                  <urn:asAgent classCode="AGNT">
                     <urn:representedOrganization classCode="ORG" determinerCode="INSTANCE">
                        <urn:id root="${#Project#PDRespondingHCID}"/>
                     </urn:representedOrganization>
                  </urn:asAgent>
               </urn:device>
            </urn:receiver>
            <urn:sender typeCode="SND">
               <urn:device classCode="DEV" determinerCode="INSTANCE">
                  <urn:id root="1.2.345.678.999"/>
                  <urn:asAgent classCode="AGNT">
                     <urn:representedOrganization classCode="ORG" determinerCode="INSTANCE">
                        <urn:id root="${#Project#LocalHCID}"/>
                     </urn:representedOrganization>
                  </urn:asAgent>
               </urn:device>
            </urn:sender>
            <urn:controlActProcess classCode="CACT" moodCode="EVN">
               <code code="PRPA_TE201305UV02" codeSystem="2.16.840.1.113883.1.6"/>
               <urn:authorOrPerformer typeCode="AUT">
                  <urn:assignedDevice>
                     <urn:id root="${#Project#PDAssignAuthID}"/>
                  </urn:assignedDevice>
               </urn:authorOrPerformer>
               <urn:queryByParameter>
                  <urn:queryId root="2.2" extension="-abd3453dcd24wkkks545"/>
                  <urn:statusCode code="new"/>
                  <urn:responseModalityCode code="R"/>
                  <urn:responsePriorityCode code="I"/>
                  <urn:parameterList>
                     <urn:livingSubjectAdministrativeGender>
                        <urn:value code="${#Project#PDlivingSubjectAdministrativeGender}"/>
                        <urn:semanticsText representation="TXT">LivingSubject.administrativeGender</urn:semanticsText>
                     </urn:livingSubjectAdministrativeGender>
                     <urn:livingSubjectBirthTime>
                        <urn:value value="${#Project#PDlivingSubjectBirthTime}" operator="I"/>
                        <urn:semanticsText representation="TXT">LivingSubject.birthTime</urn:semanticsText>
                     </urn:livingSubjectBirthTime>
                     <urn:livingSubjectName>
                        <urn:value>
                           <urn:family partType="FAM">${#Project#SingleMatchFamilyName}</urn:family>
                           <urn:given partType="GIV">${#Project#SingleMatchGivenName}</urn:given>
                           <urn:given partType="GIV">${#Project#SingleMatchMiddleName}</urn:given>
                        </urn:value>
                        <urn:semanticsText representation="TXT">LivingSubject.name</urn:semanticsText>
                     </urn:livingSubjectName>
                     <urn:livingSubjectId>
                        <urn:value root="${#Project#PDAssignAuthID}" extension="${#Project#PDSubjectID}" assigningAuthorityName="?"/>
                        <urn:semanticsText representation="TXT"/>
                     </urn:livingSubjectId>
                  </urn:parameterList>
               </urn:queryByParameter>
            </urn:controlActProcess>
         </urn:PRPA_IN201305UV02>
         <urn:NhinTargetCommunities>
            <urn1:nhinTargetCommunity>
               <urn1:homeCommunity>
                  <urn1:description>desc</urn1:description>
                  <urn1:homeCommunityId>${#Project#PDRespondingHCID}</urn1:homeCommunityId>
                  <urn1:name>Name</urn1:name>
               </urn1:homeCommunity>
               <urn1:list>List</urn1:list>
               <urn1:region>Region</urn1:region>
            </urn1:nhinTargetCommunity>
         </urn:NhinTargetCommunities>
         <urn:assertion>
            <urn1:address>
               <urn1:addressType>
                  <urn1:code>W</urn1:code>
               </urn1:addressType>
               <urn1:city>Melbourne</urn1:city>
               <urn1:country>US</urn1:country>
               <urn1:state>FL</urn1:state>
               <urn1:streetAddress>123 Johnson Rd</urn1:streetAddress>
               <urn1:zipCode>12345</urn1:zipCode>
            </urn1:address>
            <urn1:dateOfBirth>19800516</urn1:dateOfBirth>
            <urn1:dateOfSignature>20080520</urn1:dateOfSignature>
            <urn1:expirationDate>20100520</urn1:expirationDate>
            <urn1:explanationNonClaimantSignature>NEEDED</urn1:explanationNonClaimantSignature>
            <urn1:haveSecondWitnessSignature>true</urn1:haveSecondWitnessSignature>
            <urn1:haveSignature>true</urn1:haveSignature>
            <urn1:haveWitnessSignature>true</urn1:haveWitnessSignature>
            <urn1:homeCommunity>
               <urn1:description>Test HCID1</urn1:description>
               <urn1:homeCommunityId>1.1</urn1:homeCommunityId>
               <urn1:name>HCID1</urn1:name>
            </urn1:homeCommunity>
            <urn1:personName>
               <urn1:familyName>Winslet</urn1:familyName>
               <urn1:givenName>Kate</urn1:givenName>
               <urn1:nameType>
                  <urn1:code>G</urn1:code>
               </urn1:nameType>
               <urn1:secondNameOrInitials>FJ</urn1:secondNameOrInitials>
               <urn1:fullName>Joe Smith</urn1:fullName>
               <urn1:prefix>Mr</urn1:prefix>
            </urn1:personName>
            <urn1:phoneNumber>
               <urn1:areaCode>123</urn1:areaCode>
               <urn1:countryCode>1</urn1:countryCode>
               <urn1:extension>1234</urn1:extension>
               <urn1:localNumber>3456789</urn1:localNumber>
               <urn1:phoneNumberType>
                  <urn1:code>W</urn1:code>
               </urn1:phoneNumberType>
            </urn1:phoneNumber>
            <urn1:purposeOfDisclosureCoded>
               <urn1:code>PUBLICHEALTH</urn1:code>
               <urn1:codeSystem>2.16.840.1.113883.3.18.7.1</urn1:codeSystem>
               <urn1:codeSystemName>nhin-purpose</urn1:codeSystemName>
               <urn1:codeSystemVersion>1.0</urn1:codeSystemVersion>
               <urn1:displayName>Use or disclosure of Psychotherapy Notes</urn1:displayName>
               <urn1:originalText>Use or disclosure of Psychotherapy Notes</urn1:originalText>
            </urn1:purposeOfDisclosureCoded>
            <urn1:secondWitnessAddress>
               <urn1:addressType>
                  <urn1:code>W</urn1:code>
               </urn1:addressType>
               <urn1:city>Melbourne</urn1:city>
               <urn1:country>US</urn1:country>
               <urn1:state>FL</urn1:state>
               <urn1:streetAddress>123 Johnson Rd</urn1:streetAddress>
               <urn1:zipCode>12345</urn1:zipCode>
            </urn1:secondWitnessAddress>
            <urn1:secondWitnessName>
               <urn1:familyName>Hughes</urn1:familyName>
               <urn1:givenName>Howie</urn1:givenName>
               <urn1:nameType>
                  <urn1:code>G</urn1:code>
               </urn1:nameType>
               <urn1:secondNameOrInitials>HH</urn1:secondNameOrInitials>
               <urn1:fullName>Howie Hughes</urn1:fullName>
               <urn1:prefix>Dr</urn1:prefix>
            </urn1:secondWitnessName>
            <urn1:secondWitnessPhone>
               <urn1:areaCode>123</urn1:areaCode>
               <urn1:countryCode>1</urn1:countryCode>
               <urn1:extension>1546</urn1:extension>
               <urn1:localNumber>4567892</urn1:localNumber>
               <urn1:phoneNumberType>
                  <urn1:code>W</urn1:code>
               </urn1:phoneNumberType>
            </urn1:secondWitnessPhone>
            <urn1:SSN>123456789</urn1:SSN>
            <!--1 or more repetitions:-->
            <urn1:uniquePatientId>1234^^^&amp;amp;1.1&amp;amp;ISO</urn1:uniquePatientId>
            <urn1:witnessAddress>
               <urn1:addressType>
                  <urn1:code>W</urn1:code>
               </urn1:addressType>
               <urn1:city>Frankfort</urn1:city>
               <urn1:country>US</urn1:country>
               <urn1:state>MN</urn1:state>
               <urn1:streetAddress>432 Jackson St</urn1:streetAddress>
               <urn1:zipCode>65498</urn1:zipCode>
            </urn1:witnessAddress>
            <urn1:witnessName>
               <urn1:familyName>Ugble</urn1:familyName>
               <urn1:givenName>Gary</urn1:givenName>
               <urn1:nameType>
                  <urn1:code>G</urn1:code>
               </urn1:nameType>
               <urn1:secondNameOrInitials>GU</urn1:secondNameOrInitials>
               <urn1:fullName>Gary Ugble</urn1:fullName>
               <urn1:prefix>Mr</urn1:prefix>
            </urn1:witnessName>
            <urn1:witnessPhone>
               <urn1:areaCode>987</urn1:areaCode>
               <urn1:countryCode>1</urn1:countryCode>
               <urn1:extension>6549</urn1:extension>
               <urn1:localNumber>2222222</urn1:localNumber>
               <urn1:phoneNumberType>
                  <urn1:code>H</urn1:code>
               </urn1:phoneNumberType>
            </urn1:witnessPhone>
            <urn1:userInfo>
               <urn1:personName>
                  <urn1:familyName>Anderson</urn1:familyName>
                  <urn1:givenName>Wilma</urn1:givenName>
                  <urn1:nameType>
                     <urn1:code>G</urn1:code>
                  </urn1:nameType>
                  <urn1:secondNameOrInitials>WA</urn1:secondNameOrInitials>
                  <urn1:fullName>Wilma Anderson</urn1:fullName>
                  <urn1:prefix>Mrs</urn1:prefix>
               </urn1:personName>
               <urn1:userName>wanderson</urn1:userName>
               <urn1:role>nuse</urn1:role>
               <urn1:org>
                  <urn1:description>Test HCID1</urn1:description>
                  <urn1:homeCommunityId>1.1</urn1:homeCommunityId>
                  <urn1:name>HCID1</urn1:name>
               </urn1:org>
               <!--Optional:-->
               <urn1:roleCoded>
                  <urn1:code>Code</urn1:code>
                  <urn1:codeSystem>CodeSystem</urn1:codeSystem>
                  <urn1:codeSystemName>CodeSystemName</urn1:codeSystemName>
                  <urn1:codeSystemVersion>codeSystemVersion</urn1:codeSystemVersion>
                  <urn1:displayName>displayName</urn1:displayName>
                  <urn1:originalText>originalText</urn1:originalText>
                  <!--Zero or more repetitions:-->
                  <urn1:translation/>
               </urn1:roleCoded>
            </urn1:userInfo>
            <urn1:authorized>authorized</urn1:authorized>
            <!--Optional:-->
            <urn1:claimFormRef>claimFormRef</urn1:claimFormRef>
            <!--Optional:-->
            <urn1:claimFormRaw>cid:610957193055</urn1:claimFormRaw>
            <!--Optional:-->
            <urn1:samlAuthnStatement>
               <!--Optional:-->
               <urn1:authInstant>authInstant</urn1:authInstant>
               <!--Optional:-->
               <urn1:sessionIndex>sessionIndex</urn1:sessionIndex>
               <!--Optional:-->
               <urn1:authContextClassRef>authContextClassRef</urn1:authContextClassRef>
               <!--Optional:-->
               <urn1:subjectLocalityAddress>subjectLocalityAddress</urn1:subjectLocalityAddress>
               <!--Optional:-->
               <urn1:subjectLocalityDNSName>subjectLocalityDNSName</urn1:subjectLocalityDNSName>
            </urn1:samlAuthnStatement>
            <!--Optional:-->
            <urn1:samlAuthzDecisionStatement>
               <!--Optional:-->
               <urn1:decision>decision</urn1:decision>
               <!--Optional:-->
               <urn1:resource>resource</urn1:resource>
               <!--Optional:-->
               <urn1:action>action</urn1:action>
               <!--Optional:-->
               <urn1:evidence>
                  <!--Optional:-->
                  <urn1:assertion>
                     <!--Optional:-->
                     <urn1:id>5555</urn1:id>
                     <!--Optional:-->
                     <urn1:issueInstant>issueInstant</urn1:issueInstant>
                     <!--Optional:-->
                     <urn1:version>version</urn1:version>
                     <!--Optional:-->
                     <urn1:issuer>issuer</urn1:issuer>
                     <!--Optional:-->
                     <urn1:issuerFormat>issuerFormat</urn1:issuerFormat>
                     <!--Optional:-->
                     <urn1:conditions>
                        <!--Optional:-->
                        <urn1:notBefore>notBefore</urn1:notBefore>
                        <!--Optional:-->
                        <urn1:notOnOrAfter>notOnOrAfter</urn1:notOnOrAfter>
                     </urn1:conditions>
                     <!--Optional:-->
                     <urn1:contentReference>contentReference</urn1:contentReference>
                     <!--Optional:-->
                     <urn1:contentType>contentType</urn1:contentType>
                     <!--Optional:-->
                     <urn1:content>cid:574777349023</urn1:content>
                  </urn1:assertion>
               </urn1:evidence>
            </urn1:samlAuthzDecisionStatement>
            <!--Optional:-->
            <urn1:samlSignature>
               <!--Optional:-->
               <urn1:keyInfo>
                  <!--Optional:-->
                  <urn1:rsaKeyValueModulus>cid:1157111506023</urn1:rsaKeyValueModulus>
                  <!--Optional:-->
                  <urn1:rsaKeyValueExponent>cid:136268302631</urn1:rsaKeyValueExponent>
               </urn1:keyInfo>
               <!--Optional:-->
               <urn1:signatureValue>cid:880867232879</urn1:signatureValue>
            </urn1:samlSignature>
         </urn:assertion>
      </urn:RespondingGateway_PRPA_IN201305UV02Request>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="Schema Compliance" disabled="true"><con:configuration/></con:assertion><con:assertion type="SOAP Fault Assertion"/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="mockresponse" name="NHINCProxyPatientDiscoveryMockResponse"><con:settings/><con:config xsi:type="con:MockResponseStep" startStep="EntityPatientDiscoveryRequest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>NhincProxyPatientDiscoveryBinding</con:interface><con:operation>Proxy_PRPA_IN201305UV</con:operation><con:path>/EntityPatientDiscoveryMockResponse</con:path><con:port>2222</con:port><con:timeout>40000</con:timeout><con:response><con:settings/><con:responseContent><![CDATA[<S:Envelope xmlns:S="http://www.w3.org/2003/05/soap-envelope">
   <S:Body>
      <ns3:PRPA_IN201306UV02 ITSVersion="XML_1.0" xmlns="http://schemas.xmlsoap.org/ws/2004/08/addressing" xmlns:ns2="urn:gov:hhs:fha:nhinc:common:nhinccommon" xmlns:ns3="urn:hl7-org:v3" xmlns:ns4="urn:gov:hhs:fha:nhinc:common:patientcorrelationfacade">
         <ns3:id extension="4191797c:1259356875e:-7c2d" root="1.1.1"/>
         <ns3:creationTime value="2009121522276"/>
         <ns3:interactionId extension="PRPA_IN201306UV" root="2.16.840.1.113883.1.6"/>
         <ns3:processingCode code="P"/>
         <ns3:processingModeCode code="R"/>
         <ns3:acceptAckCode code="AL"/>
         <ns3:receiver typeCode="RCV">
            <ns3:device determinerCode="INSTANCE" classCode="">
               <ns3:id root="1.2.345.678.999"/>
               <ns3:asAgent classCode="AGNT">
                  <ns3:representedOrganization determinerCode="INSTANCE" classCode="ORG">
                     <ns3:id/>
                  </ns3:representedOrganization>
               </ns3:asAgent>
            </ns3:device>
         </ns3:receiver>
         <ns3:sender typeCode="SND">
            <ns3:device determinerCode="INSTANCE" classCode="">
               <ns3:id root="1.2.345.678.999"/>
               <ns3:asAgent classCode="AGNT">
                  <ns3:representedOrganization determinerCode="INSTANCE" classCode="ORG">
                     <ns3:id/>
                  </ns3:representedOrganization>
               </ns3:asAgent>
            </ns3:device>
         </ns3:sender>
         <ns3:acknowledgement>
            <ns3:typeId extension="PRPA_IN201305UV02" root="2.16.840.1.113883.1.6"/>
            <ns3:typeCode code="AA"/>
            <ns3:targetMessage xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
         </ns3:acknowledgement>
         <ns3:controlActProcess moodCode="EVN" classCode="">
            <ns3:code codeSystem="2.16.840.1.113883.1.6" code="PRPA_TE201306UV"/>
            <ns3:subject typeCode="SUBJ">
               <ns3:registrationEvent moodCode="" classCode="">
                  <ns3:id nullFlavor="NA"/>
                  <ns3:statusCode code="active"/>
                  <ns3:subject1 typeCode="">
                     <ns3:patient classCode="PAT">
                        <ns3:id extension="1234" root="2.2.2"/>
                        <ns3:statusCode code="SD"/>
                        <ns3:patientPerson>
                           <ns3:name>
                              <ns3:family partType="FAM">Smith</ns3:family>
                              <ns3:given partType="GIV">Joe</ns3:given>
                           </ns3:name>
                           <ns3:administrativeGenderCode code="M"/>
                           <ns3:birthTime value="19560301"/>
                           <ns3:addr>
                              <ns3:city>Orlando</ns3:city>
                              <ns3:state>FL</ns3:state>
                              <ns3:postalCode>98765</ns3:postalCode>
                           </ns3:addr>
                        </ns3:patientPerson>
                        <ns3:providerOrganization determinerCode="" classCode="">
                           <ns3:id root="2.2.2"/>
                           <ns3:contactParty xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
                        </ns3:providerOrganization>
                        <ns3:subjectOf1>
                           <ns3:queryMatchObservation moodCode="" classCode="">
                              <ns3:code code="IHE_PDQ"/>
                              <ns3:value xsi:type="ns3:INT" value="100" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
                           </ns3:queryMatchObservation>
                        </ns3:subjectOf1>
                     </ns3:patient>
                  </ns3:subject1>
                  <ns3:custodian typeCode="">
                     <ns3:assignedEntity classCode="">
                        <ns3:id root="2.2.2"/>
                     </ns3:assignedEntity>
                  </ns3:custodian>
               </ns3:registrationEvent>
            </ns3:subject>
            <ns3:queryAck>
               <ns3:queryId extension="-abd3453dcd24wkkks545" root="1.1"/>
               <ns3:queryResponseCode code="OK"/>
               <ns3:resultTotalQuantity value="1"/>
               <ns3:resultCurrentQuantity value="1"/>
               <ns3:resultRemainingQuantity value="0"/>
            </ns3:queryAck>
            <ns3:queryByParameter xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
         </ns3:controlActProcess>
      </ns3:PRPA_IN201306UV02>
   </S:Body>
</S:Envelope>]]></con:responseContent><con:wsaConfig mustUnderstand="NONE" version="200508"/></con:response><con:assertion type="XPath Match" name="SingleMatchGivenName"><con:configuration><path>declare namespace ns3='urn:hl7-org:v3';
//ns3:Proxy_PRPA_IN201305UVProxyRequest[1]/ns3:PRPA_IN201305UV02[1]/ns3:controlActProcess[1]/ns3:queryByParameter[1]/ns3:parameterList[1]/ns3:livingSubjectName[1]/ns3:value[1]/ns3:given[1]</path><content>Joe</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:assertion type="XPath Match" name="SingleMatchFamilyName"><con:configuration><path>declare namespace ns3='urn:hl7-org:v3';
//ns3:Proxy_PRPA_IN201305UVProxyRequest[1]/ns3:PRPA_IN201305UV02[1]/ns3:controlActProcess[1]/ns3:queryByParameter[1]/ns3:parameterList[1]/ns3:livingSubjectName[1]/ns3:value[1]/ns3:family[1]</path><content>Smith</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:host/></con:config></con:testStep><con:testStep type="groovy" name="count correlations (1)"><con:settings/><con:config><script>
def patId = context.findProperty('PDSubjectID')
context.withSql('PatientCorrelationDB') { sql -> 
  assert 1 == sql.firstRow("select count(*) from " + context.findProperty('PatientCorrelationTable') + " where PatientId = '" + patId + "'")[0]
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Count AA Mapping (2)"><con:settings/><con:config><script>context.withSql('AAmappingDB') { sql -> 
  assert 2 == sql.firstRow("select count(*) from " + context.findProperty('AAmappingTable'))[0]
}
</script></con:config></con:testStep><con:properties><con:property><con:name>startDate</con:name><con:value>2010-06-22T00:00:00Z</con:value></con:property><con:property><con:name>endDate</con:name><con:value>2010-06-22T16:24:44Z</con:value></con:property><con:property><con:name>sigDate</con:name><con:value>06/22/2010 00:00:00</con:value></con:property><con:property><con:name>expireDate</con:name><con:value>2010-07-22T00:00:00Z</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:requirements/><con:properties><con:property><con:name>PDChangedRequestingGender</con:name><con:value>F</con:value></con:property><con:property><con:name>SUT.AAmappingDB</con:name><con:value>assigningauthorityDB</con:value></con:property><con:property><con:name>SUT.PatientCorrelationDB</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>PatientDiscoveryEndpoint</con:name><con:value>http://localhost:8080/CONNECTAdapter/EntityPatientDiscovery</con:value></con:property><con:property><con:name>PDRespondingAA</con:name><con:value>2.2</con:value></con:property><con:property><con:name>SUT.AAmappingTable</con:name><con:value>aa_to_home_community_mapping</con:value></con:property><con:property><con:name>LocalHCID</con:name><con:value>1.1</con:value></con:property><con:property><con:name>NHINGatewayHost</con:name><con:value>localhost</con:value></con:property><con:property><con:name>PDuniquePatientId</con:name><con:value>1234^^^&amp;amp;1.1&amp;amp;ISO</con:value></con:property><con:property><con:name>SingleMatchFamilyName</con:name><con:value>Smith</con:value></con:property><con:property><con:name>SingleMatchFullName</con:name><con:value>Joe Smith</con:value></con:property><con:property><con:name>SUT.PatientCorrelationUser</con:name><con:value>nhincuser</con:value></con:property><con:property><con:name>PDcountry</con:name><con:value>US</con:value></con:property><con:property><con:name>PDzipCode</con:name><con:value>12345</con:value></con:property><con:property><con:name>NHINGatewayConfigDir</con:name><con:value>c:/sun/appserver/domains/domain1/config/nhin</con:value></con:property><con:property><con:name>NoMatchGivenName</con:name><con:value>Kate</con:value></con:property><con:property><con:name>SingleMatchPrefix</con:name><con:value>Mr.</con:value></con:property><con:property><con:name>PDlivingSubjectAdministrativeGender</con:name><con:value>M</con:value></con:property><con:property><con:name>PDRespondingHCDesc</con:name><con:value>Test HCID2</con:value></con:property><con:property><con:name>PDstreetAddress</con:name><con:value>123 Johnson Rd</con:value></con:property><con:property><con:name>PDstate</con:name><con:value>FL</con:value></con:property><con:property><con:name>SUT.PatientCorrelationPort</con:name><con:value>3306</con:value></con:property><con:property><con:name>PDpurposeOfDisclosure</con:name><con:value>Mental</con:value></con:property><con:property><con:name>PEReceivingHCID</con:name><con:value>2.2</con:value></con:property><con:property><con:name>LocalHCIDName</con:name><con:value>HCID1</con:value></con:property><con:property><con:name>NoMatchFamilyName</con:name><con:value>Winslet</con:value></con:property><con:property><con:name>PDSSN</con:name><con:value>123456789</con:value></con:property><con:property><con:name>NoMatchFullName</con:name><con:value>Kate Winslet</con:value></con:property><con:property><con:name>PDSubjectID</con:name><con:value>1234</con:value></con:property><con:property><con:name>mockHost</con:name><con:value>localhost</con:value></con:property><con:property><con:name>PDdateOfSignature</con:name><con:value>20080520</con:value></con:property><con:property><con:name>SUT.PatientCorrelationPass</con:name><con:value>nhincpass</con:value></con:property><con:property><con:name>SUT.PatientCorrelationTable</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>SingleMatchGivenName</con:name><con:value>Joe</con:value></con:property><con:property><con:name>SUT.PatientCorrelationHost</con:name><con:value>localhost</con:value></con:property><con:property><con:name>PDexpirationDate</con:name><con:value>20100520</con:value></con:property><con:property><con:name>PDAssignAuthID</con:name><con:value>1.1.1</con:value></con:property><con:property><con:name>PDRespondingHCName</con:name><con:value>HCID2</con:value></con:property><con:property><con:name>LocalAA</con:name><con:value>1.1</con:value></con:property><con:property><con:name>PDRespondingHCID</con:name><con:value>2.2</con:value></con:property><con:property><con:name>NoMatchPrefix</con:name><con:value>Ms.</con:value></con:property><con:property><con:name>LocalHCIDescription</con:name><con:value>Test HCID1</con:value></con:property><con:property><con:name>PDCity</con:name><con:value>Melbourne</con:value></con:property><con:property><con:name>PDChangedRequestingDOB</con:name><con:value>20050101</con:value></con:property><con:property><con:name>PDdOB</con:name><con:value>19800516</con:value></con:property><con:property><con:name>PDlivingSubjectBirthTime</con:name><con:value>19630804</con:value></con:property><con:property><con:name>SingleMatchMiddleName</con:name><con:value>Middle</con:value></con:property><con:property><con:name>PatientCorrelationDB</con:name><con:value>patientcorrelationdb</con:value></con:property><con:property><con:name>PatientCorrelationTable</con:name><con:value>correlatedidentifiers</con:value></con:property><con:property><con:name>DBUser</con:name><con:value>nhincuser</con:value></con:property><con:property><con:name>DBPort</con:name><con:value>3306</con:value></con:property><con:property><con:name>DBPass</con:name><con:value>nhincpass</con:value></con:property><con:property><con:name>DBHost</con:name><con:value>localhost</con:value></con:property><con:property><con:name>AAmappingDB</con:name><con:value>assigningauthorityDB</con:value></con:property><con:property><con:name>AAmappingTable</con:name><con:value>aa_to_home_community_mapping</con:value></con:property><con:property><con:name>PDChangedSSN</con:name><con:value>023023023</con:value></con:property><con:property><con:name>PDChangedDOB</con:name><con:value>20050101</con:value></con:property><con:property><con:name>PDChangedGender</con:name><con:value>F</con:value></con:property></con:properties><con:afterLoadScript>def propertiesFile = new File(new File(project.path).parent, 'EntityPatientDiscoveryPatchMergesTo3.1-soapui-project.properties')
if (propertiesFile.exists()) {
	def props = new Properties()
	props.load(new FileReader(propertiesFile))
	props.each { key, value ->
	    project.setPropertyValue(key, value)
	}
}


TimeZone.setDefault(TimeZone.getTimeZone("UTC"))
def testRunListener = [
  afterRun: { testRunner, runContext -> },
  afterStep: { testRunner, runContext, result -> },
  beforeStep: { testRunner, runContext -> },
  beforeStep: { testRunner, runContext, testStep -> },
  beforeRun: { testRunner, runContext -> 
    use (org.codehaus.groovy.runtime.TimeCategory) {
      def startDate = 5.minutes.ago
      def endDate = 5.minutes.from.now
      def expireDate = 30.days.from.now

      def df = "yyyy-MM-dd'T'HH:mm:ss'Z'"
      def dfSig = "MM/dd/yyyy' 'HH:mm:ss"

      runContext.testCase.setPropertyValue("startDate", startDate.format(df))
      runContext.testCase.setPropertyValue("endDate", endDate.format(df))
      runContext.testCase.setPropertyValue("sigDate", startDate.format(dfSig))
      runContext.testCase.setPropertyValue("expireDate", expireDate.format(df))
    }
  }   
] as com.eviware.soapui.model.testsuite.TestRunListener

project.testSuiteList*.testCaseList.flatten()*.addTestRunListener(testRunListener)



com.eviware.soapui.impl.wsdl.testcase.WsdlTestRunContext.metaClass.findProperty = { propertyName ->
    return delegate.getProperty(propertyName) ?:
                delegate.testCase.getPropertyValue(propertyName) ?:
                delegate.testCase.testSuite.getPropertyValue(propertyName) ?:
                delegate.testCase.testSuite.project.getPropertyValue(propertyName)
}

com.eviware.soapui.impl.wsdl.testcase.WsdlTestRunContext.metaClass.withSql = { dbOrPropertyName, block ->
  def dbName = delegate.findProperty(dbOrPropertyName) ?: dbOrPropertyName
  def host = delegate.findProperty('DBHost')
  def port = delegate.findProperty('DBPort')
  def user = delegate.findProperty('DBUser')
  def pass = delegate.findProperty('DBPass')
  
  def connectString = "jdbc:mysql://${host}:${port}/${dbName}"
  log.info connectString;
  log.info user;
  log.info pass;
  def sql = groovy.sql.Sql.newInstance(connectString, user, pass, "com.mysql.jdbc.Driver");
  try {
     block(sql)
  } finally {
    sql.close()
  }
}
</con:afterLoadScript><con:wssContainer/><con:databaseConnectionContainer/><con:reporting><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:parameters/></con:reporting><con:eventHandlers type="TestSuiteRunListener.beforeTestCase" name="TestSuiteRunListener.beforeTestCase"><con:script>FileUtils.backupConfiguration(context, log);</con:script></con:eventHandlers><con:eventHandlers type="TestSuiteRunListener.afterTestCase" name="TestSuiteRunListener.afterTestCase"><con:script>FileUtils.restoreConfiguration(context, log)</con:script></con:eventHandlers></con:soapui-project>
<?xml version="1.0" encoding="UTF-8"?>
<definitions name="EntityAuditLogQuerySaml" targetNamespace="urn:gov:hhs:fha:nhinc:entityauditlogquerysaml"
xmlns="http://schemas.xmlsoap.org/wsdl/"
xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/"
xmlns:xsd="http://www.w3.org/2001/XMLSchema"
xmlns:tns="urn:gov:hhs:fha:nhinc:entityauditlogquerysaml"
xmlns:iheaudit="http://nhinc.services.com/schema/auditmessage"
xmlns:nccommonentity="urn:gov:hhs:fha:nhinc:common:nhinccommonentity"
xmlns:wsp="http://schemas.xmlsoap.org/ws/2004/09/policy"
xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd"
xmlns:wsaw="http://www.w3.org/2005/08/addressing"
xmlns:sp="http://schemas.xmlsoap.org/ws/2005/07/securitypolicy"
xmlns:sc="http://schemas.sun.com/2006/03/wss/server"
xmlns:sc1="http://schemas.sun.com/2006/03/wss/client"
xmlns:wspp="http://java.sun.com/xml/ns/wsit/policy"
xmlns:vprop="http://docs.oasis-open.org/wsbpel/2.0/varprop"
xmlns:sxnmp="http://www.sun.com/wsbpel/2.0/process/executable/SUNExtension/NMProperty"
xmlns:plnk="http://docs.oasis-open.org/wsbpel/2.0/plnktype"
xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap12/">
    <types>
        <xsd:schema targetNamespace="urn:gov:hhs:fha:nhinc:entityauditlogquerysaml">
            <xsd:import namespace="urn:gov:hhs:fha:nhinc:common:nhinccommonentity" schemaLocation="../schemas/nhinc/common/NhincCommonEntity.xsd"/>
            <xsd:import namespace="http://nhinc.services.com/schema/auditmessage" schemaLocation="../schemas/ihe/auditmessage.xsd"/>
        </xsd:schema>
    </types>
    <message name="FindAuditEventsRequestMessage">
        <part name="FindAuditEventsRequest" element="nccommonentity:FindAuditEventsSecuredRequest"/>
    </message>
    <message name="FindAuditEventsResponseMessage">
        <part name="FindAuditEventsResponse" element="iheaudit:FindAuditEventsResponse"/>
    </message>
    <portType name="EntityAuditLogQuerySamlPortType">
        <operation name="findAuditEvents">
            <input name="input1" message="tns:FindAuditEventsRequestMessage" wsaw:Action="http://services.nhin.com/wsdl/auditlogquery:findAuditEventsRequest"/>
            <output name="output1" message="tns:FindAuditEventsResponseMessage" wsaw:Action="http://services.nhin.com/wsdl/auditlogquery:findAuditEventsResponse"/>
        </operation>
    </portType>
    <binding name="EntityAuditLogQuerySamlPortTypeBinding" type="tns:EntityAuditLogQuerySamlPortType">
        <soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
        <wsp:PolicyReference URI="#AuditLogQuerySoapBindingPolicy"/>
        <operation name="findAuditEvents">
            <soap:operation soapAction="urn:findAuditEvents"/>
            <input name="input1">
                <soap:body use="literal"/>
            </input>
            <output name="output1">
                <soap:body use="literal"/>
            </output>
        </operation>
    </binding>
    <service name="EntityAuditLogQuerySamlService">
        <port name="EntityAuditLogQuerySamlPortTypeBindingPort" binding="tns:EntityAuditLogQuerySamlPortTypeBinding">
            <soap:address location="http://localhost:${NhincHttpPort}/NhinConnect/EntityAuditLogQuerySaml"/>
        </port>
    </service>
    <plnk:partnerLinkType name="EntityAuditLogQuerySaml">
        <!-- A partner link type is automatically generated when a new port type is added. Partner link types are used by BPEL processes. 
In a BPEL process, a partner link represents the interaction between the BPEL process and a partner service. Each partner link is associated with a partner link type.
A partner link type characterizes the conversational relationship between two services. The partner link type can have one or two roles.-->
        <plnk:role name="EntityAuditLogQuerySamlPortTypeRole" portType="tns:EntityAuditLogQuerySamlPortType"/>
    </plnk:partnerLinkType>
    <!-- Define action property on each receiving message -->
    <vprop:property name="action" type="xsd:string"/>
    <vprop:propertyAlias propertyName="tns:action" messageType="tns:FindAuditEventsRequestMessage" part="FindAuditEventsRequest" sxnmp:nmProperty="org.glassfish.openesb.outbound.custom.properties">
        <vprop:query>action</vprop:query>
    </vprop:propertyAlias>
    <!-- Define resource property on each receiving message -->
    <vprop:property name="resource" type="xsd:string"/>
    <vprop:propertyAlias propertyName="tns:resource" messageType="tns:FindAuditEventsRequestMessage" part="FindAuditEventsRequest" sxnmp:nmProperty="org.glassfish.openesb.outbound.custom.properties">
        <vprop:query>resource</vprop:query>
    </vprop:propertyAlias>
    <!-- Define purposeOfUseRoleCode property on each receiving message -->
    <vprop:property name="purposeOfUseRoleCode" type="xsd:string"/>
    <vprop:propertyAlias propertyName="tns:purposeOfUseRoleCode" messageType="tns:FindAuditEventsRequestMessage" part="FindAuditEventsRequest" sxnmp:nmProperty="org.glassfish.openesb.outbound.custom.properties">
        <vprop:query>purposeOfUseRoleCode</vprop:query>
    </vprop:propertyAlias>
    <!-- Define purposeOfUseCodeSystem property on each receiving message -->
    <vprop:property name="purposeOfUseCodeSystem" type="xsd:string"/>
    <vprop:propertyAlias propertyName="tns:purposeOfUseCodeSystem" messageType="tns:FindAuditEventsRequestMessage" part="FindAuditEventsRequest" sxnmp:nmProperty="org.glassfish.openesb.outbound.custom.properties">
        <vprop:query>purposeOfUseCodeSystem</vprop:query>
    </vprop:propertyAlias>
    <!-- Define purposeOfUseCodeSystemName property on each receiving message -->
    <vprop:property name="purposeOfUseCodeSystemName" type="xsd:string"/>
    <vprop:propertyAlias propertyName="tns:purposeOfUseCodeSystemName" messageType="tns:FindAuditEventsRequestMessage" part="FindAuditEventsRequest" sxnmp:nmProperty="org.glassfish.openesb.outbound.custom.properties">
        <vprop:query>purposeOfUseCodeSystemName</vprop:query>
    </vprop:propertyAlias>
    <!-- Define purposeOfUseDisplayName property on each receiving message -->
    <vprop:property name="purposeOfUseDisplayName" type="xsd:string"/>
    <vprop:propertyAlias propertyName="tns:purposeOfUseDisplayName" messageType="tns:FindAuditEventsRequestMessage" part="FindAuditEventsRequest" sxnmp:nmProperty="org.glassfish.openesb.outbound.custom.properties">
        <vprop:query>purposeOfUseDisplayName</vprop:query>
    </vprop:propertyAlias>
    <!-- Define userFirstName property on each receiving message -->
    <vprop:property name="userFirstName" type="xsd:string"/>
    <vprop:propertyAlias propertyName="tns:userFirstName" messageType="tns:FindAuditEventsRequestMessage" part="FindAuditEventsRequest" sxnmp:nmProperty="org.glassfish.openesb.outbound.custom.properties">
        <vprop:query>userFirstName</vprop:query>
    </vprop:propertyAlias>
    <!-- Define userMiddleName property on each receiving message -->
    <vprop:property name="userMiddleName" type="xsd:string"/>
    <vprop:propertyAlias propertyName="tns:userMiddleName" messageType="tns:FindAuditEventsRequestMessage" part="FindAuditEventsRequest" sxnmp:nmProperty="org.glassfish.openesb.outbound.custom.properties">
        <vprop:query>userMiddleName</vprop:query>
    </vprop:propertyAlias>
    <!-- Define userLastName property on each receiving message -->
    <vprop:property name="userLastName" type="xsd:string"/>
    <vprop:propertyAlias propertyName="tns:userLastName" messageType="tns:FindAuditEventsRequestMessage" part="FindAuditEventsRequest" sxnmp:nmProperty="org.glassfish.openesb.outbound.custom.properties">
        <vprop:query>userLastName</vprop:query>
    </vprop:propertyAlias>
    <!-- Define userName property on each receiving message -->
    <vprop:property name="userName" type="xsd:string"/>
    <vprop:propertyAlias propertyName="tns:userName" messageType="tns:FindAuditEventsRequestMessage" part="FindAuditEventsRequest" sxnmp:nmProperty="org.glassfish.openesb.outbound.custom.properties">
        <vprop:query>userName</vprop:query>
    </vprop:propertyAlias>
    <!-- Define userOrganization property on each receiving message -->
    <vprop:property name="userOrganization" type="xsd:string"/>
    <vprop:propertyAlias propertyName="tns:userOrganization" messageType="tns:FindAuditEventsRequestMessage" part="FindAuditEventsRequest" sxnmp:nmProperty="org.glassfish.openesb.outbound.custom.properties">
        <vprop:query>userOrganization</vprop:query>
    </vprop:propertyAlias>
    <!-- Define userRoleCode property on each receiving message -->
    <vprop:property name="userRoleCode" type="xsd:string"/>
    <vprop:propertyAlias propertyName="tns:userRoleCode" messageType="tns:FindAuditEventsRequestMessage" part="FindAuditEventsRequest" sxnmp:nmProperty="org.glassfish.openesb.outbound.custom.properties">
        <vprop:query>userRoleCode</vprop:query>
    </vprop:propertyAlias>
    <!-- Define userRoleCodeSystem property on each receiving message -->
    <vprop:property name="userRoleCodeSystem" type="xsd:string"/>
    <vprop:propertyAlias propertyName="tns:userRoleCodeSystem" messageType="tns:FindAuditEventsRequestMessage" part="FindAuditEventsRequest" sxnmp:nmProperty="org.glassfish.openesb.outbound.custom.properties">
        <vprop:query>userRoleCodeSystem</vprop:query>
    </vprop:propertyAlias>
    <!-- Define userRoleCodeSystemName property on each receiving message -->
    <vprop:property name="userRoleCodeSystemName" type="xsd:string"/>
    <vprop:propertyAlias propertyName="tns:userRoleCodeSystemName" messageType="tns:FindAuditEventsRequestMessage" part="FindAuditEventsRequest" sxnmp:nmProperty="org.glassfish.openesb.outbound.custom.properties">
        <vprop:query>userRoleCodeSystemName</vprop:query>
    </vprop:propertyAlias>
    <!-- Define userRoleCodeDisplayName property on each receiving message -->
    <vprop:property name="userRoleCodeDisplayName" type="xsd:string"/>
    <vprop:propertyAlias propertyName="tns:userRoleCodeDisplayName" messageType="tns:FindAuditEventsRequestMessage" part="FindAuditEventsRequest" sxnmp:nmProperty="org.glassfish.openesb.outbound.custom.properties">
        <vprop:query>userRoleCodeDisplayName</vprop:query>
    </vprop:propertyAlias>
    <!-- Define expirationDate property on each receiving message -->
    <vprop:property name="expirationDate" type="xsd:string"/>
    <vprop:propertyAlias propertyName="tns:expirationDate" messageType="tns:FindAuditEventsRequestMessage" part="FindAuditEventsRequest" sxnmp:nmProperty="org.glassfish.openesb.outbound.custom.properties">
        <vprop:query>expirationDate</vprop:query>
    </vprop:propertyAlias>
    <!-- Define signDate property on each receiving message -->
    <vprop:property name="signDate" type="xsd:string"/>
    <vprop:propertyAlias propertyName="tns:signDate" messageType="tns:FindAuditEventsRequestMessage" part="FindAuditEventsRequest" sxnmp:nmProperty="org.glassfish.openesb.outbound.custom.properties">
        <vprop:query>signDate</vprop:query>
    </vprop:propertyAlias>
    <!-- Define contentReference property on each receiving message -->
    <vprop:property name="contentReference" type="xsd:string"/>
    <vprop:propertyAlias propertyName="tns:contentReference" messageType="tns:FindAuditEventsRequestMessage" part="FindAuditEventsRequest" sxnmp:nmProperty="org.glassfish.openesb.outbound.custom.properties">
        <vprop:query>contentReference</vprop:query>
    </vprop:propertyAlias>
    <!-- Define content property on each receiving message -->
    <vprop:property name="content" type="xsd:base64Binary"/>
    <vprop:propertyAlias propertyName="tns:content" messageType="tns:FindAuditEventsRequestMessage" part="FindAuditEventsRequest" sxnmp:nmProperty="org.glassfish.openesb.outbound.custom.properties">
        <vprop:query>content</vprop:query>
    </vprop:propertyAlias>
    <wsp:Policy wsu:Id="AuditLogQuerySoapBindingPolicy">
        <wsp:ExactlyOne>
            <wsp:All>
                <sc1:KeyStore wspp:visibility="private" aliasSelector="gov.hhs.fha.nhinc.callback.KeyStoreClientAliasSelector" callbackHandler="gov.hhs.fha.nhinc.callback.KeyStoreCallbackHandler"/>
                <sc1:TrustStore wspp:visibility="private" certSelector="gov.hhs.fha.nhinc.callback.TrustStoreAliasSelector" callbackHandler="gov.hhs.fha.nhinc.callback.TrustStoreCallbackHandler"/>
                <sc1:CallbackHandlerConfiguration wspp:visibility="private">
                    <sc1:CallbackHandler name="samlHandler" classname="gov.hhs.fha.nhinc.callback.SamlCallbackHandler"/>
                </sc1:CallbackHandlerConfiguration>
            </wsp:All>
        </wsp:ExactlyOne>
    </wsp:Policy>
</definitions>

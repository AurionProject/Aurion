<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN" "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
<!--
    Document   : configdb.hbm.xml
    Created on : May 27, 2014
    Author     : cmay
    Description: Hibernate mapping file for CONNECTDirectConfig's configdb
-->

<hibernate-mapping
    package="gov.hhs.fha.nhinc.directconfig.entity"
    default-lazy="false">

    <!--
        Domain (configdb.domain)
    -->
    <class name="Domain" table="domain">
        <id name="id" type="long">
            <generator class="native" />
        </id>

        <property name="postmasterAddressId" type="long" />
        <property name="domainName" type="string" not-null="true" />
        <property name="createTime" type="calendar" not-null="true" />
        <property name="updateTime" type="calendar" />
        <property name="status">
            <type name="org.hibernate.type.EnumType">
                <param name="enumClass">gov.hhs.fha.nhinc.directconfig.entity.helpers.EntityStatus</param>
            </type>
        </property>

        <bag name="addresses" cascade="delete" table="address" inverse="true" lazy="false" fetch="select">
            <key column="domainId" not-null="true" />
            <one-to-many class="Address" />
        </bag>

        <bag name="relations" cascade="delete" table="trustbundledomainreltn" inverse="true" lazy="false" fetch="select">
            <key column="domain_id" not-null="true" />
            <one-to-many class="TrustBundleDomainReltn" />
        </bag>
    </class>

    <!--
        Address (configdb.address)
    -->
    <class name="Address" table="address">
        <id name="id" type="long">
            <generator class="native"/>
        </id>

        <property name="emailAddress" type="string" not-null="true" />
        <property name="displayName" type="string" length="100" />
        <property name="endpoint" type="string" />
        <property name="type" type="string" length="4" />
        <property name="createTime" type="calendar" not-null="true" />
        <property name="updateTime" type="calendar" />
        <property name="status">
            <type name="org.hibernate.type.EnumType">
                <param name="enumClass">gov.hhs.fha.nhinc.directconfig.entity.helpers.EntityStatus</param>
            </type>
        </property>

        <!-- Auto-generated -->
        <many-to-one name="domain" column="domainId" class="Domain" not-null="true" lazy="false" fetch="select" />
    </class>

    <!--
        Anchor (configdb.anchor)
    -->
    <class name="Anchor" table="anchor">
        <id name="id" type="long">
            <generator class="native"/>
        </id>

        <property name="certificateId" type="long" not-null="true" />
        <property name="owner" type="string" not-null="true" />
        <property name="thumbprint" type="string" length="64" not-null="true" />
        <property name="data" column="certificateData" type="binary" not-null="true" />
        <property name="validStartDate" type="calendar" not-null="true" />
        <property name="validEndDate" type="calendar" not-null="true" />
        <property name="incoming" type="boolean" not-null="true" />
        <property name="outgoing" type="boolean" not-null="true" />
        <property name="createTime" type="calendar" not-null="true" />
        <property name="status">
            <type name="org.hibernate.type.EnumType">
                <param name="enumClass">gov.hhs.fha.nhinc.directconfig.entity.helpers.EntityStatus</param>
            </type>
        </property>
    </class>

    <!--
        Certificate (configdb.certificate)
    -->
    <class name="Certificate" table="certificate">
        <id name="id" type="long">
            <generator class="native"/>
        </id>

        <property name="owner" type="string" not-null="true" />
        <property name="thumbprint" type="string" length="64" not-null="true" />
        <property name="data" column="certificateData" type="binary" not-null="true" />
        <property name="validStartDate" type="calendar" not-null="true" />
        <property name="validEndDate" type="calendar" not-null="true" />
        <property name="privateKey" type="boolean" not-null="true" />
        <property name="createTime" type="calendar" not-null="true" />
        <property name="status">
            <type name="org.hibernate.type.EnumType">
                <param name="enumClass">gov.hhs.fha.nhinc.directconfig.entity.helpers.EntityStatus</param>
            </type>
        </property>
    </class>

    <!--
        Setting (configdb.setting)
    -->
    <class name="Setting" table="setting">
        <id name="id" type="long">
            <generator class="native"/>
        </id>

        <property name="name" type="string" />
        <property name="value" type="string" length="4096" />
        <property name="createTime" type="calendar" not-null="true" />
        <property name="updateTime" type="calendar" />
        <property name="status">
            <type name="org.hibernate.type.EnumType">
                <param name="enumClass">gov.hhs.fha.nhinc.directconfig.entity.helpers.EntityStatus</param>
            </type>
        </property>
    </class>

    <!--
        TrustBundle (configdb.trustbundle)
    -->
    <class name="TrustBundle" table="trustbundle">
        <id name="id" type="long">
            <generator class="native"/>
        </id>

        <property name="bundleName" type="string" not-null="true" />
        <property name="bundleURL" type="string" not-null="true" />
        <property name="checkSum" column="bundleChecksum" type="string" not-null="true" />
        <property name="lastRefreshAttempt" type="calendar" />
        <property name="lastSuccessfulRefresh" type="calendar" />
        <property name="refreshInterval" type="integer" />
        <property name="signingCertificateData" type="binary" />
        <property name="createTime" type="calendar" not-null="true" />
        <property name="lastRefreshError">
            <type name="org.hibernate.type.EnumType">
                <param name="enumClass">gov.hhs.fha.nhinc.directconfig.entity.helpers.BundleRefreshError</param>
            </type>
        </property>

        <bag name="trustBundleAnchors" cascade="delete" table="trustbundleanchor" inverse="true" lazy="false" fetch="select">
            <key column="trustbundleId" not-null="true" />
            <one-to-many class="TrustBundleAnchor" />
        </bag>

        <bag name="relations" cascade="delete" table="trustbundledomainreltn" inverse="true" lazy="false" fetch="select">
            <key column="trust_bundle_id" not-null="true" />
            <one-to-many class="TrustBundleDomainReltn" />
        </bag>
    </class>

    <!--
        TrustBundleAnchor (configdb.trustbundleanchor)
    -->
    <class name="TrustBundleAnchor" table="trustbundleanchor">
        <id name="id" type="long">
            <generator class="native"/>
        </id>

        <property name="data" column="anchorData" type="binary" not-null="true" />
        <property name="thumbprint" type="string" length="64" not-null="true" />
        <property name="validStartDate" type="calendar" not-null="true" />
        <property name="validEndDate" type="calendar" not-null="true" />

        <many-to-one name="trustBundle" column="trustbundleId" class="TrustBundle" lazy="false" fetch="select" not-null="true" />
    </class>

    <!--
        TrustBundleDomainReltn (configdb.trustbundledomainreltn)
    -->
    <class name="TrustBundleDomainReltn" table="trustbundledomainreltn">
        <id name="id" type="long">
            <generator class="native"/>
        </id>

        <property name="incoming" type="boolean" not-null="true" />
        <property name="outgoing" type="boolean" not-null="true" />

        <!-- Auto-generated -->
        <many-to-one name="trustBundle" column="trust_bundle_id" class="TrustBundle" lazy="false" fetch="select" not-null="true" />
        <many-to-one name="domain" column="domain_id" class="Domain" lazy="false" fetch="select" not-null="true" />
    </class>

    <!--
        CertPolicy (configdb.certpolicy)
    -->
    <!--class name="CertPolicy" table="certpolicy">
        <id name="id" type="long">
            <generator class="native"/>
        </id>

        <property name="createTime" type="calendar" not-null="true" />
        <property name="lexicon" type="integer" not-null="true" />
        <property name="policyData" type="binary" length="204800" not-null="true" />
        <property name="policyName" type="string" />
    </class-->

    <!--
        CertPolicyGroup (configdb.certpolicygroup)
    -->
    <!--class name="CertPolicyGroup" table="certpolicygroup">
        <id name="id" type="long">
            <generator class="native"/>
        </id>

        <property name="createTime" type="calendar" not-null="true" />
        <property name="policyGroupName" type="string" />
    </class-->

    <!--
        CertPolicyGroupDomainReltn (configdb.certpolicygroupdomainreltn)
    -->
    <!--class name="CertPolicyGroupDomainReltn" table="certpolicygroupdomainreltn">
        <id name="id" type="long">
            <generator class="native"/>
        </id>

        <property name="policyGroupId" column="policy_group_id" type="long" not-null="true" />
        <property name="domainId" column="domain_id" type="long" not-null="true" />
    </class-->

    <!--
        CertPolicyGroupReltn (configdb.certpolicygroupreltn)
    -->
    <!--class name="CertPolicyGroupReltn" table="certpolicygroupreltn">
        <id name="id" type="long">
            <generator class="native"/>
        </id>

        <property name="incoming" type="short" />
        <property name="outgoing" type="short" />
        <property name="policyUse" type="integer" not-null="true" />
        <property name="certPolicyId" type="long" not-null="true" />
        <property name="certPolicyGroupId" type="long" not-null="true" />
    </class-->

    <!--
        DNSRecord (configdb.dnsrecord)
    -->
    <!--class name="DNSRecord" table="dnsrecord">
        <id name="id" type="long">
            <generator class="native"/>
        </id>

        <property name="createTime" type="calendar" not-null="true" />
        <property name="data" type="binary" length="8192"/>
        <property name="dclass" type="integer" />
        <property name="name" type="string" />
        <property name="ttl" type="long" />
        <property name="type" type="integer" />
    </class-->

    <!--
        Named Queries
    -->
    <!--
        Address
    -->
    <query name="getAddress">
        <![CDATA[FROM Address a
                    WHERE ( UPPER ( a.emailAddress ) IN (:emailList) )
                    AND ( :status IS NULL OR a.status = :status ) ]]>
    </query>

    <query name="getAddressByStatus">
        <![CDATA[FROM Address a
                    WHERE ( :status IS NULL OR a.status = :status ) ]]>
    </query>

    <query name="getAddressByDomain">
        <![CDATA[FROM Address a
                    WHERE ( :domainId IS NULL OR a.domain = :domainId )
                    AND ( :status IS NULL OR a.status = :status ) ]]>
    </query>

    <query name="getAddressById">
        <![CDATA[FROM Address a
                    WHERE ( a.id = :id )]]>
    </query>

    <!--
        Anchor
    -->
    <query name="getAllAnchors">
        <![CDATA[FROM Anchor a]]>
    </query>

    <query name="getAnchorsByOwner">
        <![CDATA[FROM Anchor a
                    WHERE ( UPPER(a.owner) IN (:ownerList) ) ]]>
    </query>

    <query name="getAnchorsByIds">
        <![CDATA[FROM Anchor a
                    WHERE ( a.id IN (:idList) ) ]]>
    </query>

    <!--
        Certificate
    -->
    <query name="getCertificates">
        <![CDATA[FROM Certificate c
                    WHERE ( :thumbprint IS NULL OR c.thumbprint = :thumbprint )
                    AND ( :owner IS NULL OR UPPER(c.owner) = :owner ) ]]>
    </query>

    <query name="getCertificatesByIds">
        <![CDATA[FROM Certificate c
                    WHERE ( c.id IN (:idList) ) ]]>
    </query>

    <query name="getCertificatesByOwner">
        <![CDATA[FROM Certificate c
                    WHERE ( :owner IS NULL OR UPPER(c.owner) = :owner ) ]]>
    </query>

    <!--
        Domain
    -->
    <query name="searchDomains">
        <![CDATA[FROM Domain d
                    WHERE ( :domainName IS NULL OR UPPER(d.domainName) LIKE :domainName )
                    AND ( :status IS NULL OR d.status = :status ) ]]>
    </query>

    <query name="getDomains">
        <![CDATA[FROM Domain d
                    WHERE ( UPPER(d.domainName) IN (:nameList) )
                    AND ( :status IS NULL OR d.status = :status ) ]]>
    </query>

    <query name="getDomainsByStatus">
        <![CDATA[FROM Domain d
                    WHERE ( :status IS NULL OR d.status = :status ) ]]>
    </query>

    <query name="getDomainsByName">
        <![CDATA[FROM Domain d
                    WHERE ( :domainName IS NULL OR UPPER(d.domainName) = :domainName ) ]]>
    </query>

    <!--
        Setting
    -->
    <query name="getAllSettings">
        <![CDATA[FROM Setting s]]>
    </query>

    <query name="getSettings">
        <![CDATA[FROM Setting s
                    WHERE ( UPPER(s.name) IN (:nameList) ) ]]>
    </query>

    <!--
        TrustBundle
    -->
    <query name="getAllTrustBundles">
        <![CDATA[FROM TrustBundle t]]>
    </query>

    <query name="getTrustBundleByName">
        <![CDATA[FROM TrustBundle t
                    WHERE ( UPPER(t.bundleName) = :bundleName ) ]]>
    </query>

    <query name="getTrustBundleById">
        <![CDATA[FROM TrustBundle t
                    WHERE ( t.id = :id ) ]]>
    </query>

    <!--
        TrustBundleDomainReltn
    -->
    <query name="getTrustBundleDomainReltn">
        <![CDATA[FROM TrustBundleDomainReltn t
                    WHERE ( t.domain = :domain )
                    AND ( t.trustBundle = :trustBundle ) ]]>
    </query>

    <query name="getTrustBundleDomainReltnByDomain">
        <![CDATA[FROM TrustBundleDomainReltn t
                    WHERE ( t.domain = :domain ) ]]>
    </query>
</hibernate-mapping>
